
Tiny2313 simple generator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000728  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  00800060  00800060  00000728  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000758  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004c8  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001a4  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000625  00000000  00000000  00000ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  000014e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001f2  00000000  00000000  000016ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000093  00000000  00000000  0000189e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00001931  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	42 c0       	rjmp	.+132    	; 0x8e <__vector_4>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	24 c3       	rjmp	.+1608   	; 0x658 <__vector_7>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	f1 c2       	rjmp	.+1506   	; 0x5f6 <__vector_9>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__vector_13>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>
  22:	0f c0       	rjmp	.+30     	; 0x42 <__bad_interrupt>
  24:	0e c0       	rjmp	.+28     	; 0x42 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a5 38       	cpi	r26, 0x85	; 133
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	39 d0       	rcall	.+114    	; 0xb2 <main>
  40:	37 c3       	rjmp	.+1646   	; 0x6b0 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <__vector_13>:
PT_THREAD(Switch(struct pt *pt))
{
	//uint32_t dur=0;
	static volatile uint32_t switch_timer=0;
	PT_BEGIN(pt);
	PT_WAIT_UNTIL(pt,(st_millis()-switch_timer)>=10);//запуск протопотока каждые 10мсек
  44:	1f 92       	push	r1
  46:	0f 92       	push	r0
  48:	0f b6       	in	r0, 0x3f	; 63
  4a:	0f 92       	push	r0
  4c:	11 24       	eor	r1, r1
  4e:	8f 93       	push	r24
  50:	9f 93       	push	r25
  52:	af 93       	push	r26
		GENERATOR_ON;
		LED0_ON;
		LED1_ON;
	}
	PT_END(pt);
}
  54:	bf 93       	push	r27
  56:	80 91 6f 00 	lds	r24, 0x006F
//Фукция выдачи текущего системного времени
uint32_t st_millis(void)
{
	uint32_t m;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  5a:	90 91 70 00 	lds	r25, 0x0070
	{
		m = st_timer0_millis;
  5e:	a0 91 71 00 	lds	r26, 0x0071
  62:	b0 91 72 00 	lds	r27, 0x0072
  66:	01 96       	adiw	r24, 0x01	; 1
  68:	a1 1d       	adc	r26, r1
  6a:	b1 1d       	adc	r27, r1
  6c:	80 93 6f 00 	sts	0x006F, r24
{
	//uint32_t dur=0;
	static volatile uint32_t switch_timer=0;
	PT_BEGIN(pt);
	PT_WAIT_UNTIL(pt,(st_millis()-switch_timer)>=10);//запуск протопотока каждые 10мсек
	switch_timer=st_millis();
  70:	90 93 70 00 	sts	0x0070, r25
  74:	a0 93 71 00 	sts	0x0071, r26
  78:	b0 93 72 00 	sts	0x0072, r27
  7c:	bf 91       	pop	r27
  7e:	af 91       	pop	r26
	if (p_generator->state==GEN_OFF)
  80:	9f 91       	pop	r25
  82:	8f 91       	pop	r24
  84:	0f 90       	pop	r0
  86:	0f be       	out	0x3f, r0	; 63
	}
	else if (p_generator->regime==GEN_UART)
	{
		//тут что-то будет :) можно прямо здесь написать работу от уарта, а можно в отдельно протопотоке
	}
	else if ((p_generator->regime==GEN_MANUAL)&&(p_generator->state==GEN_ONESHOT))
  88:	0f 90       	pop	r0
  8a:	1f 90       	pop	r1
  8c:	18 95       	reti

0000008e <__vector_4>:
  8e:	1f 92       	push	r1
  90:	0f 92       	push	r0
  92:	0f b6       	in	r0, 0x3f	; 63
	{
		CLEAR_TCCR1B;
  94:	0f 92       	push	r0
  96:	11 24       	eor	r1, r1
  98:	8f 93       	push	r24
		TCCR1B|=PRESCALER_1_MASK;
  9a:	80 91 79 00 	lds	r24, 0x0079
  9e:	82 30       	cpi	r24, 0x02	; 2
		DISCONECT_TIMER_FROM_PIN;
  a0:	11 f4       	brne	.+4      	; 0xa6 <__vector_4+0x18>
  a2:	10 92 79 00 	sts	0x0079, r1
		TCNT1=0;
  a6:	8f 91       	pop	r24
  a8:	0f 90       	pop	r0
		ICR1=60000;
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	0f 90       	pop	r0
  ae:	1f 90       	pop	r1
  b0:	18 95       	reti

000000b2 <main>:
		OCR1=2500;
  b2:	10 92 79 00 	sts	0x0079, r1
  b6:	10 92 7a 00 	sts	0x007A, r1
		CONNECT_TIMER_TO_PIN;
  ba:	10 92 7b 00 	sts	0x007B, r1
  be:	10 92 7c 00 	sts	0x007C, r1
		GENERATOR_ON;
  c2:	8e e1       	ldi	r24, 0x1E	; 30
  c4:	81 bb       	out	0x11, r24	; 17
		LED0_ON;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
		LED1_ON;
  c8:	87 bb       	out	0x17, r24	; 23
	}
	PT_END(pt);
  ca:	80 e6       	ldi	r24, 0x60	; 96
  cc:	82 bb       	out	0x12, r24	; 18
  ce:	18 ba       	out	0x18, r1	; 24
  d0:	82 e0       	ldi	r24, 0x02	; 2
}
  d2:	80 bf       	out	0x30, r24	; 48
  d4:	83 e0       	ldi	r24, 0x03	; 3
  d6:	83 bf       	out	0x33, r24	; 51
PT_THREAD(Switch(struct pt *pt))
{
	//uint32_t dur=0;
	static volatile uint32_t switch_timer=0;
	PT_BEGIN(pt);
	PT_WAIT_UNTIL(pt,(st_millis()-switch_timer)>=10);//запуск протопотока каждые 10мсек
  d8:	12 be       	out	0x32, r1	; 50
  da:	8d e7       	ldi	r24, 0x7D	; 125
  dc:	86 bf       	out	0x36, r24	; 54
  de:	82 e8       	ldi	r24, 0x82	; 130
  e0:	8f bd       	out	0x2f, r24	; 47
  e2:	8c e1       	ldi	r24, 0x1C	; 28
	switch_timer=st_millis();
	if (p_generator->state==GEN_OFF)
	{
		if(p_generator->regime==GEN_PERIODIC)
  e4:	8e bd       	out	0x2e, r24	; 46
  e6:	8f b5       	in	r24, 0x2f	; 47
  e8:	8f 77       	andi	r24, 0x7F	; 127
  ea:	8f bd       	out	0x2f, r24	; 47
			}
			p_generator->state=GEN_ON;
			CONNECT_TIMER_TO_PIN;//подключаем таймер к пину
			GENERATOR_ON;
		}
		if (p_generator->regime==GEN_MANUAL)
  ec:	1d bc       	out	0x2d, r1	; 45
  ee:	1c bc       	out	0x2c, r1	; 44
		{
			//TIMSK&=~_BV(TOIE1);
			GENERATOR_OFF;
  f0:	15 bc       	out	0x25, r1	; 37
  f2:	14 bc       	out	0x24, r1	; 36
  f4:	1b bc       	out	0x2b, r1	; 43
			DISCONECT_TIMER_FROM_PIN;
  f6:	1a bc       	out	0x2a, r1	; 42
  f8:	89 b7       	in	r24, 0x39	; 57
  fa:	81 60       	ori	r24, 0x01	; 1
			OUT_OFF;
  fc:	89 bf       	out	0x39, r24	; 57
			LED0_OFF;
  fe:	72 d2       	rcall	.+1252   	; 0x5e4 <USART_Init>
			LED1_OFF;
 100:	10 92 78 00 	sts	0x0078, r1
	switch_timer=st_millis();
	if (p_generator->state==GEN_OFF)
	{
		if(p_generator->regime==GEN_PERIODIC)
		{
			CLEAR_TCCR1B;
 104:	10 92 77 00 	sts	0x0077, r1
 108:	10 92 76 00 	sts	0x0076, r1
			//DISCONECT_TIMER_FROM_PIN;
			//OUT_OFF;
			if (p_generator->period==PERIOD_HZ1000)
 10c:	10 92 75 00 	sts	0x0075, r1
 110:	10 92 74 00 	sts	0x0074, r1
			{
				TCCR1B|=PRESCALER_1_MASK;
				ICR1=PERIOD_HZ1000_TICKS;
			}
			else if (p_generator->period==PERIOD_HZ100)
 114:	10 92 73 00 	sts	0x0073, r1
 118:	a8 95       	wdr
				TCCR1B|=PRESCALER_8_MASK;
				ICR1=PERIOD_HZ100_TICKS;
			}
			else
			{
				TCCR1B|=PRESCALER_256_MASK;
 11a:	9f e0       	ldi	r25, 0x0F	; 15
 11c:	88 e1       	ldi	r24, 0x18	; 24
				ICR1=PERIOD_HZ1_TICKS;
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	f8 94       	cli
 122:	a8 95       	wdr
 124:	81 bd       	out	0x21, r24	; 33
			}
			if (p_generator->duration==DURATION_90)
 126:	0f be       	out	0x3f, r0	; 63
 128:	91 bd       	out	0x21, r25	; 33
 12a:	78 94       	sei
 12c:	e4 e1       	ldi	r30, 0x14	; 20
			{
				OCR1=(uint16_t)((7*(uint32_t)ICR1)>>3);
			}
			else if (p_generator->duration==DURATION_50)
 12e:	be 2e       	mov	r11, r30
 130:	f2 e0       	ldi	r31, 0x02	; 2
 132:	af 2e       	mov	r10, r31
			{
				OCR1=(uint16_t)((uint32_t)ICR1>>1);
			}
			else
			{
				if (p_generator->period==PERIOD_HZ1000)
 134:	99 24       	eor	r9, r9
 136:	93 94       	inc	r9
 138:	41 ea       	ldi	r20, 0xA1	; 161
				{
					OCR1=(uint16_t)(5*(uint32_t)ICR1>>4);
				}
				else if (p_generator->period==PERIOD_HZ100)
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	00 e6       	ldi	r16, 0x60	; 96
 13e:	1a ee       	ldi	r17, 0xEA	; 234
				{
					OCR1=(uint16_t)((uint32_t)ICR1>>5);
				}
				else
				{
					OCR1=(uint16_t)(5*(uint32_t)ICR1>>14);
 140:	c4 ec       	ldi	r28, 0xC4	; 196
 142:	d9 e0       	ldi	r29, 0x09	; 9
 144:	a2 e1       	ldi	r26, 0x12	; 18
 146:	ba e7       	ldi	r27, 0x7A	; 122
 148:	e0 e1       	ldi	r30, 0x10	; 16
 14a:	f7 e2       	ldi	r31, 0x27	; 39
 14c:	26 ee       	ldi	r18, 0xE6	; 230
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	8b e3       	ldi	r24, 0x3B	; 59
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	2c c0       	rjmp	.+88     	; 0x1ae <__stack+0xcf>
 156:	61 ea       	ldi	r22, 0xA1	; 161
 158:	e6 16       	cp	r14, r22
 15a:	f1 04       	cpc	r15, r1
 15c:	99 f1       	breq	.+102    	; 0x1c4 <__stack+0xe5>
 15e:	10 92 78 00 	sts	0x0078, r1
 162:	10 92 77 00 	sts	0x0077, r1
 166:	e0 90 75 00 	lds	r14, 0x0075
 16a:	f0 90 76 00 	lds	r15, 0x0076
 16e:	e1 14       	cp	r14, r1
 170:	f1 04       	cpc	r15, r1
 172:	09 f4       	brne	.+2      	; 0x176 <__stack+0x97>
 174:	63 c0       	rjmp	.+198    	; 0x23c <__stack+0x15d>
				}
			}
			p_generator->state=GEN_ON;
 176:	66 ee       	ldi	r22, 0xE6	; 230
 178:	e6 16       	cp	r14, r22
 17a:	f1 04       	cpc	r15, r1
			CONNECT_TIMER_TO_PIN;//подключаем таймер к пину
 17c:	09 f4       	brne	.+2      	; 0x180 <__stack+0xa1>
 17e:	62 c0       	rjmp	.+196    	; 0x244 <__stack+0x165>
 180:	10 92 76 00 	sts	0x0076, r1
			GENERATOR_ON;
 184:	10 92 75 00 	sts	0x0075, r1
 188:	e0 90 73 00 	lds	r14, 0x0073
 18c:	f0 90 74 00 	lds	r15, 0x0074
			CLEAR_TCCR1B;
			//DISCONECT_TIMER_FROM_PIN;
			//OUT_OFF;
			if (p_generator->period==PERIOD_HZ1000)
			{
				TCCR1B|=PRESCALER_1_MASK;
 190:	e1 14       	cp	r14, r1
				ICR1=PERIOD_HZ1000_TICKS;
 192:	f1 04       	cpc	r15, r1
 194:	09 f4       	brne	.+2      	; 0x198 <__stack+0xb9>
 196:	9c c0       	rjmp	.+312    	; 0x2d0 <__stack+0x1f1>
 198:	6b e3       	ldi	r22, 0x3B	; 59
 19a:	e6 16       	cp	r14, r22
				TCCR1B|=PRESCALER_256_MASK;
				ICR1=PERIOD_HZ1_TICKS;
			}
			if (p_generator->duration==DURATION_90)
			{
				OCR1=(uint16_t)((7*(uint32_t)ICR1)>>3);
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	f6 06       	cpc	r15, r22
 1a0:	09 f4       	brne	.+2      	; 0x1a4 <__stack+0xc5>
 1a2:	9a c0       	rjmp	.+308    	; 0x2d8 <__stack+0x1f9>
 1a4:	10 92 74 00 	sts	0x0074, r1
 1a8:	10 92 73 00 	sts	0x0073, r1
 1ac:	a8 95       	wdr
 1ae:	e0 90 77 00 	lds	r14, 0x0077
 1b2:	f0 90 78 00 	lds	r15, 0x0078
 1b6:	e1 14       	cp	r14, r1
 1b8:	f1 04       	cpc	r15, r1
 1ba:	69 f6       	brne	.-102    	; 0x156 <__stack+0x77>
 1bc:	50 93 78 00 	sts	0x0078, r21
 1c0:	40 93 77 00 	sts	0x0077, r20
 1c4:	7f b6       	in	r7, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	c0 90 6f 00 	lds	r12, 0x006F
 1cc:	d0 90 70 00 	lds	r13, 0x0070
 1d0:	e0 90 71 00 	lds	r14, 0x0071
 1d4:	f0 90 72 00 	lds	r15, 0x0072
 1d8:	7f be       	out	0x3f, r7	; 63
 1da:	40 90 6b 00 	lds	r4, 0x006B
				TCCR1B|=PRESCALER_1_MASK;
				ICR1=PERIOD_HZ1000_TICKS;
			}
			else if (p_generator->period==PERIOD_HZ100)
			{
				TCCR1B|=PRESCALER_8_MASK;
 1de:	50 90 6c 00 	lds	r5, 0x006C
				ICR1=PERIOD_HZ100_TICKS;
 1e2:	60 90 6d 00 	lds	r6, 0x006D
 1e6:	70 90 6e 00 	lds	r7, 0x006E
			}
			else
			{
				if (p_generator->period==PERIOD_HZ1000)
				{
					OCR1=(uint16_t)(5*(uint32_t)ICR1>>4);
 1ea:	c4 18       	sub	r12, r4
 1ec:	d5 08       	sbc	r13, r5
 1ee:	e6 08       	sbc	r14, r6
 1f0:	f7 08       	sbc	r15, r7
 1f2:	6a e0       	ldi	r22, 0x0A	; 10
 1f4:	c6 16       	cp	r12, r22
 1f6:	d1 04       	cpc	r13, r1
 1f8:	e1 04       	cpc	r14, r1
 1fa:	f1 04       	cpc	r15, r1
 1fc:	08 f4       	brcc	.+2      	; 0x200 <__stack+0x121>
 1fe:	b3 cf       	rjmp	.-154    	; 0x166 <__stack+0x87>
 200:	7f b6       	in	r7, 0x3f	; 63
 202:	f8 94       	cli
 204:	c0 90 6f 00 	lds	r12, 0x006F
 208:	d0 90 70 00 	lds	r13, 0x0070
 20c:	e0 90 71 00 	lds	r14, 0x0071
 210:	f0 90 72 00 	lds	r15, 0x0072
 214:	7f be       	out	0x3f, r7	; 63
 216:	c0 92 6b 00 	sts	0x006B, r12
 21a:	d0 92 6c 00 	sts	0x006C, r13
 21e:	e0 92 6d 00 	sts	0x006D, r14
			{
				OCR1=(uint16_t)((7*(uint32_t)ICR1)>>3);
			}
			else if (p_generator->duration==DURATION_50)
			{
				OCR1=(uint16_t)((uint32_t)ICR1>>1);
 222:	f0 92 6e 00 	sts	0x006E, r15
 226:	f0 90 6a 00 	lds	r15, 0x006A
 22a:	ff 20       	and	r15, r15
 22c:	09 f4       	brne	.+2      	; 0x230 <__stack+0x151>
 22e:	94 c0       	rjmp	.+296    	; 0x358 <__stack+0x279>
				{
					OCR1=(uint16_t)(5*(uint32_t)ICR1>>4);
				}
				else if (p_generator->period==PERIOD_HZ100)
				{
					OCR1=(uint16_t)((uint32_t)ICR1>>5);
 230:	f0 90 6a 00 	lds	r15, 0x006A
 234:	fa 94       	dec	r15
 236:	f0 92 6a 00 	sts	0x006A, r15
 23a:	91 cf       	rjmp	.-222    	; 0x15e <__stack+0x7f>
 23c:	30 93 76 00 	sts	0x0076, r19
 240:	20 93 75 00 	sts	0x0075, r18
 244:	7f b6       	in	r7, 0x3f	; 63
 246:	f8 94       	cli
 248:	c0 90 6f 00 	lds	r12, 0x006F
{
	uint32_t m;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		m = st_timer0_millis;
 24c:	d0 90 70 00 	lds	r13, 0x0070
 250:	e0 90 71 00 	lds	r14, 0x0071
 254:	f0 90 72 00 	lds	r15, 0x0072
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 258:	7f be       	out	0x3f, r7	; 63
PT_THREAD(Switch(struct pt *pt))
{
	//uint32_t dur=0;
	static volatile uint32_t switch_timer=0;
	PT_BEGIN(pt);
	PT_WAIT_UNTIL(pt,(st_millis()-switch_timer)>=10);//запуск протопотока каждые 10мсек
 25a:	40 90 66 00 	lds	r4, 0x0066
 25e:	50 90 67 00 	lds	r5, 0x0067
 262:	60 90 68 00 	lds	r6, 0x0068
 266:	70 90 69 00 	lds	r7, 0x0069
 26a:	c4 18       	sub	r12, r4
 26c:	d5 08       	sbc	r13, r5
 26e:	e6 08       	sbc	r14, r6
 270:	f7 08       	sbc	r15, r7
 272:	6a e0       	ldi	r22, 0x0A	; 10
 274:	c6 16       	cp	r12, r22
 276:	d1 04       	cpc	r13, r1
 278:	e1 04       	cpc	r14, r1
 27a:	f1 04       	cpc	r15, r1
 27c:	08 f4       	brcc	.+2      	; 0x280 <__stack+0x1a1>
 27e:	84 cf       	rjmp	.-248    	; 0x188 <__stack+0xa9>
//Фукция выдачи текущего системного времени
uint32_t st_millis(void)
{
	uint32_t m;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 280:	7f b6       	in	r7, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 282:	f8 94       	cli
	{
		m = st_timer0_millis;
 284:	c0 90 6f 00 	lds	r12, 0x006F
 288:	d0 90 70 00 	lds	r13, 0x0070
 28c:	e0 90 71 00 	lds	r14, 0x0071
 290:	f0 90 72 00 	lds	r15, 0x0072
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 294:	7f be       	out	0x3f, r7	; 63
{
	//uint32_t dur=0;
	static volatile uint32_t switch_timer=0;
	PT_BEGIN(pt);
	PT_WAIT_UNTIL(pt,(st_millis()-switch_timer)>=10);//запуск протопотока каждые 10мсек
	switch_timer=st_millis();
 296:	c0 92 66 00 	sts	0x0066, r12
 29a:	d0 92 67 00 	sts	0x0067, r13
 29e:	e0 92 68 00 	sts	0x0068, r14
 2a2:	f0 92 69 00 	sts	0x0069, r15
	if (p_generator->state==GEN_OFF)
 2a6:	60 91 79 00 	lds	r22, 0x0079
 2aa:	61 11       	cpse	r22, r1
 2ac:	7c c0       	rjmp	.+248    	; 0x3a6 <__stack+0x2c7>
	{
		if(p_generator->regime==GEN_PERIODIC)
 2ae:	60 91 7a 00 	lds	r22, 0x007A
 2b2:	61 30       	cpi	r22, 0x01	; 1
 2b4:	09 f4       	brne	.+2      	; 0x2b8 <__stack+0x1d9>
 2b6:	a3 c0       	rjmp	.+326    	; 0x3fe <__stack+0x31f>
			}
			p_generator->state=GEN_ON;
			CONNECT_TIMER_TO_PIN;//подключаем таймер к пину
			GENERATOR_ON;
		}
		if (p_generator->regime==GEN_MANUAL)
 2b8:	61 11       	cpse	r22, r1
 2ba:	62 cf       	rjmp	.-316    	; 0x180 <__stack+0xa1>
		{
			//TIMSK&=~_BV(TOIE1);
			GENERATOR_OFF;
 2bc:	69 b7       	in	r22, 0x39	; 57
 2be:	6f 7b       	andi	r22, 0xBF	; 191
 2c0:	69 bf       	out	0x39, r22	; 57
			DISCONECT_TIMER_FROM_PIN;
 2c2:	6f b5       	in	r22, 0x2f	; 47
 2c4:	6f 77       	andi	r22, 0x7F	; 127
 2c6:	6f bd       	out	0x2f, r22	; 47
			OUT_OFF;
 2c8:	c3 98       	cbi	0x18, 3	; 24
			LED0_OFF;
 2ca:	93 98       	cbi	0x12, 3	; 18
			LED1_OFF;
 2cc:	94 98       	cbi	0x12, 4	; 18
 2ce:	58 cf       	rjmp	.-336    	; 0x180 <__stack+0xa1>
PT_THREAD(Leds(struct pt *pt))
{
	static volatile uint32_t leds_timer=0;
	static volatile uint8_t counter1, counter2=0;
	PT_BEGIN(pt);
	PT_WAIT_UNTIL(pt,(st_millis()-leds_timer)>=100);//запуск протопотока каждые 0.1мсек
 2d0:	90 93 74 00 	sts	0x0074, r25
 2d4:	80 93 73 00 	sts	0x0073, r24
//Фукция выдачи текущего системного времени
uint32_t st_millis(void)
{
	uint32_t m;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 2d8:	7f b6       	in	r7, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2da:	f8 94       	cli
	{
		m = st_timer0_millis;
 2dc:	c0 90 6f 00 	lds	r12, 0x006F
 2e0:	d0 90 70 00 	lds	r13, 0x0070
 2e4:	e0 90 71 00 	lds	r14, 0x0071
 2e8:	f0 90 72 00 	lds	r15, 0x0072
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2ec:	7f be       	out	0x3f, r7	; 63
PT_THREAD(Leds(struct pt *pt))
{
	static volatile uint32_t leds_timer=0;
	static volatile uint8_t counter1, counter2=0;
	PT_BEGIN(pt);
	PT_WAIT_UNTIL(pt,(st_millis()-leds_timer)>=100);//запуск протопотока каждые 0.1мсек
 2ee:	40 90 62 00 	lds	r4, 0x0062
 2f2:	50 90 63 00 	lds	r5, 0x0063
 2f6:	60 90 64 00 	lds	r6, 0x0064
 2fa:	70 90 65 00 	lds	r7, 0x0065
 2fe:	c4 18       	sub	r12, r4
 300:	d5 08       	sbc	r13, r5
 302:	e6 08       	sbc	r14, r6
 304:	f7 08       	sbc	r15, r7
 306:	64 e6       	ldi	r22, 0x64	; 100
 308:	c6 16       	cp	r12, r22
 30a:	d1 04       	cpc	r13, r1
 30c:	e1 04       	cpc	r14, r1
 30e:	f1 04       	cpc	r15, r1
 310:	08 f4       	brcc	.+2      	; 0x314 <__stack+0x235>
 312:	4c cf       	rjmp	.-360    	; 0x1ac <__stack+0xcd>
//Фукция выдачи текущего системного времени
uint32_t st_millis(void)
{
	uint32_t m;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 314:	7f b6       	in	r7, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 316:	f8 94       	cli
	{
		m = st_timer0_millis;
 318:	c0 90 6f 00 	lds	r12, 0x006F
 31c:	d0 90 70 00 	lds	r13, 0x0070
 320:	e0 90 71 00 	lds	r14, 0x0071
 324:	f0 90 72 00 	lds	r15, 0x0072
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 328:	7f be       	out	0x3f, r7	; 63
{
	static volatile uint32_t leds_timer=0;
	static volatile uint8_t counter1, counter2=0;
	PT_BEGIN(pt);
	PT_WAIT_UNTIL(pt,(st_millis()-leds_timer)>=100);//запуск протопотока каждые 0.1мсек
	leds_timer=st_millis();
 32a:	c0 92 62 00 	sts	0x0062, r12
 32e:	d0 92 63 00 	sts	0x0063, r13
 332:	e0 92 64 00 	sts	0x0064, r14
 336:	f0 92 65 00 	sts	0x0065, r15
	if (p_generator->regime==GEN_PERIODIC)
 33a:	60 91 7a 00 	lds	r22, 0x007A
 33e:	61 30       	cpi	r22, 0x01	; 1
 340:	09 f4       	brne	.+2      	; 0x344 <__stack+0x265>
 342:	50 c0       	rjmp	.+160    	; 0x3e4 <__stack+0x305>
				LED1_OFF;
				break;
			}
		}
	}
	else if (p_generator->regime==GEN_UART) //моргаем обоими светодиодами
 344:	62 30       	cpi	r22, 0x02	; 2
 346:	19 f0       	breq	.+6      	; 0x34e <__stack+0x26f>
			LED1_ON;
		}
	}
	else
	{
		LED0_OFF;
 348:	93 98       	cbi	0x12, 3	; 18
		LED1_OFF;	
 34a:	94 98       	cbi	0x12, 4	; 18
 34c:	2b cf       	rjmp	.-426    	; 0x1a4 <__stack+0xc5>
			}
		}
	}
	else if (p_generator->regime==GEN_UART) //моргаем обоими светодиодами
	{
		if ((LED0_PORT_PIN&(_BV(LED0)))==0)
 34e:	83 9b       	sbis	0x10, 3	; 16
 350:	fb cf       	rjmp	.-10     	; 0x348 <__stack+0x269>
			LED0_OFF;
			LED1_OFF;
		}
		else 
		{
			LED0_ON;
 352:	93 9a       	sbi	0x12, 3	; 18
			LED1_ON;
 354:	94 9a       	sbi	0x12, 4	; 18
 356:	26 cf       	rjmp	.-436    	; 0x1a4 <__stack+0xc5>
	{
		delay--;
	}
	else 
	{
		if (!(BUT1_PORT_PIN&(_BV(BUT1))))//((BUT1_PORT_PIN&(_BV(BUT1)))==0)
 358:	85 99       	sbic	0x10, 5	; 16
 35a:	13 c0       	rjmp	.+38     	; 0x382 <__stack+0x2a3>
		{
			if (p_generator->regime==GEN_MANUAL)
 35c:	70 91 7a 00 	lds	r23, 0x007A
 360:	71 11       	cpse	r23, r1
 362:	91 c0       	rjmp	.+290    	; 0x486 <__stack+0x3a7>
			{
				p_generator->regime=GEN_PERIODIC;
 364:	90 92 7a 00 	sts	0x007A, r9
				p_generator->period=PERIOD_HZ1;
 368:	10 92 7c 00 	sts	0x007C, r1
			}
			else if ((p_generator->regime==GEN_PERIODIC)&&(p_generator->period==PERIOD_HZ1000))
			{
				p_generator->regime=GEN_MANUAL;
			}
			p_generator->state=GEN_OFF;
 36c:	10 92 79 00 	sts	0x0079, r1
			GENERATOR_OFF;
 370:	69 b7       	in	r22, 0x39	; 57
 372:	6f 7b       	andi	r22, 0xBF	; 191
 374:	69 bf       	out	0x39, r22	; 57
			DISCONECT_TIMER_FROM_PIN;
 376:	6f b5       	in	r22, 0x2f	; 47
 378:	6f 77       	andi	r22, 0x7F	; 127
 37a:	6f bd       	out	0x2f, r22	; 47
			OUT_OFF;
 37c:	c3 98       	cbi	0x18, 3	; 24
			delay=BUTTON_DELAY_200MSEC;
 37e:	b0 92 6a 00 	sts	0x006A, r11
		}
		if (!(BUT0_PORT_PIN&(_BV(BUT0))))
 382:	86 99       	sbic	0x10, 6	; 16
 384:	ec ce       	rjmp	.-552    	; 0x15e <__stack+0x7f>
		{
			if ((p_generator->regime==GEN_MANUAL))
 386:	70 91 7a 00 	lds	r23, 0x007A
 38a:	71 11       	cpse	r23, r1
 38c:	86 c0       	rjmp	.+268    	; 0x49a <__stack+0x3bb>
			{
				p_generator->state=GEN_ONESHOT;
 38e:	a0 92 79 00 	sts	0x0079, r10
				{
					p_generator->duration=DURATION_US320;
				}
				p_generator->state=GEN_OFF;
			}
			GENERATOR_OFF;
 392:	69 b7       	in	r22, 0x39	; 57
 394:	6f 7b       	andi	r22, 0xBF	; 191
 396:	69 bf       	out	0x39, r22	; 57
			DISCONECT_TIMER_FROM_PIN;
 398:	6f b5       	in	r22, 0x2f	; 47
 39a:	6f 77       	andi	r22, 0x7F	; 127
 39c:	6f bd       	out	0x2f, r22	; 47
			OUT_OFF;
 39e:	c3 98       	cbi	0x18, 3	; 24
			delay=BUTTON_DELAY_200MSEC;
 3a0:	b0 92 6a 00 	sts	0x006A, r11
 3a4:	dc ce       	rjmp	.-584    	; 0x15e <__stack+0x7f>
	}
	else if (p_generator->regime==GEN_UART)
	{
		//тут что-то будет :) можно прямо здесь написать работу от уарта, а можно в отдельно протопотоке
	}
	else if ((p_generator->regime==GEN_MANUAL)&&(p_generator->state==GEN_ONESHOT))
 3a6:	e0 90 7a 00 	lds	r14, 0x007A
 3aa:	e1 10       	cpse	r14, r1
 3ac:	e9 ce       	rjmp	.-558    	; 0x180 <__stack+0xa1>
 3ae:	62 30       	cpi	r22, 0x02	; 2
 3b0:	09 f0       	breq	.+2      	; 0x3b4 <__stack+0x2d5>
 3b2:	e6 ce       	rjmp	.-564    	; 0x180 <__stack+0xa1>
	{
		CLEAR_TCCR1B;
 3b4:	6e b5       	in	r22, 0x2e	; 46
 3b6:	68 7f       	andi	r22, 0xF8	; 248
 3b8:	6e bd       	out	0x2e, r22	; 46
		TCCR1B|=PRESCALER_1_MASK;
 3ba:	6e b5       	in	r22, 0x2e	; 46
 3bc:	61 60       	ori	r22, 0x01	; 1
 3be:	6e bd       	out	0x2e, r22	; 46
		DISCONECT_TIMER_FROM_PIN;
 3c0:	6f b5       	in	r22, 0x2f	; 47
 3c2:	6f 77       	andi	r22, 0x7F	; 127
 3c4:	6f bd       	out	0x2f, r22	; 47
		TCNT1=0;
 3c6:	1d bc       	out	0x2d, r1	; 45
 3c8:	1c bc       	out	0x2c, r1	; 44
		ICR1=60000;
 3ca:	15 bd       	out	0x25, r17	; 37
 3cc:	04 bd       	out	0x24, r16	; 36
		OCR1=2500;
 3ce:	db bd       	out	0x2b, r29	; 43
 3d0:	ca bd       	out	0x2a, r28	; 42
		CONNECT_TIMER_TO_PIN;
 3d2:	6f b5       	in	r22, 0x2f	; 47
 3d4:	60 68       	ori	r22, 0x80	; 128
 3d6:	6f bd       	out	0x2f, r22	; 47
		GENERATOR_ON;
 3d8:	69 b7       	in	r22, 0x39	; 57
 3da:	60 64       	ori	r22, 0x40	; 64
 3dc:	69 bf       	out	0x39, r22	; 57
		LED0_ON;
 3de:	93 9a       	sbi	0x12, 3	; 18
		LED1_ON;
 3e0:	94 9a       	sbi	0x12, 4	; 18
 3e2:	ce ce       	rjmp	.-612    	; 0x180 <__stack+0xa1>
	PT_BEGIN(pt);
	PT_WAIT_UNTIL(pt,(st_millis()-leds_timer)>=100);//запуск протопотока каждые 0.1мсек
	leds_timer=st_millis();
	if (p_generator->regime==GEN_PERIODIC)
	{
		switch(p_generator->period)
 3e4:	60 91 7c 00 	lds	r22, 0x007C
 3e8:	61 30       	cpi	r22, 0x01	; 1
 3ea:	09 f4       	brne	.+2      	; 0x3ee <__stack+0x30f>
 3ec:	70 c0       	rjmp	.+224    	; 0x4ce <__stack+0x3ef>
 3ee:	08 f4       	brcc	.+2      	; 0x3f2 <__stack+0x313>
 3f0:	60 c0       	rjmp	.+192    	; 0x4b2 <__stack+0x3d3>
 3f2:	62 30       	cpi	r22, 0x02	; 2
 3f4:	09 f0       	breq	.+2      	; 0x3f8 <__stack+0x319>
 3f6:	d6 ce       	rjmp	.-596    	; 0x1a4 <__stack+0xc5>
				LED1_OFF;
				break;
			}
			case PERIOD_HZ1000: //LED0 горит непрерывно
			{
				LED0_ON;
 3f8:	93 9a       	sbi	0x12, 3	; 18
				LED1_OFF;
 3fa:	94 98       	cbi	0x12, 4	; 18
 3fc:	d3 ce       	rjmp	.-602    	; 0x1a4 <__stack+0xc5>
	switch_timer=st_millis();
	if (p_generator->state==GEN_OFF)
	{
		if(p_generator->regime==GEN_PERIODIC)
		{
			CLEAR_TCCR1B;
 3fe:	6e b5       	in	r22, 0x2e	; 46
 400:	68 7f       	andi	r22, 0xF8	; 248
 402:	6e bd       	out	0x2e, r22	; 46
			//DISCONECT_TIMER_FROM_PIN;
			//OUT_OFF;
			if (p_generator->period==PERIOD_HZ1000)
 404:	60 91 7c 00 	lds	r22, 0x007C
			{
				TCCR1B|=PRESCALER_1_MASK;
 408:	7e b5       	in	r23, 0x2e	; 46
		if(p_generator->regime==GEN_PERIODIC)
		{
			CLEAR_TCCR1B;
			//DISCONECT_TIMER_FROM_PIN;
			//OUT_OFF;
			if (p_generator->period==PERIOD_HZ1000)
 40a:	62 30       	cpi	r22, 0x02	; 2
 40c:	09 f4       	brne	.+2      	; 0x410 <__stack+0x331>
 40e:	84 c0       	rjmp	.+264    	; 0x518 <__stack+0x439>
			{
				TCCR1B|=PRESCALER_1_MASK;
				ICR1=PERIOD_HZ1000_TICKS;
			}
			else if (p_generator->period==PERIOD_HZ100)
 410:	61 30       	cpi	r22, 0x01	; 1
 412:	09 f4       	brne	.+2      	; 0x416 <__stack+0x337>
 414:	ad c0       	rjmp	.+346    	; 0x570 <__stack+0x491>
				TCCR1B|=PRESCALER_8_MASK;
				ICR1=PERIOD_HZ100_TICKS;
			}
			else
			{
				TCCR1B|=PRESCALER_256_MASK;
 416:	74 60       	ori	r23, 0x04	; 4
 418:	7e bd       	out	0x2e, r23	; 46
				ICR1=PERIOD_HZ1_TICKS;
 41a:	b5 bd       	out	0x25, r27	; 37
 41c:	a4 bd       	out	0x24, r26	; 36
			}
			if (p_generator->duration==DURATION_90)
 41e:	70 91 7b 00 	lds	r23, 0x007B
 422:	72 30       	cpi	r23, 0x02	; 2
 424:	09 f4       	brne	.+2      	; 0x428 <__stack+0x349>
 426:	58 c0       	rjmp	.+176    	; 0x4d8 <__stack+0x3f9>
			{
				OCR1=(uint16_t)((7*(uint32_t)ICR1)>>3);
			}
			else if (p_generator->duration==DURATION_50)
 428:	71 30       	cpi	r23, 0x01	; 1
 42a:	09 f4       	brne	.+2      	; 0x42e <__stack+0x34f>
 42c:	9a c0       	rjmp	.+308    	; 0x562 <__stack+0x483>
			{
				OCR1=(uint16_t)((uint32_t)ICR1>>1);
			}
			else
			{
				if (p_generator->period==PERIOD_HZ1000)
 42e:	62 30       	cpi	r22, 0x02	; 2
 430:	09 f4       	brne	.+2      	; 0x434 <__stack+0x355>
 432:	a3 c0       	rjmp	.+326    	; 0x57a <__stack+0x49b>
				{
					OCR1=(uint16_t)(5*(uint32_t)ICR1>>4);
				}
				else if (p_generator->period==PERIOD_HZ100)
 434:	61 30       	cpi	r22, 0x01	; 1
 436:	09 f4       	brne	.+2      	; 0x43a <__stack+0x35b>
 438:	bc c0       	rjmp	.+376    	; 0x5b2 <__stack+0x4d3>
				{
					OCR1=(uint16_t)((uint32_t)ICR1>>5);
				}
				else
				{
					OCR1=(uint16_t)(5*(uint32_t)ICR1>>14);
 43a:	c4 b4       	in	r12, 0x24	; 36
 43c:	d5 b4       	in	r13, 0x25	; 37
 43e:	e1 2c       	mov	r14, r1
 440:	f1 2c       	mov	r15, r1
 442:	26 01       	movw	r4, r12
 444:	37 01       	movw	r6, r14
 446:	44 0c       	add	r4, r4
 448:	55 1c       	adc	r5, r5
 44a:	66 1c       	adc	r6, r6
 44c:	77 1c       	adc	r7, r7
 44e:	44 0c       	add	r4, r4
 450:	55 1c       	adc	r5, r5
 452:	66 1c       	adc	r6, r6
 454:	77 1c       	adc	r7, r7
 456:	c4 0c       	add	r12, r4
 458:	d5 1c       	adc	r13, r5
 45a:	e6 1c       	adc	r14, r6
 45c:	f7 1c       	adc	r15, r7
 45e:	7e e0       	ldi	r23, 0x0E	; 14
 460:	f6 94       	lsr	r15
 462:	e7 94       	ror	r14
 464:	d7 94       	ror	r13
 466:	c7 94       	ror	r12
 468:	7a 95       	dec	r23
 46a:	d1 f7       	brne	.-12     	; 0x460 <__stack+0x381>
 46c:	db bc       	out	0x2b, r13	; 43
 46e:	ca bc       	out	0x2a, r12	; 42
				}
			}
			p_generator->state=GEN_ON;
 470:	90 92 79 00 	sts	0x0079, r9
			CONNECT_TIMER_TO_PIN;//подключаем таймер к пину
 474:	6f b5       	in	r22, 0x2f	; 47
 476:	60 68       	ori	r22, 0x80	; 128
 478:	6f bd       	out	0x2f, r22	; 47
			GENERATOR_ON;
 47a:	69 b7       	in	r22, 0x39	; 57
 47c:	60 64       	ori	r22, 0x40	; 64
 47e:	69 bf       	out	0x39, r22	; 57
 480:	60 91 7a 00 	lds	r22, 0x007A
 484:	19 cf       	rjmp	.-462    	; 0x2b8 <__stack+0x1d9>
			if (p_generator->regime==GEN_MANUAL)
			{
				p_generator->regime=GEN_PERIODIC;
				p_generator->period=PERIOD_HZ1;
			}
			else if ((p_generator->regime==GEN_PERIODIC)&&(p_generator->period==PERIOD_HZ1))
 486:	71 30       	cpi	r23, 0x01	; 1
 488:	09 f0       	breq	.+2      	; 0x48c <__stack+0x3ad>
 48a:	70 cf       	rjmp	.-288    	; 0x36c <__stack+0x28d>
 48c:	60 91 7c 00 	lds	r22, 0x007C
 490:	61 11       	cpse	r22, r1
 492:	5f c0       	rjmp	.+190    	; 0x552 <__stack+0x473>
			{
				p_generator->period=PERIOD_HZ100;
 494:	70 93 7c 00 	sts	0x007C, r23
 498:	69 cf       	rjmp	.-302    	; 0x36c <__stack+0x28d>
		{
			if ((p_generator->regime==GEN_MANUAL))
			{
				p_generator->state=GEN_ONESHOT;
			}
			else if ((p_generator->regime==GEN_PERIODIC))
 49a:	71 30       	cpi	r23, 0x01	; 1
 49c:	09 f0       	breq	.+2      	; 0x4a0 <__stack+0x3c1>
 49e:	79 cf       	rjmp	.-270    	; 0x392 <__stack+0x2b3>
			{
				if (p_generator->duration==DURATION_US320)
 4a0:	60 91 7b 00 	lds	r22, 0x007B
 4a4:	61 11       	cpse	r22, r1
 4a6:	96 c0       	rjmp	.+300    	; 0x5d4 <__stack+0x4f5>
				{
					p_generator->duration=DURATION_50;
 4a8:	70 93 7b 00 	sts	0x007B, r23
				}
				else
				{
					p_generator->duration=DURATION_US320;
				}
				p_generator->state=GEN_OFF;
 4ac:	10 92 79 00 	sts	0x0079, r1
 4b0:	70 cf       	rjmp	.-288    	; 0x392 <__stack+0x2b3>
	{
		switch(p_generator->period)
		{
			case PERIOD_HZ1:
			{
				if (counter1<10) //моргает LED0 раз в секунду
 4b2:	60 91 61 00 	lds	r22, 0x0061
 4b6:	6a 30       	cpi	r22, 0x0A	; 10
 4b8:	c0 f5       	brcc	.+112    	; 0x52a <__stack+0x44b>
				{
					LED0_ON;
 4ba:	93 9a       	sbi	0x12, 3	; 18
					counter1++;
 4bc:	f0 90 61 00 	lds	r15, 0x0061
 4c0:	f3 94       	inc	r15
 4c2:	f0 92 61 00 	sts	0x0061, r15
					counter2=0;
 4c6:	10 92 60 00 	sts	0x0060, r1
		}
	}
	else
	{
		LED0_OFF;
		LED1_OFF;	
 4ca:	94 98       	cbi	0x12, 4	; 18
 4cc:	6b ce       	rjmp	.-810    	; 0x1a4 <__stack+0xc5>
				LED1_OFF;
				break;
			}
			case PERIOD_HZ100: //моргает LED0 - 10 ращ в секунду
			{
				if (((LED0_PORT_PIN&(_BV(LED0)))==0))
 4ce:	83 99       	sbic	0x10, 3	; 16
 4d0:	3b cf       	rjmp	.-394    	; 0x348 <__stack+0x269>
				{
					LED0_ON;
 4d2:	93 9a       	sbi	0x12, 3	; 18
		}
	}
	else
	{
		LED0_OFF;
		LED1_OFF;	
 4d4:	94 98       	cbi	0x12, 4	; 18
 4d6:	66 ce       	rjmp	.-820    	; 0x1a4 <__stack+0xc5>
				TCCR1B|=PRESCALER_256_MASK;
				ICR1=PERIOD_HZ1_TICKS;
			}
			if (p_generator->duration==DURATION_90)
			{
				OCR1=(uint16_t)((7*(uint32_t)ICR1)>>3);
 4d8:	44 b4       	in	r4, 0x24	; 36
 4da:	55 b4       	in	r5, 0x25	; 37
 4dc:	61 2c       	mov	r6, r1
 4de:	71 2c       	mov	r7, r1
 4e0:	73 01       	movw	r14, r6
 4e2:	62 01       	movw	r12, r4
 4e4:	cc 0c       	add	r12, r12
 4e6:	dd 1c       	adc	r13, r13
 4e8:	ee 1c       	adc	r14, r14
 4ea:	ff 1c       	adc	r15, r15
 4ec:	cc 0c       	add	r12, r12
 4ee:	dd 1c       	adc	r13, r13
 4f0:	ee 1c       	adc	r14, r14
 4f2:	ff 1c       	adc	r15, r15
 4f4:	cc 0c       	add	r12, r12
 4f6:	dd 1c       	adc	r13, r13
 4f8:	ee 1c       	adc	r14, r14
 4fa:	ff 1c       	adc	r15, r15
 4fc:	c4 18       	sub	r12, r4
 4fe:	d5 08       	sbc	r13, r5
 500:	e6 08       	sbc	r14, r6
 502:	f7 08       	sbc	r15, r7
 504:	63 e0       	ldi	r22, 0x03	; 3
 506:	f6 94       	lsr	r15
 508:	e7 94       	ror	r14
 50a:	d7 94       	ror	r13
 50c:	c7 94       	ror	r12
 50e:	6a 95       	dec	r22
 510:	d1 f7       	brne	.-12     	; 0x506 <__stack+0x427>
 512:	db bc       	out	0x2b, r13	; 43
 514:	ca bc       	out	0x2a, r12	; 42
 516:	ac cf       	rjmp	.-168    	; 0x470 <__stack+0x391>
			CLEAR_TCCR1B;
			//DISCONECT_TIMER_FROM_PIN;
			//OUT_OFF;
			if (p_generator->period==PERIOD_HZ1000)
			{
				TCCR1B|=PRESCALER_1_MASK;
 518:	71 60       	ori	r23, 0x01	; 1
 51a:	7e bd       	out	0x2e, r23	; 46
				ICR1=PERIOD_HZ1000_TICKS;
 51c:	70 e4       	ldi	r23, 0x40	; 64
 51e:	e7 2e       	mov	r14, r23
 520:	7f e1       	ldi	r23, 0x1F	; 31
 522:	f7 2e       	mov	r15, r23
 524:	f5 bc       	out	0x25, r15	; 37
 526:	e4 bc       	out	0x24, r14	; 36
 528:	7a cf       	rjmp	.-268    	; 0x41e <__stack+0x33f>
				{
					LED0_ON;
					counter1++;
					counter2=0;
				}
				else if (counter2<10)
 52a:	60 91 60 00 	lds	r22, 0x0060
 52e:	6a 30       	cpi	r22, 0x0A	; 10
 530:	08 f0       	brcs	.+2      	; 0x534 <__stack+0x455>
 532:	0b cf       	rjmp	.-490    	; 0x34a <__stack+0x26b>
				{
					LED0_OFF;
 534:	93 98       	cbi	0x12, 3	; 18
					counter2++;
 536:	f0 90 60 00 	lds	r15, 0x0060
 53a:	f3 94       	inc	r15
 53c:	f0 92 60 00 	sts	0x0060, r15
					if (counter2>=9)
 540:	60 91 60 00 	lds	r22, 0x0060
 544:	69 30       	cpi	r22, 0x09	; 9
 546:	08 f4       	brcc	.+2      	; 0x54a <__stack+0x46b>
 548:	00 cf       	rjmp	.-512    	; 0x34a <__stack+0x26b>
					{
						counter1=0;
 54a:	10 92 61 00 	sts	0x0061, r1
		}
	}
	else
	{
		LED0_OFF;
		LED1_OFF;	
 54e:	94 98       	cbi	0x12, 4	; 18
 550:	29 ce       	rjmp	.-942    	; 0x1a4 <__stack+0xc5>
			}
			else if ((p_generator->regime==GEN_PERIODIC)&&(p_generator->period==PERIOD_HZ1))
			{
				p_generator->period=PERIOD_HZ100;
			}
			else if ((p_generator->regime==GEN_PERIODIC)&&(p_generator->period==PERIOD_HZ100))
 552:	61 30       	cpi	r22, 0x01	; 1
 554:	e1 f1       	breq	.+120    	; 0x5ce <__stack+0x4ef>
			{
				p_generator->period=PERIOD_HZ1000;
			}
			else if ((p_generator->regime==GEN_PERIODIC)&&(p_generator->period==PERIOD_HZ1000))
 556:	62 30       	cpi	r22, 0x02	; 2
 558:	09 f0       	breq	.+2      	; 0x55c <__stack+0x47d>
 55a:	08 cf       	rjmp	.-496    	; 0x36c <__stack+0x28d>
			{
				p_generator->regime=GEN_MANUAL;
 55c:	10 92 7a 00 	sts	0x007A, r1
 560:	05 cf       	rjmp	.-502    	; 0x36c <__stack+0x28d>
			{
				OCR1=(uint16_t)((7*(uint32_t)ICR1)>>3);
			}
			else if (p_generator->duration==DURATION_50)
			{
				OCR1=(uint16_t)((uint32_t)ICR1>>1);
 562:	e4 b4       	in	r14, 0x24	; 36
 564:	f5 b4       	in	r15, 0x25	; 37
 566:	f6 94       	lsr	r15
 568:	e7 94       	ror	r14
 56a:	fb bc       	out	0x2b, r15	; 43
 56c:	ea bc       	out	0x2a, r14	; 42
 56e:	80 cf       	rjmp	.-256    	; 0x470 <__stack+0x391>
				TCCR1B|=PRESCALER_1_MASK;
				ICR1=PERIOD_HZ1000_TICKS;
			}
			else if (p_generator->period==PERIOD_HZ100)
			{
				TCCR1B|=PRESCALER_8_MASK;
 570:	72 60       	ori	r23, 0x02	; 2
 572:	7e bd       	out	0x2e, r23	; 46
				ICR1=PERIOD_HZ100_TICKS;
 574:	f5 bd       	out	0x25, r31	; 37
 576:	e4 bd       	out	0x24, r30	; 36
 578:	52 cf       	rjmp	.-348    	; 0x41e <__stack+0x33f>
			}
			else
			{
				if (p_generator->period==PERIOD_HZ1000)
				{
					OCR1=(uint16_t)(5*(uint32_t)ICR1>>4);
 57a:	c4 b4       	in	r12, 0x24	; 36
 57c:	d5 b4       	in	r13, 0x25	; 37
 57e:	e1 2c       	mov	r14, r1
 580:	f1 2c       	mov	r15, r1
 582:	26 01       	movw	r4, r12
 584:	37 01       	movw	r6, r14
 586:	44 0c       	add	r4, r4
 588:	55 1c       	adc	r5, r5
 58a:	66 1c       	adc	r6, r6
 58c:	77 1c       	adc	r7, r7
 58e:	44 0c       	add	r4, r4
 590:	55 1c       	adc	r5, r5
 592:	66 1c       	adc	r6, r6
 594:	77 1c       	adc	r7, r7
 596:	c4 0c       	add	r12, r4
 598:	d5 1c       	adc	r13, r5
 59a:	e6 1c       	adc	r14, r6
 59c:	f7 1c       	adc	r15, r7
 59e:	64 e0       	ldi	r22, 0x04	; 4
 5a0:	f6 94       	lsr	r15
 5a2:	e7 94       	ror	r14
 5a4:	d7 94       	ror	r13
 5a6:	c7 94       	ror	r12
 5a8:	6a 95       	dec	r22
 5aa:	d1 f7       	brne	.-12     	; 0x5a0 <__stack+0x4c1>
 5ac:	db bc       	out	0x2b, r13	; 43
 5ae:	ca bc       	out	0x2a, r12	; 42
 5b0:	5f cf       	rjmp	.-322    	; 0x470 <__stack+0x391>
				}
				else if (p_generator->period==PERIOD_HZ100)
				{
					OCR1=(uint16_t)((uint32_t)ICR1>>5);
 5b2:	e4 b4       	in	r14, 0x24	; 36
 5b4:	f5 b4       	in	r15, 0x25	; 37
 5b6:	f6 94       	lsr	r15
 5b8:	e7 94       	ror	r14
 5ba:	f2 94       	swap	r15
 5bc:	e2 94       	swap	r14
 5be:	6f e0       	ldi	r22, 0x0F	; 15
 5c0:	e6 22       	and	r14, r22
 5c2:	ef 24       	eor	r14, r15
 5c4:	f6 22       	and	r15, r22
 5c6:	ef 24       	eor	r14, r15
 5c8:	fb bc       	out	0x2b, r15	; 43
 5ca:	ea bc       	out	0x2a, r14	; 42
 5cc:	51 cf       	rjmp	.-350    	; 0x470 <__stack+0x391>
			{
				p_generator->period=PERIOD_HZ100;
			}
			else if ((p_generator->regime==GEN_PERIODIC)&&(p_generator->period==PERIOD_HZ100))
			{
				p_generator->period=PERIOD_HZ1000;
 5ce:	a0 92 7c 00 	sts	0x007C, r10
 5d2:	cc ce       	rjmp	.-616    	; 0x36c <__stack+0x28d>
			{
				if (p_generator->duration==DURATION_US320)
				{
					p_generator->duration=DURATION_50;
				}
				else if (p_generator->duration==DURATION_50)
 5d4:	61 30       	cpi	r22, 0x01	; 1
 5d6:	19 f0       	breq	.+6      	; 0x5de <__stack+0x4ff>
				{
					p_generator->duration=DURATION_90;
				}
				else
				{
					p_generator->duration=DURATION_US320;
 5d8:	10 92 7b 00 	sts	0x007B, r1
 5dc:	67 cf       	rjmp	.-306    	; 0x4ac <__stack+0x3cd>
				{
					p_generator->duration=DURATION_50;
				}
				else if (p_generator->duration==DURATION_50)
				{
					p_generator->duration=DURATION_90;
 5de:	a0 92 7b 00 	sts	0x007B, r10
 5e2:	64 cf       	rjmp	.-312    	; 0x4ac <__stack+0x3cd>

000005e4 <USART_Init>:
static volatile unsigned char rxCount = 0;

//������������� usart`a
void USART_Init(void)
{
  UBRRH = UBRRH_VALUE;
 5e4:	12 b8       	out	0x02, r1	; 2
  UBRRL = UBRRL_VALUE;
 5e6:	83 e3       	ldi	r24, 0x33	; 51
 5e8:	89 b9       	out	0x09, r24	; 9
  #if USE_2X
   UCSRA |= (1 << U2X);
  #else
   UCSRA &= (~(1 << U2X));
 5ea:	59 98       	cbi	0x0b, 1	; 11
  #endif
  UCSRB = (1<<RXCIE)|(1<<TXCIE)|(1<<RXEN)|(1<<TXEN); //����. ������ ��� ������ � ��������, ���� ������, ���� ��������.
 5ec:	88 ed       	ldi	r24, 0xD8	; 216
 5ee:	8a b9       	out	0x0a, r24	; 10
  UCSRC = (1<<UMSEL)|(1<<UCSZ1)|(1<<UCSZ0); //������ ����� 8 ��������
 5f0:	86 e4       	ldi	r24, 0x46	; 70
 5f2:	83 b9       	out	0x03, r24	; 3
 5f4:	08 95       	ret

000005f6 <__vector_9>:
  }
}

//���������� ���������� �� ���������� �������� 
ISR(USART_TX_vect)
{
 5f6:	1f 92       	push	r1
 5f8:	0f 92       	push	r0
 5fa:	0f b6       	in	r0, 0x3f	; 63
 5fc:	0f 92       	push	r0
 5fe:	11 24       	eor	r1, r1
 600:	8f 93       	push	r24
 602:	ef 93       	push	r30
 604:	ff 93       	push	r31
  if (txCount > 0){              //���� ����� �� ������
 606:	80 91 81 00 	lds	r24, 0x0081
 60a:	88 23       	and	r24, r24
 60c:	99 f0       	breq	.+38     	; 0x634 <__vector_9+0x3e>
    UDR = usartTxBuf[txBufHead]; //���������� � UDR ������ �� ������
 60e:	e0 91 82 00 	lds	r30, 0x0082
 612:	f0 e0       	ldi	r31, 0x00	; 0
 614:	ed 57       	subi	r30, 0x7D	; 125
 616:	ff 4f       	sbci	r31, 0xFF	; 255
 618:	80 81       	ld	r24, Z
 61a:	8c b9       	out	0x0c, r24	; 12
    txCount--;                   //��������� ������� ��������
 61c:	80 91 81 00 	lds	r24, 0x0081
 620:	81 50       	subi	r24, 0x01	; 1
 622:	80 93 81 00 	sts	0x0081, r24
    txBufHead++;                 //�������������� ������ ������ ������
 626:	80 91 82 00 	lds	r24, 0x0082
 62a:	8f 5f       	subi	r24, 0xFF	; 255
    if (txBufHead == SIZE_BUF) txBufHead = 0;
 62c:	82 30       	cpi	r24, 0x02	; 2
 62e:	51 f0       	breq	.+20     	; 0x644 <__vector_9+0x4e>
ISR(USART_TX_vect)
{
  if (txCount > 0){              //���� ����� �� ������
    UDR = usartTxBuf[txBufHead]; //���������� � UDR ������ �� ������
    txCount--;                   //��������� ������� ��������
    txBufHead++;                 //�������������� ������ ������ ������
 630:	80 93 82 00 	sts	0x0082, r24
    if (txBufHead == SIZE_BUF) txBufHead = 0;
  } 
} 
 634:	ff 91       	pop	r31
 636:	ef 91       	pop	r30
 638:	8f 91       	pop	r24
 63a:	0f 90       	pop	r0
 63c:	0f be       	out	0x3f, r0	; 63
 63e:	0f 90       	pop	r0
 640:	1f 90       	pop	r1
 642:	18 95       	reti
{
  if (txCount > 0){              //���� ����� �� ������
    UDR = usartTxBuf[txBufHead]; //���������� � UDR ������ �� ������
    txCount--;                   //��������� ������� ��������
    txBufHead++;                 //�������������� ������ ������ ������
    if (txBufHead == SIZE_BUF) txBufHead = 0;
 644:	10 92 82 00 	sts	0x0082, r1
  } 
} 
 648:	ff 91       	pop	r31
 64a:	ef 91       	pop	r30
 64c:	8f 91       	pop	r24
 64e:	0f 90       	pop	r0
 650:	0f be       	out	0x3f, r0	; 63
 652:	0f 90       	pop	r0
 654:	1f 90       	pop	r1
 656:	18 95       	reti

00000658 <__vector_7>:
}


//���������� �� ���������� ������
ISR(USART_RX_vect) 
{
 658:	1f 92       	push	r1
 65a:	0f 92       	push	r0
 65c:	0f b6       	in	r0, 0x3f	; 63
 65e:	0f 92       	push	r0
 660:	11 24       	eor	r1, r1
 662:	8f 93       	push	r24
 664:	9f 93       	push	r25
 666:	ef 93       	push	r30
 668:	ff 93       	push	r31
  if (rxCount < SIZE_BUF){                //���� � ������ ��� ���� �����                     
 66a:	80 91 7d 00 	lds	r24, 0x007D
 66e:	82 30       	cpi	r24, 0x02	; 2
 670:	48 f0       	brcs	.+18     	; 0x684 <__vector_7+0x2c>
      usartRxBuf[rxBufTail] = UDR;        //������� ������ �� UDR � �����
      rxBufTail++;                             //��������� ������ ������ ��������� ������ 
      if (rxBufTail == SIZE_BUF) rxBufTail = 0;  
      rxCount++;                                 //��������� ������� �������� ��������
    }
} 
 672:	ff 91       	pop	r31
 674:	ef 91       	pop	r30
 676:	9f 91       	pop	r25
 678:	8f 91       	pop	r24
 67a:	0f 90       	pop	r0
 67c:	0f be       	out	0x3f, r0	; 63
 67e:	0f 90       	pop	r0
 680:	1f 90       	pop	r1
 682:	18 95       	reti

//���������� �� ���������� ������
ISR(USART_RX_vect) 
{
  if (rxCount < SIZE_BUF){                //���� � ������ ��� ���� �����                     
      usartRxBuf[rxBufTail] = UDR;        //������� ������ �� UDR � �����
 684:	80 91 7e 00 	lds	r24, 0x007E
 688:	e8 2f       	mov	r30, r24
 68a:	f0 e0       	ldi	r31, 0x00	; 0
 68c:	9c b1       	in	r25, 0x0c	; 12
 68e:	e1 58       	subi	r30, 0x81	; 129
 690:	ff 4f       	sbci	r31, 0xFF	; 255
 692:	90 83       	st	Z, r25
      rxBufTail++;                             //��������� ������ ������ ��������� ������ 
 694:	8f 5f       	subi	r24, 0xFF	; 255
      if (rxBufTail == SIZE_BUF) rxBufTail = 0;  
 696:	82 30       	cpi	r24, 0x02	; 2
 698:	41 f0       	breq	.+16     	; 0x6aa <__vector_7+0x52>
//���������� �� ���������� ������
ISR(USART_RX_vect) 
{
  if (rxCount < SIZE_BUF){                //���� � ������ ��� ���� �����                     
      usartRxBuf[rxBufTail] = UDR;        //������� ������ �� UDR � �����
      rxBufTail++;                             //��������� ������ ������ ��������� ������ 
 69a:	80 93 7e 00 	sts	0x007E, r24
      if (rxBufTail == SIZE_BUF) rxBufTail = 0;  
      rxCount++;                                 //��������� ������� �������� ��������
 69e:	80 91 7d 00 	lds	r24, 0x007D
 6a2:	8f 5f       	subi	r24, 0xFF	; 255
 6a4:	80 93 7d 00 	sts	0x007D, r24
 6a8:	e4 cf       	rjmp	.-56     	; 0x672 <__vector_7+0x1a>
ISR(USART_RX_vect) 
{
  if (rxCount < SIZE_BUF){                //���� � ������ ��� ���� �����                     
      usartRxBuf[rxBufTail] = UDR;        //������� ������ �� UDR � �����
      rxBufTail++;                             //��������� ������ ������ ��������� ������ 
      if (rxBufTail == SIZE_BUF) rxBufTail = 0;  
 6aa:	10 92 7e 00 	sts	0x007E, r1
 6ae:	f7 cf       	rjmp	.-18     	; 0x69e <__vector_7+0x46>

000006b0 <_exit>:
 6b0:	f8 94       	cli

000006b2 <__stop_program>:
 6b2:	ff cf       	rjmp	.-2      	; 0x6b2 <__stop_program>
