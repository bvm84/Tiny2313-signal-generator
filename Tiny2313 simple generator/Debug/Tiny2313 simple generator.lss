
Tiny2313 simple generator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000066a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  00800060  00800060  0000066a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000066a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000069c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003b7  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000011c  00000000  00000000  00000ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000510  00000000  00000000  00000bff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  00001110  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000156  00000000  00000000  000011f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000007d  00000000  00000000  0000134e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  000013cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	42 c0       	rjmp	.+132    	; 0x8e <__vector_4>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__vector_13>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>
  22:	0f c0       	rjmp	.+30     	; 0x42 <__bad_interrupt>
  24:	0e c0       	rjmp	.+28     	; 0x42 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	ad 37       	cpi	r26, 0x7D	; 125
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	39 d0       	rcall	.+114    	; 0xb2 <main>
  40:	d8 c2       	rjmp	.+1456   	; 0x5f2 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <__vector_13>:
PT_THREAD(Switch(struct pt *pt))
{
	//uint32_t dur=0;
	static volatile uint32_t switch_timer=0;
	PT_BEGIN(pt);
	PT_WAIT_UNTIL(pt,(st_millis()-switch_timer)>=10);//запуск протопотока каждые 10мсек
  44:	1f 92       	push	r1
  46:	0f 92       	push	r0
  48:	0f b6       	in	r0, 0x3f	; 63
  4a:	0f 92       	push	r0
  4c:	11 24       	eor	r1, r1
  4e:	8f 93       	push	r24
  50:	9f 93       	push	r25
  52:	af 93       	push	r26
		GENERATOR_ON;
		LED0_ON;
		LED1_ON;
	}
	PT_END(pt);
}
  54:	bf 93       	push	r27
  56:	80 91 6f 00 	lds	r24, 0x006F
//Фукция выдачи текущего системного времени
uint32_t st_millis(void)
{
	uint32_t m;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  5a:	90 91 70 00 	lds	r25, 0x0070
	{
		m = st_timer0_millis;
  5e:	a0 91 71 00 	lds	r26, 0x0071
  62:	b0 91 72 00 	lds	r27, 0x0072
  66:	01 96       	adiw	r24, 0x01	; 1
  68:	a1 1d       	adc	r26, r1
  6a:	b1 1d       	adc	r27, r1
  6c:	80 93 6f 00 	sts	0x006F, r24
{
	//uint32_t dur=0;
	static volatile uint32_t switch_timer=0;
	PT_BEGIN(pt);
	PT_WAIT_UNTIL(pt,(st_millis()-switch_timer)>=10);//запуск протопотока каждые 10мсек
	switch_timer=st_millis();
  70:	90 93 70 00 	sts	0x0070, r25
  74:	a0 93 71 00 	sts	0x0071, r26
  78:	b0 93 72 00 	sts	0x0072, r27
  7c:	bf 91       	pop	r27
  7e:	af 91       	pop	r26
	if (p_generator->state==GEN_OFF)
  80:	9f 91       	pop	r25
  82:	8f 91       	pop	r24
  84:	0f 90       	pop	r0
  86:	0f be       	out	0x3f, r0	; 63
	}
	else if (p_generator->regime==GEN_UART)
	{
		//тут что-то будет :) можно прямо здесь написать работу от уарта, а можно в отдельно протопотоке
	}
	else if ((p_generator->regime==GEN_MANUAL)&&(p_generator->state==GEN_ONESHOT))
  88:	0f 90       	pop	r0
  8a:	1f 90       	pop	r1
  8c:	18 95       	reti

0000008e <__vector_4>:
  8e:	1f 92       	push	r1
  90:	0f 92       	push	r0
  92:	0f b6       	in	r0, 0x3f	; 63
	{
		CLEAR_TCCR1B;
  94:	0f 92       	push	r0
  96:	11 24       	eor	r1, r1
  98:	8f 93       	push	r24
		TCCR1B|=PRESCALER_1_MASK;
  9a:	80 91 79 00 	lds	r24, 0x0079
  9e:	82 30       	cpi	r24, 0x02	; 2
		DISCONECT_TIMER_FROM_PIN;
  a0:	11 f4       	brne	.+4      	; 0xa6 <__vector_4+0x18>
  a2:	10 92 79 00 	sts	0x0079, r1
		TCNT1=0;
  a6:	8f 91       	pop	r24
  a8:	0f 90       	pop	r0
		ICR1=60000;
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	0f 90       	pop	r0
  ae:	1f 90       	pop	r1
  b0:	18 95       	reti

000000b2 <main>:
		OCR1=2500;
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	00 d0       	rcall	.+0      	; 0xb8 <main+0x6>
  b8:	cd b7       	in	r28, 0x3d	; 61
		CONNECT_TIMER_TO_PIN;
  ba:	dd 27       	eor	r29, r29
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
		//TIMSK|=_BV(TOIE1);
		GENERATOR_ON;
  c0:	9a 83       	std	Y+2, r25	; 0x02
  c2:	89 83       	std	Y+1, r24	; 0x01
  c4:	10 92 79 00 	sts	0x0079, r1
		LED0_ON;
		LED1_ON;
  c8:	10 92 7a 00 	sts	0x007A, r1
	}
	PT_END(pt);
  cc:	10 92 7b 00 	sts	0x007B, r1
  d0:	10 92 7c 00 	sts	0x007C, r1
}
  d4:	8e e1       	ldi	r24, 0x1E	; 30
  d6:	81 bb       	out	0x11, r24	; 17
PT_THREAD(Switch(struct pt *pt))
{
	//uint32_t dur=0;
	static volatile uint32_t switch_timer=0;
	PT_BEGIN(pt);
	PT_WAIT_UNTIL(pt,(st_millis()-switch_timer)>=10);//запуск протопотока каждые 10мсек
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	87 bb       	out	0x17, r24	; 23
  dc:	80 e6       	ldi	r24, 0x60	; 96
  de:	82 bb       	out	0x12, r24	; 18
  e0:	18 ba       	out	0x18, r1	; 24
  e2:	82 e0       	ldi	r24, 0x02	; 2
	switch_timer=st_millis();
	if (p_generator->state==GEN_OFF)
	{
		if(p_generator->regime==GEN_PERIODIC)
  e4:	80 bf       	out	0x30, r24	; 48
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	83 bf       	out	0x33, r24	; 51
  ea:	12 be       	out	0x32, r1	; 50
			}
			p_generator->state=GEN_ON;
			CONNECT_TIMER_TO_PIN;//подключаем таймер к пину
			GENERATOR_ON;
		}
		if (p_generator->regime==GEN_MANUAL)
  ec:	8d e7       	ldi	r24, 0x7D	; 125
  ee:	86 bf       	out	0x36, r24	; 54
		{
			//TIMSK&=~_BV(TOIE1);
			GENERATOR_OFF;
  f0:	82 e8       	ldi	r24, 0x82	; 130
  f2:	8f bd       	out	0x2f, r24	; 47
  f4:	8c e1       	ldi	r24, 0x1C	; 28
			DISCONECT_TIMER_FROM_PIN;
  f6:	8e bd       	out	0x2e, r24	; 46
  f8:	8f b5       	in	r24, 0x2f	; 47
  fa:	8f 77       	andi	r24, 0x7F	; 127
			OUT_OFF;
  fc:	8f bd       	out	0x2f, r24	; 47
			LED0_OFF;
  fe:	1d bc       	out	0x2d, r1	; 45
			LED1_OFF;
 100:	1c bc       	out	0x2c, r1	; 44
 102:	15 bc       	out	0x25, r1	; 37
	switch_timer=st_millis();
	if (p_generator->state==GEN_OFF)
	{
		if(p_generator->regime==GEN_PERIODIC)
		{
			CLEAR_TCCR1B;
 104:	14 bc       	out	0x24, r1	; 36
 106:	1b bc       	out	0x2b, r1	; 43
 108:	1a bc       	out	0x2a, r1	; 42
			//DISCONECT_TIMER_FROM_PIN;
			//OUT_OFF;
			if (p_generator->period==PERIOD_HZ1000)
 10a:	89 b7       	in	r24, 0x39	; 57
 10c:	81 60       	ori	r24, 0x01	; 1
			{
				TCCR1B|=PRESCALER_1_MASK;
 10e:	89 bf       	out	0x39, r24	; 57
		if(p_generator->regime==GEN_PERIODIC)
		{
			CLEAR_TCCR1B;
			//DISCONECT_TIMER_FROM_PIN;
			//OUT_OFF;
			if (p_generator->period==PERIOD_HZ1000)
 110:	10 92 78 00 	sts	0x0078, r1
			{
				TCCR1B|=PRESCALER_1_MASK;
				ICR1=PERIOD_HZ1000_TICKS;
			}
			else if (p_generator->period==PERIOD_HZ100)
 114:	10 92 77 00 	sts	0x0077, r1
 118:	10 92 76 00 	sts	0x0076, r1
				TCCR1B|=PRESCALER_8_MASK;
				ICR1=PERIOD_HZ100_TICKS;
			}
			else
			{
				TCCR1B|=PRESCALER_256_MASK;
 11c:	10 92 75 00 	sts	0x0075, r1
				ICR1=PERIOD_HZ1_TICKS;
 120:	10 92 74 00 	sts	0x0074, r1
 124:	10 92 73 00 	sts	0x0073, r1
			}
			if (p_generator->duration==DURATION_90)
 128:	a8 95       	wdr
 12a:	9f e0       	ldi	r25, 0x0F	; 15
 12c:	88 e1       	ldi	r24, 0x18	; 24
			{
				OCR1=(uint16_t)((7*(uint32_t)ICR1)>>3);
			}
			else if (p_generator->duration==DURATION_50)
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	a8 95       	wdr
			{
				OCR1=(uint16_t)((uint32_t)ICR1>>1);
			}
			else
			{
				if (p_generator->period==PERIOD_HZ1000)
 134:	81 bd       	out	0x21, r24	; 33
 136:	0f be       	out	0x3f, r0	; 63
 138:	91 bd       	out	0x21, r25	; 33
				{
					OCR1=(uint16_t)(5*(uint32_t)ICR1>>4);
				}
				else if (p_generator->period==PERIOD_HZ100)
 13a:	78 94       	sei
 13c:	24 e1       	ldi	r18, 0x14	; 20
 13e:	f2 2e       	mov	r15, r18
				{
					OCR1=(uint16_t)((uint32_t)ICR1>>5);
				}
				else
				{
					OCR1=(uint16_t)(5*(uint32_t)ICR1>>14);
 140:	32 e0       	ldi	r19, 0x02	; 2
 142:	e3 2e       	mov	r14, r19
 144:	f1 e0       	ldi	r31, 0x01	; 1
 146:	6a ef       	ldi	r22, 0xFA	; 250
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	40 e6       	ldi	r20, 0x60	; 96
 14c:	c4 2e       	mov	r12, r20
 14e:	4a ee       	ldi	r20, 0xEA	; 234
 150:	d4 2e       	mov	r13, r20
 152:	04 ec       	ldi	r16, 0xC4	; 196
 154:	19 e0       	ldi	r17, 0x09	; 9
 156:	a2 e1       	ldi	r26, 0x12	; 18
 158:	ba e7       	ldi	r27, 0x7A	; 122
 15a:	50 e4       	ldi	r21, 0x40	; 64
 15c:	25 2e       	mov	r2, r21
 15e:	5f e1       	ldi	r21, 0x1F	; 31
 160:	35 2e       	mov	r3, r21
 162:	4f e3       	ldi	r20, 0x3F	; 63
 164:	51 e0       	ldi	r21, 0x01	; 1
 166:	25 e9       	ldi	r18, 0x95	; 149
 168:	31 e0       	ldi	r19, 0x01	; 1
 16a:	26 c0       	rjmp	.+76     	; 0x1b8 <__stack+0xd9>
 16c:	8a 3f       	cpi	r24, 0xFA	; 250
 16e:	91 05       	cpc	r25, r1
 170:	69 f1       	breq	.+90     	; 0x1cc <__stack+0xed>
 172:	10 92 78 00 	sts	0x0078, r1
				}
			}
			p_generator->state=GEN_ON;
 176:	10 92 77 00 	sts	0x0077, r1
 17a:	80 91 75 00 	lds	r24, 0x0075
			CONNECT_TIMER_TO_PIN;//подключаем таймер к пину
 17e:	90 91 76 00 	lds	r25, 0x0076
			GENERATOR_ON;
 182:	00 97       	sbiw	r24, 0x00	; 0
 184:	09 f4       	brne	.+2      	; 0x188 <__stack+0xa9>
 186:	5e c0       	rjmp	.+188    	; 0x244 <__stack+0x165>
 188:	8f 33       	cpi	r24, 0x3F	; 63
 18a:	91 40       	sbci	r25, 0x01	; 1
 18c:	09 f4       	brne	.+2      	; 0x190 <__stack+0xb1>
			CLEAR_TCCR1B;
			//DISCONECT_TIMER_FROM_PIN;
			//OUT_OFF;
			if (p_generator->period==PERIOD_HZ1000)
			{
				TCCR1B|=PRESCALER_1_MASK;
 18e:	5e c0       	rjmp	.+188    	; 0x24c <__stack+0x16d>
 190:	10 92 76 00 	sts	0x0076, r1
				ICR1=PERIOD_HZ1000_TICKS;
 194:	10 92 75 00 	sts	0x0075, r1
 198:	80 91 73 00 	lds	r24, 0x0073
				TCCR1B|=PRESCALER_256_MASK;
				ICR1=PERIOD_HZ1_TICKS;
			}
			if (p_generator->duration==DURATION_90)
			{
				OCR1=(uint16_t)((7*(uint32_t)ICR1)>>3);
 19c:	90 91 74 00 	lds	r25, 0x0074
 1a0:	00 97       	sbiw	r24, 0x00	; 0
 1a2:	09 f4       	brne	.+2      	; 0x1a6 <__stack+0xc7>
 1a4:	99 c0       	rjmp	.+306    	; 0x2d8 <__stack+0x1f9>
 1a6:	85 39       	cpi	r24, 0x95	; 149
 1a8:	91 40       	sbci	r25, 0x01	; 1
 1aa:	09 f4       	brne	.+2      	; 0x1ae <__stack+0xcf>
 1ac:	99 c0       	rjmp	.+306    	; 0x2e0 <__stack+0x201>
 1ae:	10 92 74 00 	sts	0x0074, r1
 1b2:	10 92 73 00 	sts	0x0073, r1
 1b6:	a8 95       	wdr
 1b8:	80 91 77 00 	lds	r24, 0x0077
 1bc:	90 91 78 00 	lds	r25, 0x0078
 1c0:	00 97       	sbiw	r24, 0x00	; 0
 1c2:	a1 f6       	brne	.-88     	; 0x16c <__stack+0x8d>
 1c4:	70 93 78 00 	sts	0x0078, r23
 1c8:	60 93 77 00 	sts	0x0077, r22
 1cc:	8f b7       	in	r24, 0x3f	; 63
 1ce:	f8 94       	cli
 1d0:	80 90 6f 00 	lds	r8, 0x006F
 1d4:	90 90 70 00 	lds	r9, 0x0070
 1d8:	a0 90 71 00 	lds	r10, 0x0071
				TCCR1B|=PRESCALER_1_MASK;
				ICR1=PERIOD_HZ1000_TICKS;
			}
			else if (p_generator->period==PERIOD_HZ100)
			{
				TCCR1B|=PRESCALER_8_MASK;
 1dc:	b0 90 72 00 	lds	r11, 0x0072
				ICR1=PERIOD_HZ100_TICKS;
 1e0:	8f bf       	out	0x3f, r24	; 63
 1e2:	40 90 6b 00 	lds	r4, 0x006B
 1e6:	50 90 6c 00 	lds	r5, 0x006C
			}
			else
			{
				if (p_generator->period==PERIOD_HZ1000)
				{
					OCR1=(uint16_t)(5*(uint32_t)ICR1>>4);
 1ea:	60 90 6d 00 	lds	r6, 0x006D
 1ee:	70 90 6e 00 	lds	r7, 0x006E
 1f2:	84 18       	sub	r8, r4
 1f4:	95 08       	sbc	r9, r5
 1f6:	a6 08       	sbc	r10, r6
 1f8:	b7 08       	sbc	r11, r7
 1fa:	8a e0       	ldi	r24, 0x0A	; 10
 1fc:	88 16       	cp	r8, r24
 1fe:	91 04       	cpc	r9, r1
 200:	a1 04       	cpc	r10, r1
 202:	b1 04       	cpc	r11, r1
 204:	08 f4       	brcc	.+2      	; 0x208 <__stack+0x129>
 206:	b9 cf       	rjmp	.-142    	; 0x17a <__stack+0x9b>
 208:	8f b7       	in	r24, 0x3f	; 63
 20a:	f8 94       	cli
 20c:	80 90 6f 00 	lds	r8, 0x006F
 210:	90 90 70 00 	lds	r9, 0x0070
 214:	a0 90 71 00 	lds	r10, 0x0071
 218:	b0 90 72 00 	lds	r11, 0x0072
 21c:	8f bf       	out	0x3f, r24	; 63
 21e:	80 92 6b 00 	sts	0x006B, r8
			{
				OCR1=(uint16_t)((7*(uint32_t)ICR1)>>3);
			}
			else if (p_generator->duration==DURATION_50)
			{
				OCR1=(uint16_t)((uint32_t)ICR1>>1);
 222:	90 92 6c 00 	sts	0x006C, r9
 226:	a0 92 6d 00 	sts	0x006D, r10
 22a:	b0 92 6e 00 	sts	0x006E, r11
 22e:	80 91 6a 00 	lds	r24, 0x006A
				{
					OCR1=(uint16_t)(5*(uint32_t)ICR1>>4);
				}
				else if (p_generator->period==PERIOD_HZ100)
				{
					OCR1=(uint16_t)((uint32_t)ICR1>>5);
 232:	88 23       	and	r24, r24
 234:	09 f4       	brne	.+2      	; 0x238 <__stack+0x159>
 236:	94 c0       	rjmp	.+296    	; 0x360 <__stack+0x281>
 238:	80 91 6a 00 	lds	r24, 0x006A
 23c:	81 50       	subi	r24, 0x01	; 1
 23e:	80 93 6a 00 	sts	0x006A, r24
 242:	97 cf       	rjmp	.-210    	; 0x172 <__stack+0x93>
 244:	50 93 76 00 	sts	0x0076, r21
 248:	40 93 75 00 	sts	0x0075, r20
//Фукция выдачи текущего системного времени
uint32_t st_millis(void)
{
	uint32_t m;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 24c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 24e:	f8 94       	cli
	{
		m = st_timer0_millis;
 250:	80 90 6f 00 	lds	r8, 0x006F
 254:	90 90 70 00 	lds	r9, 0x0070
 258:	a0 90 71 00 	lds	r10, 0x0071
 25c:	b0 90 72 00 	lds	r11, 0x0072
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 260:	8f bf       	out	0x3f, r24	; 63
PT_THREAD(Switch(struct pt *pt))
{
	//uint32_t dur=0;
	static volatile uint32_t switch_timer=0;
	PT_BEGIN(pt);
	PT_WAIT_UNTIL(pt,(st_millis()-switch_timer)>=10);//запуск протопотока каждые 10мсек
 262:	40 90 66 00 	lds	r4, 0x0066
 266:	50 90 67 00 	lds	r5, 0x0067
 26a:	60 90 68 00 	lds	r6, 0x0068
 26e:	70 90 69 00 	lds	r7, 0x0069
 272:	84 18       	sub	r8, r4
 274:	95 08       	sbc	r9, r5
 276:	a6 08       	sbc	r10, r6
 278:	b7 08       	sbc	r11, r7
 27a:	8a e0       	ldi	r24, 0x0A	; 10
 27c:	88 16       	cp	r8, r24
 27e:	91 04       	cpc	r9, r1
 280:	a1 04       	cpc	r10, r1
 282:	b1 04       	cpc	r11, r1
 284:	08 f4       	brcc	.+2      	; 0x288 <__stack+0x1a9>
 286:	88 cf       	rjmp	.-240    	; 0x198 <__stack+0xb9>
//Фукция выдачи текущего системного времени
uint32_t st_millis(void)
{
	uint32_t m;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 288:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 28a:	f8 94       	cli
	{
		m = st_timer0_millis;
 28c:	80 90 6f 00 	lds	r8, 0x006F
 290:	90 90 70 00 	lds	r9, 0x0070
 294:	a0 90 71 00 	lds	r10, 0x0071
 298:	b0 90 72 00 	lds	r11, 0x0072
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 29c:	8f bf       	out	0x3f, r24	; 63
{
	//uint32_t dur=0;
	static volatile uint32_t switch_timer=0;
	PT_BEGIN(pt);
	PT_WAIT_UNTIL(pt,(st_millis()-switch_timer)>=10);//запуск протопотока каждые 10мсек
	switch_timer=st_millis();
 29e:	80 92 66 00 	sts	0x0066, r8
 2a2:	90 92 67 00 	sts	0x0067, r9
 2a6:	a0 92 68 00 	sts	0x0068, r10
 2aa:	b0 92 69 00 	sts	0x0069, r11
	if (p_generator->state==GEN_OFF)
 2ae:	80 91 79 00 	lds	r24, 0x0079
 2b2:	81 11       	cpse	r24, r1
 2b4:	7c c0       	rjmp	.+248    	; 0x3ae <__stack+0x2cf>
	{
		if(p_generator->regime==GEN_PERIODIC)
 2b6:	80 91 7a 00 	lds	r24, 0x007A
 2ba:	81 30       	cpi	r24, 0x01	; 1
 2bc:	09 f4       	brne	.+2      	; 0x2c0 <__stack+0x1e1>
 2be:	a3 c0       	rjmp	.+326    	; 0x406 <__stack+0x327>
			}
			p_generator->state=GEN_ON;
			CONNECT_TIMER_TO_PIN;//подключаем таймер к пину
			GENERATOR_ON;
		}
		if (p_generator->regime==GEN_MANUAL)
 2c0:	81 11       	cpse	r24, r1
 2c2:	66 cf       	rjmp	.-308    	; 0x190 <__stack+0xb1>
		{
			//TIMSK&=~_BV(TOIE1);
			GENERATOR_OFF;
 2c4:	89 b7       	in	r24, 0x39	; 57
 2c6:	8f 7b       	andi	r24, 0xBF	; 191
 2c8:	89 bf       	out	0x39, r24	; 57
			DISCONECT_TIMER_FROM_PIN;
 2ca:	8f b5       	in	r24, 0x2f	; 47
 2cc:	8f 77       	andi	r24, 0x7F	; 127
 2ce:	8f bd       	out	0x2f, r24	; 47
			OUT_OFF;
 2d0:	c3 98       	cbi	0x18, 3	; 24
			LED0_OFF;
 2d2:	93 98       	cbi	0x12, 3	; 18
			LED1_OFF;
 2d4:	94 98       	cbi	0x12, 4	; 18
 2d6:	5c cf       	rjmp	.-328    	; 0x190 <__stack+0xb1>
PT_THREAD(Leds(struct pt *pt))
{
	static volatile uint32_t leds_timer=0;
	static volatile uint8_t counter1, counter2=0;
	PT_BEGIN(pt);
	PT_WAIT_UNTIL(pt,(st_millis()-leds_timer)>=100);//запуск протопотока каждые 0.1мсек
 2d8:	30 93 74 00 	sts	0x0074, r19
 2dc:	20 93 73 00 	sts	0x0073, r18
//Фукция выдачи текущего системного времени
uint32_t st_millis(void)
{
	uint32_t m;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 2e0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2e2:	f8 94       	cli
	{
		m = st_timer0_millis;
 2e4:	80 90 6f 00 	lds	r8, 0x006F
 2e8:	90 90 70 00 	lds	r9, 0x0070
 2ec:	a0 90 71 00 	lds	r10, 0x0071
 2f0:	b0 90 72 00 	lds	r11, 0x0072
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2f4:	8f bf       	out	0x3f, r24	; 63
PT_THREAD(Leds(struct pt *pt))
{
	static volatile uint32_t leds_timer=0;
	static volatile uint8_t counter1, counter2=0;
	PT_BEGIN(pt);
	PT_WAIT_UNTIL(pt,(st_millis()-leds_timer)>=100);//запуск протопотока каждые 0.1мсек
 2f6:	40 90 62 00 	lds	r4, 0x0062
 2fa:	50 90 63 00 	lds	r5, 0x0063
 2fe:	60 90 64 00 	lds	r6, 0x0064
 302:	70 90 65 00 	lds	r7, 0x0065
 306:	84 18       	sub	r8, r4
 308:	95 08       	sbc	r9, r5
 30a:	a6 08       	sbc	r10, r6
 30c:	b7 08       	sbc	r11, r7
 30e:	84 e6       	ldi	r24, 0x64	; 100
 310:	88 16       	cp	r8, r24
 312:	91 04       	cpc	r9, r1
 314:	a1 04       	cpc	r10, r1
 316:	b1 04       	cpc	r11, r1
 318:	08 f4       	brcc	.+2      	; 0x31c <__stack+0x23d>
 31a:	4d cf       	rjmp	.-358    	; 0x1b6 <__stack+0xd7>
//Фукция выдачи текущего системного времени
uint32_t st_millis(void)
{
	uint32_t m;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 31c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 31e:	f8 94       	cli
	{
		m = st_timer0_millis;
 320:	80 90 6f 00 	lds	r8, 0x006F
 324:	90 90 70 00 	lds	r9, 0x0070
 328:	a0 90 71 00 	lds	r10, 0x0071
 32c:	b0 90 72 00 	lds	r11, 0x0072
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 330:	8f bf       	out	0x3f, r24	; 63
{
	static volatile uint32_t leds_timer=0;
	static volatile uint8_t counter1, counter2=0;
	PT_BEGIN(pt);
	PT_WAIT_UNTIL(pt,(st_millis()-leds_timer)>=100);//запуск протопотока каждые 0.1мсек
	leds_timer=st_millis();
 332:	80 92 62 00 	sts	0x0062, r8
 336:	90 92 63 00 	sts	0x0063, r9
 33a:	a0 92 64 00 	sts	0x0064, r10
 33e:	b0 92 65 00 	sts	0x0065, r11
	if (p_generator->regime==GEN_PERIODIC)
 342:	80 91 7a 00 	lds	r24, 0x007A
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	09 f4       	brne	.+2      	; 0x34c <__stack+0x26d>
 34a:	50 c0       	rjmp	.+160    	; 0x3ec <__stack+0x30d>
				LED1_OFF;
				break;
			}
		}
	}
	else if (p_generator->regime==GEN_UART) //моргаем обоими светодиодами
 34c:	82 30       	cpi	r24, 0x02	; 2
 34e:	19 f0       	breq	.+6      	; 0x356 <__stack+0x277>
			LED1_ON;
		}
	}
	else
	{
		LED0_OFF;
 350:	93 98       	cbi	0x12, 3	; 18
		LED1_OFF;	
 352:	94 98       	cbi	0x12, 4	; 18
 354:	2c cf       	rjmp	.-424    	; 0x1ae <__stack+0xcf>
			}
		}
	}
	else if (p_generator->regime==GEN_UART) //моргаем обоими светодиодами
	{
		if ((LED0_PORT_PIN&(_BV(LED0)))==0)
 356:	83 9b       	sbis	0x10, 3	; 16
 358:	fb cf       	rjmp	.-10     	; 0x350 <__stack+0x271>
			LED0_OFF;
			LED1_OFF;
		}
		else 
		{
			LED0_ON;
 35a:	93 9a       	sbi	0x12, 3	; 18
			LED1_ON;
 35c:	94 9a       	sbi	0x12, 4	; 18
 35e:	27 cf       	rjmp	.-434    	; 0x1ae <__stack+0xcf>
	{
		delay--;
	}
	else 
	{
		if (!(BUT1_PORT_PIN&(_BV(BUT1))))//((BUT1_PORT_PIN&(_BV(BUT1)))==0)
 360:	85 99       	sbic	0x10, 5	; 16
 362:	13 c0       	rjmp	.+38     	; 0x38a <__stack+0x2ab>
		{
			if (p_generator->regime==GEN_MANUAL)
 364:	80 91 7a 00 	lds	r24, 0x007A
 368:	81 11       	cpse	r24, r1
 36a:	92 c0       	rjmp	.+292    	; 0x490 <__stack+0x3b1>
			{
				p_generator->regime=GEN_PERIODIC;
 36c:	f0 93 7a 00 	sts	0x007A, r31
				p_generator->period=PERIOD_HZ1;
 370:	10 92 7c 00 	sts	0x007C, r1
			}
			else if ((p_generator->regime==GEN_PERIODIC)&&(p_generator->period==PERIOD_HZ1000))
			{
				p_generator->regime=GEN_MANUAL;
			}
			p_generator->state=GEN_OFF;
 374:	10 92 79 00 	sts	0x0079, r1
			GENERATOR_OFF;
 378:	89 b7       	in	r24, 0x39	; 57
 37a:	8f 7b       	andi	r24, 0xBF	; 191
 37c:	89 bf       	out	0x39, r24	; 57
			DISCONECT_TIMER_FROM_PIN;
 37e:	8f b5       	in	r24, 0x2f	; 47
 380:	8f 77       	andi	r24, 0x7F	; 127
 382:	8f bd       	out	0x2f, r24	; 47
			OUT_OFF;
 384:	c3 98       	cbi	0x18, 3	; 24
			delay=BUTTON_DELAY_200MSEC;
 386:	f0 92 6a 00 	sts	0x006A, r15
		}
		if (!(BUT0_PORT_PIN&(_BV(BUT0))))
 38a:	86 99       	sbic	0x10, 6	; 16
 38c:	f2 ce       	rjmp	.-540    	; 0x172 <__stack+0x93>
		{
			if ((p_generator->regime==GEN_MANUAL))
 38e:	80 91 7a 00 	lds	r24, 0x007A
 392:	81 11       	cpse	r24, r1
 394:	87 c0       	rjmp	.+270    	; 0x4a4 <__stack+0x3c5>
			{
				p_generator->state=GEN_ONESHOT;
 396:	e0 92 79 00 	sts	0x0079, r14
				{
					p_generator->duration=DURATION_US320;
				}
				p_generator->state=GEN_OFF;
			}
			GENERATOR_OFF;
 39a:	89 b7       	in	r24, 0x39	; 57
 39c:	8f 7b       	andi	r24, 0xBF	; 191
 39e:	89 bf       	out	0x39, r24	; 57
			DISCONECT_TIMER_FROM_PIN;
 3a0:	8f b5       	in	r24, 0x2f	; 47
 3a2:	8f 77       	andi	r24, 0x7F	; 127
 3a4:	8f bd       	out	0x2f, r24	; 47
			OUT_OFF;
 3a6:	c3 98       	cbi	0x18, 3	; 24
			delay=BUTTON_DELAY_200MSEC;
 3a8:	f0 92 6a 00 	sts	0x006A, r15
 3ac:	e2 ce       	rjmp	.-572    	; 0x172 <__stack+0x93>
	}
	else if (p_generator->regime==GEN_UART)
	{
		//тут что-то будет :) можно прямо здесь написать работу от уарта, а можно в отдельно протопотоке
	}
	else if ((p_generator->regime==GEN_MANUAL)&&(p_generator->state==GEN_ONESHOT))
 3ae:	90 91 7a 00 	lds	r25, 0x007A
 3b2:	91 11       	cpse	r25, r1
 3b4:	ed ce       	rjmp	.-550    	; 0x190 <__stack+0xb1>
 3b6:	82 30       	cpi	r24, 0x02	; 2
 3b8:	09 f0       	breq	.+2      	; 0x3bc <__stack+0x2dd>
 3ba:	ea ce       	rjmp	.-556    	; 0x190 <__stack+0xb1>
	{
		CLEAR_TCCR1B;
 3bc:	8e b5       	in	r24, 0x2e	; 46
 3be:	88 7f       	andi	r24, 0xF8	; 248
 3c0:	8e bd       	out	0x2e, r24	; 46
		TCCR1B|=PRESCALER_1_MASK;
 3c2:	8e b5       	in	r24, 0x2e	; 46
 3c4:	81 60       	ori	r24, 0x01	; 1
 3c6:	8e bd       	out	0x2e, r24	; 46
		DISCONECT_TIMER_FROM_PIN;
 3c8:	8f b5       	in	r24, 0x2f	; 47
 3ca:	8f 77       	andi	r24, 0x7F	; 127
 3cc:	8f bd       	out	0x2f, r24	; 47
		TCNT1=0;
 3ce:	1d bc       	out	0x2d, r1	; 45
 3d0:	1c bc       	out	0x2c, r1	; 44
		ICR1=60000;
 3d2:	d5 bc       	out	0x25, r13	; 37
 3d4:	c4 bc       	out	0x24, r12	; 36
		OCR1=2500;
 3d6:	1b bd       	out	0x2b, r17	; 43
 3d8:	0a bd       	out	0x2a, r16	; 42
		CONNECT_TIMER_TO_PIN;
 3da:	8f b5       	in	r24, 0x2f	; 47
 3dc:	80 68       	ori	r24, 0x80	; 128
 3de:	8f bd       	out	0x2f, r24	; 47
		//TIMSK|=_BV(TOIE1);
		GENERATOR_ON;
 3e0:	89 b7       	in	r24, 0x39	; 57
 3e2:	80 64       	ori	r24, 0x40	; 64
 3e4:	89 bf       	out	0x39, r24	; 57
		LED0_ON;
 3e6:	93 9a       	sbi	0x12, 3	; 18
		LED1_ON;
 3e8:	94 9a       	sbi	0x12, 4	; 18
 3ea:	d2 ce       	rjmp	.-604    	; 0x190 <__stack+0xb1>
	PT_BEGIN(pt);
	PT_WAIT_UNTIL(pt,(st_millis()-leds_timer)>=100);//запуск протопотока каждые 0.1мсек
	leds_timer=st_millis();
	if (p_generator->regime==GEN_PERIODIC)
	{
		switch(p_generator->period)
 3ec:	80 91 7c 00 	lds	r24, 0x007C
 3f0:	81 30       	cpi	r24, 0x01	; 1
 3f2:	09 f4       	brne	.+2      	; 0x3f6 <__stack+0x317>
 3f4:	71 c0       	rjmp	.+226    	; 0x4d8 <__stack+0x3f9>
 3f6:	08 f4       	brcc	.+2      	; 0x3fa <__stack+0x31b>
 3f8:	61 c0       	rjmp	.+194    	; 0x4bc <__stack+0x3dd>
 3fa:	82 30       	cpi	r24, 0x02	; 2
 3fc:	09 f0       	breq	.+2      	; 0x400 <__stack+0x321>
 3fe:	d7 ce       	rjmp	.-594    	; 0x1ae <__stack+0xcf>
				LED1_OFF;
				break;
			}
			case PERIOD_HZ1000: //LED0 горит непрерывно
			{
				LED0_ON;
 400:	93 9a       	sbi	0x12, 3	; 18
				LED1_OFF;
 402:	94 98       	cbi	0x12, 4	; 18
 404:	d4 ce       	rjmp	.-600    	; 0x1ae <__stack+0xcf>
	switch_timer=st_millis();
	if (p_generator->state==GEN_OFF)
	{
		if(p_generator->regime==GEN_PERIODIC)
		{
			CLEAR_TCCR1B;
 406:	8e b5       	in	r24, 0x2e	; 46
 408:	88 7f       	andi	r24, 0xF8	; 248
 40a:	8e bd       	out	0x2e, r24	; 46
			//DISCONECT_TIMER_FROM_PIN;
			//OUT_OFF;
			if (p_generator->period==PERIOD_HZ1000)
 40c:	80 91 7c 00 	lds	r24, 0x007C
			{
				TCCR1B|=PRESCALER_1_MASK;
 410:	9e b5       	in	r25, 0x2e	; 46
		if(p_generator->regime==GEN_PERIODIC)
		{
			CLEAR_TCCR1B;
			//DISCONECT_TIMER_FROM_PIN;
			//OUT_OFF;
			if (p_generator->period==PERIOD_HZ1000)
 412:	82 30       	cpi	r24, 0x02	; 2
 414:	09 f4       	brne	.+2      	; 0x418 <__stack+0x339>
 416:	86 c0       	rjmp	.+268    	; 0x524 <__stack+0x445>
			{
				TCCR1B|=PRESCALER_1_MASK;
				ICR1=PERIOD_HZ1000_TICKS;
			}
			else if (p_generator->period==PERIOD_HZ100)
 418:	81 30       	cpi	r24, 0x01	; 1
 41a:	09 f4       	brne	.+2      	; 0x41e <__stack+0x33f>
 41c:	ac c0       	rjmp	.+344    	; 0x576 <__stack+0x497>
				TCCR1B|=PRESCALER_8_MASK;
				ICR1=PERIOD_HZ100_TICKS;
			}
			else
			{
				TCCR1B|=PRESCALER_256_MASK;
 41e:	94 60       	ori	r25, 0x04	; 4
 420:	9e bd       	out	0x2e, r25	; 46
				ICR1=PERIOD_HZ1_TICKS;
 422:	b5 bd       	out	0x25, r27	; 37
 424:	a4 bd       	out	0x24, r26	; 36
			}
			if (p_generator->duration==DURATION_90)
 426:	90 91 7b 00 	lds	r25, 0x007B
 42a:	92 30       	cpi	r25, 0x02	; 2
 42c:	09 f4       	brne	.+2      	; 0x430 <__stack+0x351>
 42e:	59 c0       	rjmp	.+178    	; 0x4e2 <__stack+0x403>
			{
				OCR1=(uint16_t)((7*(uint32_t)ICR1)>>3);
			}
			else if (p_generator->duration==DURATION_50)
 430:	91 30       	cpi	r25, 0x01	; 1
 432:	09 f4       	brne	.+2      	; 0x436 <__stack+0x357>
 434:	99 c0       	rjmp	.+306    	; 0x568 <__stack+0x489>
			{
				OCR1=(uint16_t)((uint32_t)ICR1>>1);
			}
			else
			{
				if (p_generator->period==PERIOD_HZ1000)
 436:	82 30       	cpi	r24, 0x02	; 2
 438:	09 f4       	brne	.+2      	; 0x43c <__stack+0x35d>
 43a:	a6 c0       	rjmp	.+332    	; 0x588 <__stack+0x4a9>
				{
					OCR1=(uint16_t)(5*(uint32_t)ICR1>>4);
				}
				else if (p_generator->period==PERIOD_HZ100)
 43c:	81 30       	cpi	r24, 0x01	; 1
 43e:	09 f4       	brne	.+2      	; 0x442 <__stack+0x363>
 440:	c0 c0       	rjmp	.+384    	; 0x5c2 <__stack+0x4e3>
				{
					OCR1=(uint16_t)((uint32_t)ICR1>>5);
				}
				else
				{
					OCR1=(uint16_t)(5*(uint32_t)ICR1>>14);
 442:	84 b5       	in	r24, 0x24	; 36
 444:	95 b5       	in	r25, 0x25	; 37
 446:	4c 01       	movw	r8, r24
 448:	a1 2c       	mov	r10, r1
 44a:	b1 2c       	mov	r11, r1
 44c:	24 01       	movw	r4, r8
 44e:	35 01       	movw	r6, r10
 450:	44 0c       	add	r4, r4
 452:	55 1c       	adc	r5, r5
 454:	66 1c       	adc	r6, r6
 456:	77 1c       	adc	r7, r7
 458:	44 0c       	add	r4, r4
 45a:	55 1c       	adc	r5, r5
 45c:	66 1c       	adc	r6, r6
 45e:	77 1c       	adc	r7, r7
 460:	84 0c       	add	r8, r4
 462:	95 1c       	adc	r9, r5
 464:	a6 1c       	adc	r10, r6
 466:	b7 1c       	adc	r11, r7
 468:	9e e0       	ldi	r25, 0x0E	; 14
 46a:	b6 94       	lsr	r11
 46c:	a7 94       	ror	r10
 46e:	97 94       	ror	r9
 470:	87 94       	ror	r8
 472:	9a 95       	dec	r25
 474:	d1 f7       	brne	.-12     	; 0x46a <__stack+0x38b>
 476:	9b bc       	out	0x2b, r9	; 43
 478:	8a bc       	out	0x2a, r8	; 42
				}
			}
			p_generator->state=GEN_ON;
 47a:	f0 93 79 00 	sts	0x0079, r31
			CONNECT_TIMER_TO_PIN;//подключаем таймер к пину
 47e:	8f b5       	in	r24, 0x2f	; 47
 480:	80 68       	ori	r24, 0x80	; 128
 482:	8f bd       	out	0x2f, r24	; 47
			GENERATOR_ON;
 484:	89 b7       	in	r24, 0x39	; 57
 486:	80 64       	ori	r24, 0x40	; 64
 488:	89 bf       	out	0x39, r24	; 57
 48a:	80 91 7a 00 	lds	r24, 0x007A
 48e:	18 cf       	rjmp	.-464    	; 0x2c0 <__stack+0x1e1>
			if (p_generator->regime==GEN_MANUAL)
			{
				p_generator->regime=GEN_PERIODIC;
				p_generator->period=PERIOD_HZ1;
			}
			else if ((p_generator->regime==GEN_PERIODIC)&&(p_generator->period==PERIOD_HZ1))
 490:	81 30       	cpi	r24, 0x01	; 1
 492:	09 f0       	breq	.+2      	; 0x496 <__stack+0x3b7>
 494:	6f cf       	rjmp	.-290    	; 0x374 <__stack+0x295>
 496:	90 91 7c 00 	lds	r25, 0x007C
 49a:	91 11       	cpse	r25, r1
 49c:	5c c0       	rjmp	.+184    	; 0x556 <__stack+0x477>
			{
				p_generator->period=PERIOD_HZ100;
 49e:	80 93 7c 00 	sts	0x007C, r24
 4a2:	68 cf       	rjmp	.-304    	; 0x374 <__stack+0x295>
		{
			if ((p_generator->regime==GEN_MANUAL))
			{
				p_generator->state=GEN_ONESHOT;
			}
			else if ((p_generator->regime==GEN_PERIODIC))
 4a4:	81 30       	cpi	r24, 0x01	; 1
 4a6:	09 f0       	breq	.+2      	; 0x4aa <__stack+0x3cb>
 4a8:	78 cf       	rjmp	.-272    	; 0x39a <__stack+0x2bb>
			{
				if (p_generator->duration==DURATION_US320)
 4aa:	90 91 7b 00 	lds	r25, 0x007B
 4ae:	91 11       	cpse	r25, r1
 4b0:	98 c0       	rjmp	.+304    	; 0x5e2 <__stack+0x503>
				{
					p_generator->duration=DURATION_50;
 4b2:	80 93 7b 00 	sts	0x007B, r24
				}
				else
				{
					p_generator->duration=DURATION_US320;
				}
				p_generator->state=GEN_OFF;
 4b6:	10 92 79 00 	sts	0x0079, r1
 4ba:	6f cf       	rjmp	.-290    	; 0x39a <__stack+0x2bb>
	{
		switch(p_generator->period)
		{
			case PERIOD_HZ1:
			{
				if (counter1<10) //моргает LED0 раз в секунду
 4bc:	80 91 61 00 	lds	r24, 0x0061
 4c0:	8a 30       	cpi	r24, 0x0A	; 10
 4c2:	a8 f5       	brcc	.+106    	; 0x52e <__stack+0x44f>
				{
					LED0_ON;
 4c4:	93 9a       	sbi	0x12, 3	; 18
					counter1++;
 4c6:	80 91 61 00 	lds	r24, 0x0061
 4ca:	8f 5f       	subi	r24, 0xFF	; 255
 4cc:	80 93 61 00 	sts	0x0061, r24
					counter2=0;
 4d0:	10 92 60 00 	sts	0x0060, r1
		}
	}
	else
	{
		LED0_OFF;
		LED1_OFF;	
 4d4:	94 98       	cbi	0x12, 4	; 18
 4d6:	6b ce       	rjmp	.-810    	; 0x1ae <__stack+0xcf>
				LED1_OFF;
				break;
			}
			case PERIOD_HZ100: //моргает LED0 - 10 ращ в секунду
			{
				if (((LED0_PORT_PIN&(_BV(LED0)))==0))
 4d8:	83 99       	sbic	0x10, 3	; 16
 4da:	3a cf       	rjmp	.-396    	; 0x350 <__stack+0x271>
				{
					LED0_ON;
 4dc:	93 9a       	sbi	0x12, 3	; 18
		}
	}
	else
	{
		LED0_OFF;
		LED1_OFF;	
 4de:	94 98       	cbi	0x12, 4	; 18
 4e0:	66 ce       	rjmp	.-820    	; 0x1ae <__stack+0xcf>
				TCCR1B|=PRESCALER_256_MASK;
				ICR1=PERIOD_HZ1_TICKS;
			}
			if (p_generator->duration==DURATION_90)
			{
				OCR1=(uint16_t)((7*(uint32_t)ICR1)>>3);
 4e2:	84 b5       	in	r24, 0x24	; 36
 4e4:	95 b5       	in	r25, 0x25	; 37
 4e6:	2c 01       	movw	r4, r24
 4e8:	61 2c       	mov	r6, r1
 4ea:	71 2c       	mov	r7, r1
 4ec:	53 01       	movw	r10, r6
 4ee:	42 01       	movw	r8, r4
 4f0:	88 0c       	add	r8, r8
 4f2:	99 1c       	adc	r9, r9
 4f4:	aa 1c       	adc	r10, r10
 4f6:	bb 1c       	adc	r11, r11
 4f8:	88 0c       	add	r8, r8
 4fa:	99 1c       	adc	r9, r9
 4fc:	aa 1c       	adc	r10, r10
 4fe:	bb 1c       	adc	r11, r11
 500:	88 0c       	add	r8, r8
 502:	99 1c       	adc	r9, r9
 504:	aa 1c       	adc	r10, r10
 506:	bb 1c       	adc	r11, r11
 508:	84 18       	sub	r8, r4
 50a:	95 08       	sbc	r9, r5
 50c:	a6 08       	sbc	r10, r6
 50e:	b7 08       	sbc	r11, r7
 510:	e3 e0       	ldi	r30, 0x03	; 3
 512:	b6 94       	lsr	r11
 514:	a7 94       	ror	r10
 516:	97 94       	ror	r9
 518:	87 94       	ror	r8
 51a:	ea 95       	dec	r30
 51c:	d1 f7       	brne	.-12     	; 0x512 <__stack+0x433>
 51e:	9b bc       	out	0x2b, r9	; 43
 520:	8a bc       	out	0x2a, r8	; 42
 522:	ab cf       	rjmp	.-170    	; 0x47a <__stack+0x39b>
			CLEAR_TCCR1B;
			//DISCONECT_TIMER_FROM_PIN;
			//OUT_OFF;
			if (p_generator->period==PERIOD_HZ1000)
			{
				TCCR1B|=PRESCALER_1_MASK;
 524:	91 60       	ori	r25, 0x01	; 1
 526:	9e bd       	out	0x2e, r25	; 46
				ICR1=PERIOD_HZ1000_TICKS;
 528:	35 bc       	out	0x25, r3	; 37
 52a:	24 bc       	out	0x24, r2	; 36
 52c:	7c cf       	rjmp	.-264    	; 0x426 <__stack+0x347>
				{
					LED0_ON;
					counter1++;
					counter2=0;
				}
				else if (counter2<10)
 52e:	80 91 60 00 	lds	r24, 0x0060
 532:	8a 30       	cpi	r24, 0x0A	; 10
 534:	08 f0       	brcs	.+2      	; 0x538 <__stack+0x459>
 536:	0d cf       	rjmp	.-486    	; 0x352 <__stack+0x273>
				{
					LED0_OFF;
 538:	93 98       	cbi	0x12, 3	; 18
					counter2++;
 53a:	80 91 60 00 	lds	r24, 0x0060
 53e:	8f 5f       	subi	r24, 0xFF	; 255
 540:	80 93 60 00 	sts	0x0060, r24
					if (counter2>=9)
 544:	80 91 60 00 	lds	r24, 0x0060
 548:	89 30       	cpi	r24, 0x09	; 9
 54a:	08 f4       	brcc	.+2      	; 0x54e <__stack+0x46f>
 54c:	02 cf       	rjmp	.-508    	; 0x352 <__stack+0x273>
					{
						counter1=0;
 54e:	10 92 61 00 	sts	0x0061, r1
		}
	}
	else
	{
		LED0_OFF;
		LED1_OFF;	
 552:	94 98       	cbi	0x12, 4	; 18
 554:	2c ce       	rjmp	.-936    	; 0x1ae <__stack+0xcf>
			}
			else if ((p_generator->regime==GEN_PERIODIC)&&(p_generator->period==PERIOD_HZ1))
			{
				p_generator->period=PERIOD_HZ100;
			}
			else if ((p_generator->regime==GEN_PERIODIC)&&(p_generator->period==PERIOD_HZ100))
 556:	91 30       	cpi	r25, 0x01	; 1
 558:	09 f4       	brne	.+2      	; 0x55c <__stack+0x47d>
 55a:	40 c0       	rjmp	.+128    	; 0x5dc <__stack+0x4fd>
			{
				p_generator->period=PERIOD_HZ1000;
			}
			else if ((p_generator->regime==GEN_PERIODIC)&&(p_generator->period==PERIOD_HZ1000))
 55c:	92 30       	cpi	r25, 0x02	; 2
 55e:	09 f0       	breq	.+2      	; 0x562 <__stack+0x483>
 560:	09 cf       	rjmp	.-494    	; 0x374 <__stack+0x295>
			{
				p_generator->regime=GEN_MANUAL;
 562:	10 92 7a 00 	sts	0x007A, r1
 566:	06 cf       	rjmp	.-500    	; 0x374 <__stack+0x295>
			{
				OCR1=(uint16_t)((7*(uint32_t)ICR1)>>3);
			}
			else if (p_generator->duration==DURATION_50)
			{
				OCR1=(uint16_t)((uint32_t)ICR1>>1);
 568:	84 b5       	in	r24, 0x24	; 36
 56a:	95 b5       	in	r25, 0x25	; 37
 56c:	96 95       	lsr	r25
 56e:	87 95       	ror	r24
 570:	9b bd       	out	0x2b, r25	; 43
 572:	8a bd       	out	0x2a, r24	; 42
 574:	82 cf       	rjmp	.-252    	; 0x47a <__stack+0x39b>
				TCCR1B|=PRESCALER_1_MASK;
				ICR1=PERIOD_HZ1000_TICKS;
			}
			else if (p_generator->period==PERIOD_HZ100)
			{
				TCCR1B|=PRESCALER_8_MASK;
 576:	92 60       	ori	r25, 0x02	; 2
 578:	9e bd       	out	0x2e, r25	; 46
				ICR1=PERIOD_HZ100_TICKS;
 57a:	90 e1       	ldi	r25, 0x10	; 16
 57c:	a9 2e       	mov	r10, r25
 57e:	97 e2       	ldi	r25, 0x27	; 39
 580:	b9 2e       	mov	r11, r25
 582:	b5 bc       	out	0x25, r11	; 37
 584:	a4 bc       	out	0x24, r10	; 36
 586:	4f cf       	rjmp	.-354    	; 0x426 <__stack+0x347>
			}
			else
			{
				if (p_generator->period==PERIOD_HZ1000)
				{
					OCR1=(uint16_t)(5*(uint32_t)ICR1>>4);
 588:	84 b5       	in	r24, 0x24	; 36
 58a:	95 b5       	in	r25, 0x25	; 37
 58c:	4c 01       	movw	r8, r24
 58e:	a1 2c       	mov	r10, r1
 590:	b1 2c       	mov	r11, r1
 592:	24 01       	movw	r4, r8
 594:	35 01       	movw	r6, r10
 596:	44 0c       	add	r4, r4
 598:	55 1c       	adc	r5, r5
 59a:	66 1c       	adc	r6, r6
 59c:	77 1c       	adc	r7, r7
 59e:	44 0c       	add	r4, r4
 5a0:	55 1c       	adc	r5, r5
 5a2:	66 1c       	adc	r6, r6
 5a4:	77 1c       	adc	r7, r7
 5a6:	84 0c       	add	r8, r4
 5a8:	95 1c       	adc	r9, r5
 5aa:	a6 1c       	adc	r10, r6
 5ac:	b7 1c       	adc	r11, r7
 5ae:	94 e0       	ldi	r25, 0x04	; 4
 5b0:	b6 94       	lsr	r11
 5b2:	a7 94       	ror	r10
 5b4:	97 94       	ror	r9
 5b6:	87 94       	ror	r8
 5b8:	9a 95       	dec	r25
 5ba:	d1 f7       	brne	.-12     	; 0x5b0 <__stack+0x4d1>
 5bc:	9b bc       	out	0x2b, r9	; 43
 5be:	8a bc       	out	0x2a, r8	; 42
 5c0:	5c cf       	rjmp	.-328    	; 0x47a <__stack+0x39b>
				}
				else if (p_generator->period==PERIOD_HZ100)
				{
					OCR1=(uint16_t)((uint32_t)ICR1>>5);
 5c2:	84 b5       	in	r24, 0x24	; 36
 5c4:	95 b5       	in	r25, 0x25	; 37
 5c6:	96 95       	lsr	r25
 5c8:	87 95       	ror	r24
 5ca:	92 95       	swap	r25
 5cc:	82 95       	swap	r24
 5ce:	8f 70       	andi	r24, 0x0F	; 15
 5d0:	89 27       	eor	r24, r25
 5d2:	9f 70       	andi	r25, 0x0F	; 15
 5d4:	89 27       	eor	r24, r25
 5d6:	9b bd       	out	0x2b, r25	; 43
 5d8:	8a bd       	out	0x2a, r24	; 42
 5da:	4f cf       	rjmp	.-354    	; 0x47a <__stack+0x39b>
			{
				p_generator->period=PERIOD_HZ100;
			}
			else if ((p_generator->regime==GEN_PERIODIC)&&(p_generator->period==PERIOD_HZ100))
			{
				p_generator->period=PERIOD_HZ1000;
 5dc:	e0 92 7c 00 	sts	0x007C, r14
 5e0:	c9 ce       	rjmp	.-622    	; 0x374 <__stack+0x295>
			{
				if (p_generator->duration==DURATION_US320)
				{
					p_generator->duration=DURATION_50;
				}
				else if (p_generator->duration==DURATION_50)
 5e2:	91 30       	cpi	r25, 0x01	; 1
 5e4:	19 f0       	breq	.+6      	; 0x5ec <__stack+0x50d>
				{
					p_generator->duration=DURATION_90;
				}
				else
				{
					p_generator->duration=DURATION_US320;
 5e6:	10 92 7b 00 	sts	0x007B, r1
 5ea:	65 cf       	rjmp	.-310    	; 0x4b6 <__stack+0x3d7>
				{
					p_generator->duration=DURATION_50;
				}
				else if (p_generator->duration==DURATION_50)
				{
					p_generator->duration=DURATION_90;
 5ec:	e0 92 7b 00 	sts	0x007B, r14
 5f0:	62 cf       	rjmp	.-316    	; 0x4b6 <__stack+0x3d7>

000005f2 <_exit>:
 5f2:	f8 94       	cli

000005f4 <__stop_program>:
 5f4:	ff cf       	rjmp	.-2      	; 0x5f4 <__stop_program>
