
Tiny2313 simple generator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000050a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000050a  0000059e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  00800062  00800062  000005a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000012f  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000c9  00000000  00000000  00000787  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000264  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00000ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000015f  00000000  00000000  00000b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003f  00000000  00000000  00000ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00000d22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	3b c0       	rjmp	.+118    	; 0x92 <__vector_13>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ea e0       	ldi	r30, 0x0A	; 10
  36:	f5 e0       	ldi	r31, 0x05	; 5
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_L__+0x1>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a2 36       	cpi	r26, 0x62	; 98
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	a2 e6       	ldi	r26, 0x62	; 98
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a9 38       	cpi	r26, 0x89	; 137
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	2d d2       	rcall	.+1114   	; 0x4b0 <main>
  56:	57 c2       	rjmp	.+1198   	; 0x506 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <Sync>:
volatile static uint8_t Button0State=MANUAL,Button1State=uS100;
volatile uint32_t microsecond_timer=0, duration_timer=0, period_timer=0, duration_timer_count=0, period_timer_count=0;  
uint32_t st_millis(void);

PT_THREAD(Sync(struct pt *pt))
{
  5a:	fc 01       	movw	r30, r24
	PT_BEGIN(pt);
  5c:	80 81       	ld	r24, Z
  5e:	91 81       	ldd	r25, Z+1	; 0x01
  60:	89 2b       	or	r24, r25
  62:	99 f4       	brne	.+38     	; 0x8a <Sync+0x30>
	//PT_SEM_SIGNAL(pt, &manual_pulse); //устанавливает 1 в manual_pulse, сигнализируя что кнопки больше не опрашивались в другом пропотоке
	PORTD&=~_BV(OUT_PIN); //устанавливаем 0 на выходе
  64:	94 98       	cbi	0x12, 4	; 18
	if (((PIN(BUTTON1_PORT)&(_BV(BUTTON1_PIN)))==0))
  66:	86 99       	sbic	0x10, 6	; 16
  68:	0c c0       	rjmp	.+24     	; 0x82 <Sync+0x28>
	{
		PORTD|=_BV(OUT_PIN); //устанавливаем 1 на выходе
  6a:	94 9a       	sbi	0x12, 4	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6c:	8d e0       	ldi	r24, 0x0D	; 13
  6e:	8a 95       	dec	r24
  70:	f1 f7       	brne	.-4      	; 0x6e <Sync+0x14>
  72:	00 00       	nop
		_delay_us(5); //держим 1 на пине 80 микросекунд
		PORTD&=~_BV(OUT_PIN); //сбрасываем выход в 0
  74:	94 98       	cbi	0x12, 4	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  76:	8f e1       	ldi	r24, 0x1F	; 31
  78:	9e e4       	ldi	r25, 0x4E	; 78
  7a:	01 97       	sbiw	r24, 0x01	; 1
  7c:	f1 f7       	brne	.-4      	; 0x7a <Sync+0x20>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <Sync+0x26>
  80:	00 00       	nop
		_delay_ms(10); //задержка перед следующим срабатыванием
	}
	PT_EXIT(pt);
  82:	11 82       	std	Z+1, r1	; 0x01
  84:	10 82       	st	Z, r1
  86:	82 e0       	ldi	r24, 0x02	; 2
  88:	08 95       	ret
	PT_END(pt);
  8a:	11 82       	std	Z+1, r1	; 0x01
  8c:	10 82       	st	Z, r1
  8e:	83 e0       	ldi	r24, 0x03	; 3
}
  90:	08 95       	ret

00000092 <__vector_13>:
		//PT_WAIT_UNTIL(pt,(st_millis()-but_timer)>=1000);
	}
	PT_END(pt);
}
ISR(TIMER0_COMPA_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	4f 93       	push	r20
  9e:	5f 93       	push	r21
  a0:	6f 93       	push	r22
  a2:	7f 93       	push	r23
  a4:	8f 93       	push	r24
  a6:	9f 93       	push	r25
  a8:	af 93       	push	r26
  aa:	bf 93       	push	r27
	if (Button0State!=MANUAL)
  ac:	80 91 7e 00 	lds	r24, 0x007E
  b0:	88 23       	and	r24, r24
  b2:	09 f4       	brne	.+2      	; 0xb6 <__vector_13+0x24>
  b4:	64 c0       	rjmp	.+200    	; 0x17e <__stack+0x9f>
	{
		if (duration_timer_count<duration_timer) duration_timer_count++;
  b6:	40 91 6e 00 	lds	r20, 0x006E
  ba:	50 91 6f 00 	lds	r21, 0x006F
  be:	60 91 70 00 	lds	r22, 0x0070
  c2:	70 91 71 00 	lds	r23, 0x0071
  c6:	80 91 76 00 	lds	r24, 0x0076
  ca:	90 91 77 00 	lds	r25, 0x0077
  ce:	a0 91 78 00 	lds	r26, 0x0078
  d2:	b0 91 79 00 	lds	r27, 0x0079
  d6:	48 17       	cp	r20, r24
  d8:	59 07       	cpc	r21, r25
  da:	6a 07       	cpc	r22, r26
  dc:	7b 07       	cpc	r23, r27
  de:	a0 f4       	brcc	.+40     	; 0x108 <__stack+0x29>
  e0:	80 91 6e 00 	lds	r24, 0x006E
  e4:	90 91 6f 00 	lds	r25, 0x006F
  e8:	a0 91 70 00 	lds	r26, 0x0070
  ec:	b0 91 71 00 	lds	r27, 0x0071
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	a1 1d       	adc	r26, r1
  f4:	b1 1d       	adc	r27, r1
  f6:	80 93 6e 00 	sts	0x006E, r24
  fa:	90 93 6f 00 	sts	0x006F, r25
  fe:	a0 93 70 00 	sts	0x0070, r26
 102:	b0 93 71 00 	sts	0x0071, r27
 106:	01 c0       	rjmp	.+2      	; 0x10a <__stack+0x2b>
		else (PORTD&=(~_BV(OUT_PIN))); //сбросить пин в 0
 108:	94 98       	cbi	0x12, 4	; 18
		if (period_timer_count<period_timer) period_timer_count++;
 10a:	40 91 6a 00 	lds	r20, 0x006A
 10e:	50 91 6b 00 	lds	r21, 0x006B
 112:	60 91 6c 00 	lds	r22, 0x006C
 116:	70 91 6d 00 	lds	r23, 0x006D
 11a:	80 91 72 00 	lds	r24, 0x0072
 11e:	90 91 73 00 	lds	r25, 0x0073
 122:	a0 91 74 00 	lds	r26, 0x0074
 126:	b0 91 75 00 	lds	r27, 0x0075
 12a:	48 17       	cp	r20, r24
 12c:	59 07       	cpc	r21, r25
 12e:	6a 07       	cpc	r22, r26
 130:	7b 07       	cpc	r23, r27
 132:	a0 f4       	brcc	.+40     	; 0x15c <__stack+0x7d>
 134:	80 91 6a 00 	lds	r24, 0x006A
 138:	90 91 6b 00 	lds	r25, 0x006B
 13c:	a0 91 6c 00 	lds	r26, 0x006C
 140:	b0 91 6d 00 	lds	r27, 0x006D
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	a1 1d       	adc	r26, r1
 148:	b1 1d       	adc	r27, r1
 14a:	80 93 6a 00 	sts	0x006A, r24
 14e:	90 93 6b 00 	sts	0x006B, r25
 152:	a0 93 6c 00 	sts	0x006C, r26
 156:	b0 93 6d 00 	sts	0x006D, r27
 15a:	11 c0       	rjmp	.+34     	; 0x17e <__stack+0x9f>
		else {
			PORTD|=(_BV(OUT_PIN)); //установить пин 1
 15c:	94 9a       	sbi	0x12, 4	; 18
			period_timer_count=0;
 15e:	10 92 6a 00 	sts	0x006A, r1
 162:	10 92 6b 00 	sts	0x006B, r1
 166:	10 92 6c 00 	sts	0x006C, r1
 16a:	10 92 6d 00 	sts	0x006D, r1
			duration_timer_count=0;
 16e:	10 92 6e 00 	sts	0x006E, r1
 172:	10 92 6f 00 	sts	0x006F, r1
 176:	10 92 70 00 	sts	0x0070, r1
 17a:	10 92 71 00 	sts	0x0071, r1
		}
	}
	microsecond_timer++;
 17e:	80 91 7a 00 	lds	r24, 0x007A
 182:	90 91 7b 00 	lds	r25, 0x007B
 186:	a0 91 7c 00 	lds	r26, 0x007C
 18a:	b0 91 7d 00 	lds	r27, 0x007D
 18e:	01 96       	adiw	r24, 0x01	; 1
 190:	a1 1d       	adc	r26, r1
 192:	b1 1d       	adc	r27, r1
 194:	80 93 7a 00 	sts	0x007A, r24
 198:	90 93 7b 00 	sts	0x007B, r25
 19c:	a0 93 7c 00 	sts	0x007C, r26
 1a0:	b0 93 7d 00 	sts	0x007D, r27
	if (microsecond_timer>=Ms1) {
 1a4:	80 91 7a 00 	lds	r24, 0x007A
 1a8:	90 91 7b 00 	lds	r25, 0x007B
 1ac:	a0 91 7c 00 	lds	r26, 0x007C
 1b0:	b0 91 7d 00 	lds	r27, 0x007D
 1b4:	88 97       	sbiw	r24, 0x28	; 40
 1b6:	a1 05       	cpc	r26, r1
 1b8:	b1 05       	cpc	r27, r1
 1ba:	d8 f0       	brcs	.+54     	; 0x1f2 <__stack+0x113>
		st_timer0_millis++;
 1bc:	80 91 7f 00 	lds	r24, 0x007F
 1c0:	90 91 80 00 	lds	r25, 0x0080
 1c4:	a0 91 81 00 	lds	r26, 0x0081
 1c8:	b0 91 82 00 	lds	r27, 0x0082
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	a1 1d       	adc	r26, r1
 1d0:	b1 1d       	adc	r27, r1
 1d2:	80 93 7f 00 	sts	0x007F, r24
 1d6:	90 93 80 00 	sts	0x0080, r25
 1da:	a0 93 81 00 	sts	0x0081, r26
 1de:	b0 93 82 00 	sts	0x0082, r27
		microsecond_timer=0;
 1e2:	10 92 7a 00 	sts	0x007A, r1
 1e6:	10 92 7b 00 	sts	0x007B, r1
 1ea:	10 92 7c 00 	sts	0x007C, r1
 1ee:	10 92 7d 00 	sts	0x007D, r1
	}
}
 1f2:	bf 91       	pop	r27
 1f4:	af 91       	pop	r26
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	7f 91       	pop	r23
 1fc:	6f 91       	pop	r22
 1fe:	5f 91       	pop	r21
 200:	4f 91       	pop	r20
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <st_millis>:
uint32_t st_millis(void)
{
	uint32_t m;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 20c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 20e:	f8 94       	cli
	{
		m = st_timer0_millis;
 210:	60 91 7f 00 	lds	r22, 0x007F
 214:	70 91 80 00 	lds	r23, 0x0080
 218:	80 91 81 00 	lds	r24, 0x0081
 21c:	90 91 82 00 	lds	r25, 0x0082
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 220:	2f bf       	out	0x3f, r18	; 63
	}

	return m;
}
 222:	08 95       	ret

00000224 <Switch>:
	}
	PT_EXIT(pt);
	PT_END(pt);
}
PT_THREAD(Switch(struct pt *pt))
{
 224:	0f 93       	push	r16
 226:	1f 93       	push	r17
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	ec 01       	movw	r28, r24
	static volatile uint32_t switch_timer=0; 
	PT_BEGIN(pt);
 22e:	88 81       	ld	r24, Y
 230:	99 81       	ldd	r25, Y+1	; 0x01
 232:	8c 37       	cpi	r24, 0x7C	; 124
 234:	91 05       	cpc	r25, r1
 236:	51 f0       	breq	.+20     	; 0x24c <Switch+0x28>
 238:	80 38       	cpi	r24, 0x80	; 128
 23a:	91 05       	cpc	r25, r1
 23c:	41 f1       	breq	.+80     	; 0x28e <Switch+0x6a>
 23e:	89 2b       	or	r24, r25
 240:	09 f0       	breq	.+2      	; 0x244 <Switch+0x20>
 242:	c5 c0       	rjmp	.+394    	; 0x3ce <Switch+0x1aa>
	PT_WAIT_UNTIL(pt,(st_millis()-switch_timer)>=10);//запуск протопотока каждые 10мсек
 244:	8c e7       	ldi	r24, 0x7C	; 124
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	99 83       	std	Y+1, r25	; 0x01
 24a:	88 83       	st	Y, r24
 24c:	df df       	rcall	.-66     	; 0x20c <st_millis>
 24e:	00 91 66 00 	lds	r16, 0x0066
 252:	10 91 67 00 	lds	r17, 0x0067
 256:	20 91 68 00 	lds	r18, 0x0068
 25a:	30 91 69 00 	lds	r19, 0x0069
 25e:	dc 01       	movw	r26, r24
 260:	cb 01       	movw	r24, r22
 262:	80 1b       	sub	r24, r16
 264:	91 0b       	sbc	r25, r17
 266:	a2 0b       	sbc	r26, r18
 268:	b3 0b       	sbc	r27, r19
 26a:	0a 97       	sbiw	r24, 0x0a	; 10
 26c:	a1 05       	cpc	r26, r1
 26e:	b1 05       	cpc	r27, r1
 270:	10 f4       	brcc	.+4      	; 0x276 <Switch+0x52>
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	af c0       	rjmp	.+350    	; 0x3d4 <Switch+0x1b0>
	if (Button0State==MANUAL) 
 276:	80 91 7e 00 	lds	r24, 0x007E
 27a:	81 11       	cpse	r24, r1
 27c:	0f c0       	rjmp	.+30     	; 0x29c <Switch+0x78>
	{
		
		PT_SPAWN(pt, &Sync_pt, Sync(&Sync_pt));//вызываем дочерний протопоток ручного или синхро запуска
 27e:	10 92 84 00 	sts	0x0084, r1
 282:	10 92 83 00 	sts	0x0083, r1
 286:	80 e8       	ldi	r24, 0x80	; 128
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	99 83       	std	Y+1, r25	; 0x01
 28c:	88 83       	st	Y, r24
 28e:	83 e8       	ldi	r24, 0x83	; 131
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	e3 de       	rcall	.-570    	; 0x5a <Sync>
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	68 f3       	brcs	.-38     	; 0x272 <Switch+0x4e>
		//Макс частота нажатия кнопки ~2Гц
		PORTD|=_BV(PD2);//зажигаем оба светодиода
 298:	92 9a       	sbi	0x12, 2	; 18
		PORTD|=_BV(PD3);
 29a:	93 9a       	sbi	0x12, 3	; 18
	}
	if (Button0State==Hz1) 
 29c:	80 91 7e 00 	lds	r24, 0x007E
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	61 f5       	brne	.+88     	; 0x2fc <Switch+0xd8>
	{
		if (Button1State==uS100)
 2a4:	80 91 60 00 	lds	r24, 0x0060
 2a8:	81 30       	cpi	r24, 0x01	; 1
 2aa:	29 f4       	brne	.+10     	; 0x2b6 <Switch+0x92>
		{
			duration_timer=5; period_timer=62500;
 2ac:	85 e0       	ldi	r24, 0x05	; 5
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	a0 e0       	ldi	r26, 0x00	; 0
 2b2:	b0 e0       	ldi	r27, 0x00	; 0
 2b4:	0d c0       	rjmp	.+26     	; 0x2d0 <Switch+0xac>
		}
		else if (Button1State==Duty_50)
 2b6:	80 91 60 00 	lds	r24, 0x0060
 2ba:	82 30       	cpi	r24, 0x02	; 2
 2bc:	29 f4       	brne	.+10     	; 0x2c8 <Switch+0xa4>
		{
			duration_timer=31500; period_timer=62500;
 2be:	8c e0       	ldi	r24, 0x0C	; 12
 2c0:	9b e7       	ldi	r25, 0x7B	; 123
 2c2:	a0 e0       	ldi	r26, 0x00	; 0
 2c4:	b0 e0       	ldi	r27, 0x00	; 0
 2c6:	04 c0       	rjmp	.+8      	; 0x2d0 <Switch+0xac>
		}
		else 
		{
			duration_timer=56250; period_timer=62500;
 2c8:	8a eb       	ldi	r24, 0xBA	; 186
 2ca:	9b ed       	ldi	r25, 0xDB	; 219
 2cc:	a0 e0       	ldi	r26, 0x00	; 0
 2ce:	b0 e0       	ldi	r27, 0x00	; 0
 2d0:	80 93 76 00 	sts	0x0076, r24
 2d4:	90 93 77 00 	sts	0x0077, r25
 2d8:	a0 93 78 00 	sts	0x0078, r26
 2dc:	b0 93 79 00 	sts	0x0079, r27
 2e0:	84 e2       	ldi	r24, 0x24	; 36
 2e2:	94 ef       	ldi	r25, 0xF4	; 244
 2e4:	a0 e0       	ldi	r26, 0x00	; 0
 2e6:	b0 e0       	ldi	r27, 0x00	; 0
 2e8:	80 93 72 00 	sts	0x0072, r24
 2ec:	90 93 73 00 	sts	0x0073, r25
 2f0:	a0 93 74 00 	sts	0x0074, r26
 2f4:	b0 93 75 00 	sts	0x0075, r27
		}
		PORTD|=_BV(PD2);//диод 2 горит
 2f8:	92 9a       	sbi	0x12, 2	; 18
		PORTD&=~_BV(PD3);//диод 3 не горит
 2fa:	93 98       	cbi	0x12, 3	; 18
	} 
	if (Button0State==Hz100)
 2fc:	80 91 7e 00 	lds	r24, 0x007E
 300:	82 30       	cpi	r24, 0x02	; 2
 302:	61 f5       	brne	.+88     	; 0x35c <Switch+0x138>
	{
		if (Button1State==uS100)
 304:	80 91 60 00 	lds	r24, 0x0060
 308:	81 30       	cpi	r24, 0x01	; 1
 30a:	29 f4       	brne	.+10     	; 0x316 <Switch+0xf2>
		{
			duration_timer=5; period_timer=625;
 30c:	85 e0       	ldi	r24, 0x05	; 5
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	a0 e0       	ldi	r26, 0x00	; 0
 312:	b0 e0       	ldi	r27, 0x00	; 0
 314:	0d c0       	rjmp	.+26     	; 0x330 <Switch+0x10c>
		}
		else if (Button1State==Duty_50)
 316:	80 91 60 00 	lds	r24, 0x0060
 31a:	82 30       	cpi	r24, 0x02	; 2
 31c:	29 f4       	brne	.+10     	; 0x328 <Switch+0x104>
		{
			duration_timer=315; period_timer=625;
 31e:	8b e3       	ldi	r24, 0x3B	; 59
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	a0 e0       	ldi	r26, 0x00	; 0
 324:	b0 e0       	ldi	r27, 0x00	; 0
 326:	04 c0       	rjmp	.+8      	; 0x330 <Switch+0x10c>
		}
		else 
		{
			duration_timer=562; period_timer=625;
 328:	82 e3       	ldi	r24, 0x32	; 50
 32a:	92 e0       	ldi	r25, 0x02	; 2
 32c:	a0 e0       	ldi	r26, 0x00	; 0
 32e:	b0 e0       	ldi	r27, 0x00	; 0
 330:	80 93 76 00 	sts	0x0076, r24
 334:	90 93 77 00 	sts	0x0077, r25
 338:	a0 93 78 00 	sts	0x0078, r26
 33c:	b0 93 79 00 	sts	0x0079, r27
 340:	81 e7       	ldi	r24, 0x71	; 113
 342:	92 e0       	ldi	r25, 0x02	; 2
 344:	a0 e0       	ldi	r26, 0x00	; 0
 346:	b0 e0       	ldi	r27, 0x00	; 0
 348:	80 93 72 00 	sts	0x0072, r24
 34c:	90 93 73 00 	sts	0x0073, r25
 350:	a0 93 74 00 	sts	0x0074, r26
 354:	b0 93 75 00 	sts	0x0075, r27
		}
		PORTD&=~_BV(PD2);//диод 2 не горит
 358:	92 98       	cbi	0x12, 2	; 18
		PORTD|=_BV(PD3);//диод 3  горит
 35a:	93 9a       	sbi	0x12, 3	; 18
	}
	if (Button0State==Hz1000)
 35c:	80 91 7e 00 	lds	r24, 0x007E
 360:	83 30       	cpi	r24, 0x03	; 3
 362:	61 f5       	brne	.+88     	; 0x3bc <Switch+0x198>
	{
		if (Button1State==uS100)
 364:	80 91 60 00 	lds	r24, 0x0060
 368:	81 30       	cpi	r24, 0x01	; 1
 36a:	29 f4       	brne	.+10     	; 0x376 <Switch+0x152>
		{
			duration_timer=5; period_timer=62;
 36c:	85 e0       	ldi	r24, 0x05	; 5
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	a0 e0       	ldi	r26, 0x00	; 0
 372:	b0 e0       	ldi	r27, 0x00	; 0
 374:	0d c0       	rjmp	.+26     	; 0x390 <Switch+0x16c>
		}
		else if (Button1State==Duty_50)
 376:	80 91 60 00 	lds	r24, 0x0060
 37a:	82 30       	cpi	r24, 0x02	; 2
 37c:	29 f4       	brne	.+10     	; 0x388 <Switch+0x164>
		{
			duration_timer=31; period_timer=62;
 37e:	8f e1       	ldi	r24, 0x1F	; 31
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	a0 e0       	ldi	r26, 0x00	; 0
 384:	b0 e0       	ldi	r27, 0x00	; 0
 386:	04 c0       	rjmp	.+8      	; 0x390 <Switch+0x16c>
		}
		else
		{
			duration_timer=56; period_timer=62;
 388:	88 e3       	ldi	r24, 0x38	; 56
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	a0 e0       	ldi	r26, 0x00	; 0
 38e:	b0 e0       	ldi	r27, 0x00	; 0
 390:	80 93 76 00 	sts	0x0076, r24
 394:	90 93 77 00 	sts	0x0077, r25
 398:	a0 93 78 00 	sts	0x0078, r26
 39c:	b0 93 79 00 	sts	0x0079, r27
 3a0:	8e e3       	ldi	r24, 0x3E	; 62
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	a0 e0       	ldi	r26, 0x00	; 0
 3a6:	b0 e0       	ldi	r27, 0x00	; 0
 3a8:	80 93 72 00 	sts	0x0072, r24
 3ac:	90 93 73 00 	sts	0x0073, r25
 3b0:	a0 93 74 00 	sts	0x0074, r26
 3b4:	b0 93 75 00 	sts	0x0075, r27
		}
		PORTD&=~_BV(PD2);//гасим оба  светодиода
 3b8:	92 98       	cbi	0x12, 2	; 18
		PORTD&=~_BV(PD3);
 3ba:	93 98       	cbi	0x12, 3	; 18
	}
	switch_timer=st_millis();
 3bc:	27 df       	rcall	.-434    	; 0x20c <st_millis>
 3be:	60 93 66 00 	sts	0x0066, r22
 3c2:	70 93 67 00 	sts	0x0067, r23
 3c6:	80 93 68 00 	sts	0x0068, r24
 3ca:	90 93 69 00 	sts	0x0069, r25
	PT_END(pt);
 3ce:	19 82       	std	Y+1, r1	; 0x01
 3d0:	18 82       	st	Y, r1
 3d2:	83 e0       	ldi	r24, 0x03	; 3
}
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	1f 91       	pop	r17
 3da:	0f 91       	pop	r16
 3dc:	08 95       	ret

000003de <Buttons>:
PT_THREAD(Buttons(struct pt *pt))
{
 3de:	0f 93       	push	r16
 3e0:	1f 93       	push	r17
 3e2:	cf 93       	push	r28
 3e4:	df 93       	push	r29
 3e6:	ec 01       	movw	r28, r24
	static uint32_t but_timer=0;
	//static uint16_t val0, val1=0;
	PT_BEGIN(pt);
 3e8:	88 81       	ld	r24, Y
 3ea:	99 81       	ldd	r25, Y+1	; 0x01
 3ec:	00 97       	sbiw	r24, 0x00	; 0
 3ee:	21 f0       	breq	.+8      	; 0x3f8 <Buttons+0x1a>
 3f0:	80 3c       	cpi	r24, 0xC0	; 192
 3f2:	91 05       	cpc	r25, r1
 3f4:	29 f0       	breq	.+10     	; 0x400 <Buttons+0x22>
 3f6:	52 c0       	rjmp	.+164    	; 0x49c <Buttons+0xbe>
	PT_WAIT_UNTIL(pt, (st_millis()-but_timer)>=80);
 3f8:	80 ec       	ldi	r24, 0xC0	; 192
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	99 83       	std	Y+1, r25	; 0x01
 3fe:	88 83       	st	Y, r24
 400:	05 df       	rcall	.-502    	; 0x20c <st_millis>
 402:	00 91 62 00 	lds	r16, 0x0062
 406:	10 91 63 00 	lds	r17, 0x0063
 40a:	20 91 64 00 	lds	r18, 0x0064
 40e:	30 91 65 00 	lds	r19, 0x0065
 412:	dc 01       	movw	r26, r24
 414:	cb 01       	movw	r24, r22
 416:	80 1b       	sub	r24, r16
 418:	91 0b       	sbc	r25, r17
 41a:	a2 0b       	sbc	r26, r18
 41c:	b3 0b       	sbc	r27, r19
 41e:	80 35       	cpi	r24, 0x50	; 80
 420:	91 05       	cpc	r25, r1
 422:	a1 05       	cpc	r26, r1
 424:	b1 05       	cpc	r27, r1
 426:	f0 f1       	brcs	.+124    	; 0x4a4 <Buttons+0xc6>
	but_timer=st_millis();
 428:	f1 de       	rcall	.-542    	; 0x20c <st_millis>
 42a:	60 93 62 00 	sts	0x0062, r22
 42e:	70 93 63 00 	sts	0x0063, r23
 432:	80 93 64 00 	sts	0x0064, r24
 436:	90 93 65 00 	sts	0x0065, r25
	//if (((PIN(BUTTON0_PORT)&(_BV(BUTTON0_PIN)))==0)&&(val0<=10))
	if ((PIN(BUTTON0_PORT)&(_BV(BUTTON0_PIN)))==0)
 43a:	85 99       	sbic	0x10, 5	; 16
 43c:	1a c0       	rjmp	.+52     	; 0x472 <Buttons+0x94>
	{
		if (Button0State==MANUAL) Button0State=Hz1; //при долгом нажатии кн0, проиходит смена периода
 43e:	80 91 7e 00 	lds	r24, 0x007E
 442:	81 11       	cpse	r24, r1
 444:	02 c0       	rjmp	.+4      	; 0x44a <Buttons+0x6c>
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	05 c0       	rjmp	.+10     	; 0x454 <Buttons+0x76>
		else if (Button0State==Hz1) Button0State=Hz100;
 44a:	80 91 7e 00 	lds	r24, 0x007E
 44e:	81 30       	cpi	r24, 0x01	; 1
 450:	21 f4       	brne	.+8      	; 0x45a <Buttons+0x7c>
 452:	82 e0       	ldi	r24, 0x02	; 2
 454:	80 93 7e 00 	sts	0x007E, r24
 458:	0c c0       	rjmp	.+24     	; 0x472 <Buttons+0x94>
		else if (Button0State==Hz100) Button0State=Hz1000;
 45a:	80 91 7e 00 	lds	r24, 0x007E
 45e:	82 30       	cpi	r24, 0x02	; 2
 460:	11 f4       	brne	.+4      	; 0x466 <Buttons+0x88>
 462:	83 e0       	ldi	r24, 0x03	; 3
 464:	f7 cf       	rjmp	.-18     	; 0x454 <Buttons+0x76>
		else if (Button0State==Hz1000) Button0State=MANUAL;
 466:	80 91 7e 00 	lds	r24, 0x007E
 46a:	83 30       	cpi	r24, 0x03	; 3
 46c:	11 f4       	brne	.+4      	; 0x472 <Buttons+0x94>
 46e:	10 92 7e 00 	sts	0x007E, r1
			//ButtonState=BUTTON_LONG_ON; - это сейчас не нужно, вдруг пригодится обрабатывать долгие нажатия
			//PT_WAIT_UNTIL(pt,(st_millis()-but_timer)>=1000);
		}
		val1=0;
	}*/
	if ((PIN(BUTTON1_PORT)&(_BV(BUTTON1_PIN)))==0)
 472:	86 99       	sbic	0x10, 6	; 16
 474:	13 c0       	rjmp	.+38     	; 0x49c <Buttons+0xbe>
	{
		if (Button1State==uS100) Button1State=Duty_50; //долгое нажатие кн1 - смена длительности
 476:	80 91 60 00 	lds	r24, 0x0060
 47a:	81 30       	cpi	r24, 0x01	; 1
 47c:	11 f4       	brne	.+4      	; 0x482 <Buttons+0xa4>
 47e:	82 e0       	ldi	r24, 0x02	; 2
 480:	0b c0       	rjmp	.+22     	; 0x498 <Buttons+0xba>
		else if (Button1State==Duty_50) Button1State=Duty_90;
 482:	80 91 60 00 	lds	r24, 0x0060
 486:	82 30       	cpi	r24, 0x02	; 2
 488:	11 f4       	brne	.+4      	; 0x48e <Buttons+0xb0>
 48a:	83 e0       	ldi	r24, 0x03	; 3
 48c:	05 c0       	rjmp	.+10     	; 0x498 <Buttons+0xba>
		else if (Button1State==Duty_90) Button1State=uS100;
 48e:	80 91 60 00 	lds	r24, 0x0060
 492:	83 30       	cpi	r24, 0x03	; 3
 494:	19 f4       	brne	.+6      	; 0x49c <Buttons+0xbe>
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	80 93 60 00 	sts	0x0060, r24
		//ButtonState=BUTTON_LONG_ON; - это сейчас не нужно, вдруг пригодится обрабатывать долгие нажатия
		//PT_WAIT_UNTIL(pt,(st_millis()-but_timer)>=1000);
	}
	PT_END(pt);
 49c:	19 82       	std	Y+1, r1	; 0x01
 49e:	18 82       	st	Y, r1
 4a0:	83 e0       	ldi	r24, 0x03	; 3
 4a2:	01 c0       	rjmp	.+2      	; 0x4a6 <Buttons+0xc8>
PT_THREAD(Buttons(struct pt *pt))
{
	static uint32_t but_timer=0;
	//static uint16_t val0, val1=0;
	PT_BEGIN(pt);
	PT_WAIT_UNTIL(pt, (st_millis()-but_timer)>=80);
 4a4:	80 e0       	ldi	r24, 0x00	; 0
		else if (Button1State==Duty_90) Button1State=uS100;
		//ButtonState=BUTTON_LONG_ON; - это сейчас не нужно, вдруг пригодится обрабатывать долгие нажатия
		//PT_WAIT_UNTIL(pt,(st_millis()-but_timer)>=1000);
	}
	PT_END(pt);
}
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	1f 91       	pop	r17
 4ac:	0f 91       	pop	r16
 4ae:	08 95       	ret

000004b0 <main>:
}

int main(void)
{

	DDRD=0b00011110; //PD6 - button1, PD5 - button0, PD4 - OUT, PD3 - LED1, PD2- LED0, PD1 -TX, PD0 - RX
 4b0:	8e e1       	ldi	r24, 0x1E	; 30
 4b2:	81 bb       	out	0x11, r24	; 17
	DDRB=0b11111111; //all pins on portb are outputs
 4b4:	8f ef       	ldi	r24, 0xFF	; 255
 4b6:	87 bb       	out	0x17, r24	; 23
	PORTD=0b01100000;//100k pull-up PD6, PD5
 4b8:	80 e6       	ldi	r24, 0x60	; 96
 4ba:	82 bb       	out	0x12, r24	; 18
	PORTB=0;
 4bc:	18 ba       	out	0x18, r1	; 24
	// Set prescaler to 64
	//TCCR0 |= (_BV(CS01) | _BV(CS00));
	// Enable interrupt
	//TIMSK |= _BV(TOIE0) | _BV(OCIE1A);
	// Set default value
	TCCR0A=0b00000010;//CTC operation of timer
 4be:	82 e0       	ldi	r24, 0x02	; 2
 4c0:	80 bf       	out	0x30, r24	; 48
	TCCR0B=0b00000001;//Timer count from clk with no prescaler
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0; //обнуляем счетчик таймера
 4c6:	12 be       	out	0x32, r1	; 50
	OCR0A = 100;//прерывание каждые 100тиков, то есть каждые 25мкс
 4c8:	84 e6       	ldi	r24, 0x64	; 100
 4ca:	86 bf       	out	0x36, r24	; 54
	TIMSK |= _BV(OCIE0A);//разрешаем прерывание по совпадению TCNT0 с OCR0A
 4cc:	89 b7       	in	r24, 0x39	; 57
 4ce:	81 60       	ori	r24, 0x01	; 1
 4d0:	89 bf       	out	0x39, r24	; 57
	TCNT1=0;
	TIMSK=0;
	*/
	//PT_SEM_INIT(&manual_pulse, NOPULSE);
	
	PT_INIT(&Buttons_pt);
 4d2:	10 92 88 00 	sts	0x0088, r1
 4d6:	10 92 87 00 	sts	0x0087, r1
	PT_INIT(&Switch_pt);
 4da:	10 92 86 00 	sts	0x0086, r1
 4de:	10 92 85 00 	sts	0x0085, r1
	//PT_INIT(&Sync_pt);

	wdt_reset(); //сбрасываем собаку на всякий пожарный
 4e2:	a8 95       	wdr
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
 4e4:	9f e0       	ldi	r25, 0x0F	; 15
 4e6:	88 e1       	ldi	r24, 0x18	; 24
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	f8 94       	cli
 4ec:	a8 95       	wdr
 4ee:	81 bd       	out	0x21, r24	; 33
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	91 bd       	out	0x21, r25	; 33
	wdt_enable(WDTO_2S); //запускаем собаку с перидом 2с
	
	sei();
 4f4:	78 94       	sei

    while(1)
    {
        PT_SCHEDULE(Buttons(&Buttons_pt));
 4f6:	87 e8       	ldi	r24, 0x87	; 135
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	71 df       	rcall	.-286    	; 0x3de <Buttons>
		PT_SCHEDULE(Switch(&Switch_pt));
 4fc:	85 e8       	ldi	r24, 0x85	; 133
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	91 de       	rcall	.-734    	; 0x224 <Switch>
		wdt_reset(); //переодически сбрасываем собаку чтобы не улетететь в ресет
 502:	a8 95       	wdr
	 }
 504:	f8 cf       	rjmp	.-16     	; 0x4f6 <main+0x46>

00000506 <_exit>:
 506:	f8 94       	cli

00000508 <__stop_program>:
 508:	ff cf       	rjmp	.-2      	; 0x508 <__stop_program>
