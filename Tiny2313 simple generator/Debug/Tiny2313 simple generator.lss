
Tiny2313 simple generator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000466  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  00800060  00800060  000004da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000050c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000015b  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000df  00000000  00000000  000006ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000273  00000000  00000000  000007de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00000a54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000016f  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000069  00000000  00000000  00000cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	4e c0       	rjmp	.+156    	; 0xa6 <__vector_4>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__vector_13>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>
  22:	0f c0       	rjmp	.+30     	; 0x42 <__bad_interrupt>
  24:	0e c0       	rjmp	.+28     	; 0x42 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	ad 37       	cpi	r26, 0x7D	; 125
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	b8 d1       	rcall	.+880    	; 0x3b0 <main>
  40:	10 c2       	rjmp	.+1056   	; 0x462 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <st_millis>:
//Фукция выдачи текущего системного времени
uint32_t st_millis(void)
{
	uint32_t m;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  44:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  46:	f8 94       	cli
	{
		m = st_timer0_millis;
  48:	60 91 6d 00 	lds	r22, 0x006D
  4c:	70 91 6e 00 	lds	r23, 0x006E
  50:	80 91 6f 00 	lds	r24, 0x006F
  54:	90 91 70 00 	lds	r25, 0x0070
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
  58:	2f bf       	out	0x3f, r18	; 63
	}

	return m;
}
  5a:	08 95       	ret

0000005c <__vector_13>:


/*Обработчики прерываний*/
//Обработка прерывания по совпадению от таймера0, увеличивает системный таймер
ISR(TIMER0_COMPA_vect)
{
  5c:	1f 92       	push	r1
  5e:	0f 92       	push	r0
  60:	0f b6       	in	r0, 0x3f	; 63
  62:	0f 92       	push	r0
  64:	11 24       	eor	r1, r1
  66:	8f 93       	push	r24
  68:	9f 93       	push	r25
  6a:	af 93       	push	r26
  6c:	bf 93       	push	r27
	st_timer0_millis++;
  6e:	80 91 6d 00 	lds	r24, 0x006D
  72:	90 91 6e 00 	lds	r25, 0x006E
  76:	a0 91 6f 00 	lds	r26, 0x006F
  7a:	b0 91 70 00 	lds	r27, 0x0070
  7e:	01 96       	adiw	r24, 0x01	; 1
  80:	a1 1d       	adc	r26, r1
  82:	b1 1d       	adc	r27, r1
  84:	80 93 6d 00 	sts	0x006D, r24
  88:	90 93 6e 00 	sts	0x006E, r25
  8c:	a0 93 6f 00 	sts	0x006F, r26
  90:	b0 93 70 00 	sts	0x0070, r27
}
  94:	bf 91       	pop	r27
  96:	af 91       	pop	r26
  98:	9f 91       	pop	r25
  9a:	8f 91       	pop	r24
  9c:	0f 90       	pop	r0
  9e:	0f be       	out	0x3f, r0	; 63
  a0:	0f 90       	pop	r0
  a2:	1f 90       	pop	r1
  a4:	18 95       	reti

000000a6 <__vector_4>:
//Обработка прерывания по совпадению от таймера1
ISR(TIMER1_COMPA_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
	
}
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <Sync>:

/* Протопотоки */

//Дочерний протопоток, который отрабатывает ручной запуск
PT_THREAD(Sync(struct pt *pt))
{
  ba:	fc 01       	movw	r30, r24
	PT_BEGIN(pt);
  bc:	80 81       	ld	r24, Z
  be:	91 81       	ldd	r25, Z+1	; 0x01
  c0:	89 2b       	or	r24, r25
  c2:	a9 f4       	brne	.+42     	; 0xee <__stack+0xf>
	//PT_SEM_SIGNAL(pt, &manual_pulse); //устанавливает 1 в manual_pulse, сигнализируя что кнопки больше не опрашивались в другом пропотоке
	OUT_OFF; //устанавливаем 0 на выходе
  c4:	93 98       	cbi	0x12, 3	; 18
	if ((BUT1_PORT_PIN&(_BV(BUT1)))==0)
  c6:	86 99       	sbic	0x10, 6	; 16
  c8:	0e c0       	rjmp	.+28     	; 0xe6 <__stack+0x7>
	{
		LED0_ON;
  ca:	92 9a       	sbi	0x12, 2	; 18
		OUT_ON; //устанавливаем 1 на выходе
  cc:	93 9a       	sbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	8d e0       	ldi	r24, 0x0D	; 13
  d0:	8a 95       	dec	r24
  d2:	f1 f7       	brne	.-4      	; 0xd0 <Sync+0x16>
  d4:	00 00       	nop
		_delay_us(5); //держим 1 на пине 80 микросекунд
		OUT_OFF; //сбрасываем выход в 0
  d6:	93 98       	cbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	8f e1       	ldi	r24, 0x1F	; 31
  da:	9e e4       	ldi	r25, 0x4E	; 78
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <Sync+0x22>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <__stack+0x3>
  e2:	00 00       	nop
		_delay_ms(10); //задержка перед следующим срабатыванием
		LED0_OFF;
  e4:	92 98       	cbi	0x12, 2	; 18
	}
	PT_EXIT(pt);
  e6:	11 82       	std	Z+1, r1	; 0x01
  e8:	10 82       	st	Z, r1
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	08 95       	ret
	PT_END(pt);
  ee:	11 82       	std	Z+1, r1	; 0x01
  f0:	10 82       	st	Z, r1
  f2:	83 e0       	ldi	r24, 0x03	; 3
}
  f4:	08 95       	ret

000000f6 <Buttons>:

//Протопоток 1 - обработка нажатия кнопок, настройка режима генератора
PT_THREAD(Buttons(struct pt *pt))
{
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	ec 01       	movw	r28, r24
	static uint32_t but_timer=0;
	PT_BEGIN(pt);
 100:	88 81       	ld	r24, Y
 102:	99 81       	ldd	r25, Y+1	; 0x01
 104:	00 97       	sbiw	r24, 0x00	; 0
 106:	21 f0       	breq	.+8      	; 0x110 <Buttons+0x1a>
 108:	84 3d       	cpi	r24, 0xD4	; 212
 10a:	91 05       	cpc	r25, r1
 10c:	29 f0       	breq	.+10     	; 0x118 <Buttons+0x22>
 10e:	4c c0       	rjmp	.+152    	; 0x1a8 <Buttons+0xb2>
	PT_WAIT_UNTIL(pt, (st_millis()-but_timer)>=80);
 110:	84 ed       	ldi	r24, 0xD4	; 212
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	99 83       	std	Y+1, r25	; 0x01
 116:	88 83       	st	Y, r24
 118:	95 df       	rcall	.-214    	; 0x44 <st_millis>
 11a:	00 91 69 00 	lds	r16, 0x0069
 11e:	10 91 6a 00 	lds	r17, 0x006A
 122:	20 91 6b 00 	lds	r18, 0x006B
 126:	30 91 6c 00 	lds	r19, 0x006C
 12a:	dc 01       	movw	r26, r24
 12c:	cb 01       	movw	r24, r22
 12e:	80 1b       	sub	r24, r16
 130:	91 0b       	sbc	r25, r17
 132:	a2 0b       	sbc	r26, r18
 134:	b3 0b       	sbc	r27, r19
 136:	80 35       	cpi	r24, 0x50	; 80
 138:	91 05       	cpc	r25, r1
 13a:	a1 05       	cpc	r26, r1
 13c:	b1 05       	cpc	r27, r1
 13e:	c0 f1       	brcs	.+112    	; 0x1b0 <Buttons+0xba>
	but_timer=st_millis();
 140:	81 df       	rcall	.-254    	; 0x44 <st_millis>
 142:	60 93 69 00 	sts	0x0069, r22
 146:	70 93 6a 00 	sts	0x006A, r23
 14a:	80 93 6b 00 	sts	0x006B, r24
 14e:	90 93 6c 00 	sts	0x006C, r25
	if ((BUT0_PORT_PIN&(_BV(BUT0)))==0)
 152:	85 99       	sbic	0x10, 5	; 16
 154:	14 c0       	rjmp	.+40     	; 0x17e <Buttons+0x88>
	{
		if (p_generator->regime==GEN_MANUAL) 
 156:	80 91 7a 00 	lds	r24, 0x007A
 15a:	81 11       	cpse	r24, r1
 15c:	06 c0       	rjmp	.+12     	; 0x16a <Buttons+0x74>
		{
			p_generator->regime=GEN_PERIODIC; 
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 93 7a 00 	sts	0x007A, r24
			p_generator->period=PERIOD_HZ1;
 164:	10 92 7c 00 	sts	0x007C, r1
 168:	05 c0       	rjmp	.+10     	; 0x174 <Buttons+0x7e>
		} //при долгом нажатии кн0, проиходит смена периода
		else if ((p_generator->regime==GEN_PERIODIC)&&(p_generator->period=PERIOD_HZ1))
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	19 f5       	brne	.+70     	; 0x1b4 <Buttons+0xbe>
		{
			p_generator->period=PERIOD_HZ100;
		}
		else if ((p_generator->regime==GEN_PERIODIC)&&(p_generator->period=PERIOD_HZ100))
		{
			p_generator->period=PERIOD_HZ1000;
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	80 93 7c 00 	sts	0x007C, r24
		}
		else
		{
			p_generator->regime=GEN_MANUAL;
		}
		p_generator->state=GEN_OFF;
 174:	10 92 79 00 	sts	0x0079, r1
		GENERATOR_OFF;
 178:	89 b7       	in	r24, 0x39	; 57
 17a:	8f 7b       	andi	r24, 0xBF	; 191
 17c:	89 bf       	out	0x39, r24	; 57
	}
	if ((BUT1_PORT_PIN&(_BV(BUT1)))==0)
 17e:	86 99       	sbic	0x10, 6	; 16
 180:	13 c0       	rjmp	.+38     	; 0x1a8 <Buttons+0xb2>
	{
		if (p_generator->duration==DURATION_US320) 
 182:	80 91 7b 00 	lds	r24, 0x007B
 186:	81 11       	cpse	r24, r1
 188:	02 c0       	rjmp	.+4      	; 0x18e <Buttons+0x98>
		{
			p_generator->duration=DURATION_50;
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	03 c0       	rjmp	.+6      	; 0x194 <Buttons+0x9e>
		}
		else if (p_generator->duration==DURATION_50)
 18e:	81 30       	cpi	r24, 0x01	; 1
 190:	21 f4       	brne	.+8      	; 0x19a <Buttons+0xa4>
		{
			p_generator->duration=DURATION_90;
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	80 93 7b 00 	sts	0x007B, r24
 198:	02 c0       	rjmp	.+4      	; 0x19e <Buttons+0xa8>
		}
		else
		{
			p_generator->duration=DURATION_US320;
 19a:	10 92 7b 00 	sts	0x007B, r1
		}
		p_generator->state=GEN_OFF;
 19e:	10 92 79 00 	sts	0x0079, r1
		GENERATOR_OFF;
 1a2:	89 b7       	in	r24, 0x39	; 57
 1a4:	8f 7b       	andi	r24, 0xBF	; 191
 1a6:	89 bf       	out	0x39, r24	; 57
	}
	PT_END(pt);
 1a8:	19 82       	std	Y+1, r1	; 0x01
 1aa:	18 82       	st	Y, r1
 1ac:	83 e0       	ldi	r24, 0x03	; 3
 1ae:	05 c0       	rjmp	.+10     	; 0x1ba <Buttons+0xc4>
//Протопоток 1 - обработка нажатия кнопок, настройка режима генератора
PT_THREAD(Buttons(struct pt *pt))
{
	static uint32_t but_timer=0;
	PT_BEGIN(pt);
	PT_WAIT_UNTIL(pt, (st_millis()-but_timer)>=80);
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	03 c0       	rjmp	.+6      	; 0x1ba <Buttons+0xc4>
		{
			p_generator->period=PERIOD_HZ1000;
		}
		else
		{
			p_generator->regime=GEN_MANUAL;
 1b4:	10 92 7a 00 	sts	0x007A, r1
 1b8:	dd cf       	rjmp	.-70     	; 0x174 <Buttons+0x7e>
		}
		p_generator->state=GEN_OFF;
		GENERATOR_OFF;
	}
	PT_END(pt);
}
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	1f 91       	pop	r17
 1c0:	0f 91       	pop	r16
 1c2:	08 95       	ret

000001c4 <Switch>:
//Протопоток2 - настрока таймера1 и индикация режима работы генератора
PT_THREAD(Switch(struct pt *pt))
{
 1c4:	0f 93       	push	r16
 1c6:	1f 93       	push	r17
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	ec 01       	movw	r28, r24
	uint32_t dur=0;
	static volatile uint32_t switch_timer=0;
	PT_BEGIN(pt);
 1ce:	88 81       	ld	r24, Y
 1d0:	99 81       	ldd	r25, Y+1	; 0x01
 1d2:	85 30       	cpi	r24, 0x05	; 5
 1d4:	21 e0       	ldi	r18, 0x01	; 1
 1d6:	92 07       	cpc	r25, r18
 1d8:	61 f0       	breq	.+24     	; 0x1f2 <Switch+0x2e>
 1da:	81 33       	cpi	r24, 0x31	; 49
 1dc:	21 e0       	ldi	r18, 0x01	; 1
 1de:	92 07       	cpc	r25, r18
 1e0:	09 f4       	brne	.+2      	; 0x1e4 <Switch+0x20>
 1e2:	74 c0       	rjmp	.+232    	; 0x2cc <Switch+0x108>
 1e4:	89 2b       	or	r24, r25
 1e6:	09 f0       	breq	.+2      	; 0x1ea <Switch+0x26>
 1e8:	82 c0       	rjmp	.+260    	; 0x2ee <Switch+0x12a>
	PT_WAIT_UNTIL(pt,(st_millis()-switch_timer)>=10);//запуск протопотока каждые 10мсек
 1ea:	85 e0       	ldi	r24, 0x05	; 5
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	99 83       	std	Y+1, r25	; 0x01
 1f0:	88 83       	st	Y, r24
 1f2:	28 df       	rcall	.-432    	; 0x44 <st_millis>
 1f4:	00 91 65 00 	lds	r16, 0x0065
 1f8:	10 91 66 00 	lds	r17, 0x0066
 1fc:	20 91 67 00 	lds	r18, 0x0067
 200:	30 91 68 00 	lds	r19, 0x0068
 204:	dc 01       	movw	r26, r24
 206:	cb 01       	movw	r24, r22
 208:	80 1b       	sub	r24, r16
 20a:	91 0b       	sbc	r25, r17
 20c:	a2 0b       	sbc	r26, r18
 20e:	b3 0b       	sbc	r27, r19
 210:	0a 97       	sbiw	r24, 0x0a	; 10
 212:	a1 05       	cpc	r26, r1
 214:	b1 05       	cpc	r27, r1
 216:	10 f4       	brcc	.+4      	; 0x21c <Switch+0x58>
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	6c c0       	rjmp	.+216    	; 0x2f4 <Switch+0x130>
	if ((p_generator->regime==GEN_PERIODIC)&&(p_generator->state==GEN_OFF))
 21c:	80 91 7a 00 	lds	r24, 0x007A
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	09 f0       	breq	.+2      	; 0x226 <Switch+0x62>
 224:	42 c0       	rjmp	.+132    	; 0x2aa <Switch+0xe6>
 226:	80 91 79 00 	lds	r24, 0x0079
 22a:	81 11       	cpse	r24, r1
 22c:	40 c0       	rjmp	.+128    	; 0x2ae <Switch+0xea>
	{
		if (p_generator->period==PERIOD_HZ1000)
 22e:	80 91 7c 00 	lds	r24, 0x007C
 232:	82 30       	cpi	r24, 0x02	; 2
 234:	31 f4       	brne	.+12     	; 0x242 <Switch+0x7e>
		{
			TCCR1B|=PRESCALER_1_MASK;
 236:	8e b5       	in	r24, 0x2e	; 46
 238:	81 60       	ori	r24, 0x01	; 1
 23a:	8e bd       	out	0x2e, r24	; 46
			ICR1=PERIOD_HZ1000;
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	07 c0       	rjmp	.+14     	; 0x250 <Switch+0x8c>
		}
		else if (p_generator->period==PERIOD_HZ100)
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	41 f4       	brne	.+16     	; 0x256 <Switch+0x92>
		{
			TCCR1B|=PRESCALER_8_MASK;
 246:	8e b5       	in	r24, 0x2e	; 46
 248:	82 60       	ori	r24, 0x02	; 2
 24a:	8e bd       	out	0x2e, r24	; 46
			ICR1=PERIOD_HZ100;
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	95 bd       	out	0x25, r25	; 37
 252:	84 bd       	out	0x24, r24	; 36
 254:	05 c0       	rjmp	.+10     	; 0x260 <Switch+0x9c>
		}
		else 
		{
			TCCR1B|=PRESCALER_256_MASK;
 256:	8e b5       	in	r24, 0x2e	; 46
 258:	88 60       	ori	r24, 0x08	; 8
 25a:	8e bd       	out	0x2e, r24	; 46
			ICR1=PERIOD_HZ1;
 25c:	15 bc       	out	0x25, r1	; 37
 25e:	14 bc       	out	0x24, r1	; 36
		}
		if (p_generator->duration==DURATION_90)
 260:	80 91 7b 00 	lds	r24, 0x007B
 264:	82 30       	cpi	r24, 0x02	; 2
 266:	59 f4       	brne	.+22     	; 0x27e <Switch+0xba>
		{
			dur=((7*ICR1)>>3);
 268:	84 b5       	in	r24, 0x24	; 36
 26a:	95 b5       	in	r25, 0x25	; 37
 26c:	67 e0       	ldi	r22, 0x07	; 7
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	e7 d0       	rcall	.+462    	; 0x440 <__mulhi3>
 272:	43 e0       	ldi	r20, 0x03	; 3
 274:	96 95       	lsr	r25
 276:	87 95       	ror	r24
 278:	4a 95       	dec	r20
 27a:	e1 f7       	brne	.-8      	; 0x274 <Switch+0xb0>
 27c:	0d c0       	rjmp	.+26     	; 0x298 <Switch+0xd4>
			OCR1=(uint16_t)dur;
		}
		else if (p_generator->duration==DURATION_50)
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	29 f4       	brne	.+10     	; 0x28c <Switch+0xc8>
		{
			OCR1=(ICR1>>1);
 282:	84 b5       	in	r24, 0x24	; 36
 284:	95 b5       	in	r25, 0x25	; 37
 286:	96 95       	lsr	r25
 288:	87 95       	ror	r24
 28a:	06 c0       	rjmp	.+12     	; 0x298 <Switch+0xd4>
		}
		else
		{
			OCR1=(ICR1>>12);
 28c:	84 b5       	in	r24, 0x24	; 36
 28e:	95 b5       	in	r25, 0x25	; 37
 290:	89 2f       	mov	r24, r25
 292:	99 27       	eor	r25, r25
 294:	82 95       	swap	r24
 296:	8f 70       	andi	r24, 0x0F	; 15
 298:	9b bd       	out	0x2b, r25	; 43
 29a:	8a bd       	out	0x2a, r24	; 42
		}
		p_generator->state=GEN_ON;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	80 93 79 00 	sts	0x0079, r24
		GENERATOR_ON;
 2a2:	89 b7       	in	r24, 0x39	; 57
 2a4:	80 64       	ori	r24, 0x40	; 64
 2a6:	89 bf       	out	0x39, r24	; 57
 2a8:	19 c0       	rjmp	.+50     	; 0x2dc <Switch+0x118>
	}
	else if (p_generator->regime==GEN_UART)
 2aa:	82 30       	cpi	r24, 0x02	; 2
 2ac:	b9 f0       	breq	.+46     	; 0x2dc <Switch+0x118>
	{
		//тут что-то будет :) можно прямо здесь написать работу от уарта, а можно в отдельно протопотоке
	}
	else 
	{
		GENERATOR_OFF;
 2ae:	89 b7       	in	r24, 0x39	; 57
 2b0:	8f 7b       	andi	r24, 0xBF	; 191
 2b2:	89 bf       	out	0x39, r24	; 57
		p_generator->regime=GEN_MANUAL; //на всякий пожарный, если режим генератора свалится в что-то неизвестное,
 2b4:	10 92 7a 00 	sts	0x007A, r1
		//то попадет сюда и выставит ручной режим
		p_generator->state=GEN_OFF;
 2b8:	10 92 79 00 	sts	0x0079, r1
		PT_SPAWN(pt, &Sync_pt, Sync(&Sync_pt));//вызываем дочерний протопоток ручного или синхро запуска
 2bc:	10 92 72 00 	sts	0x0072, r1
 2c0:	10 92 71 00 	sts	0x0071, r1
 2c4:	81 e3       	ldi	r24, 0x31	; 49
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	99 83       	std	Y+1, r25	; 0x01
 2ca:	88 83       	st	Y, r24
 2cc:	81 e7       	ldi	r24, 0x71	; 113
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	f4 de       	rcall	.-536    	; 0xba <Sync>
 2d2:	82 30       	cpi	r24, 0x02	; 2
 2d4:	08 f4       	brcc	.+2      	; 0x2d8 <Switch+0x114>
 2d6:	a0 cf       	rjmp	.-192    	; 0x218 <Switch+0x54>
		//Макс частота нажатия кнопки ~2Гц
		LED0_OFF;
 2d8:	92 98       	cbi	0x12, 2	; 18
		LED1_OFF;
 2da:	94 98       	cbi	0x12, 4	; 18
	}
	switch_timer=st_millis();
 2dc:	b3 de       	rcall	.-666    	; 0x44 <st_millis>
 2de:	60 93 65 00 	sts	0x0065, r22
 2e2:	70 93 66 00 	sts	0x0066, r23
 2e6:	80 93 67 00 	sts	0x0067, r24
 2ea:	90 93 68 00 	sts	0x0068, r25
	PT_END(pt);
 2ee:	19 82       	std	Y+1, r1	; 0x01
 2f0:	18 82       	st	Y, r1
 2f2:	83 e0       	ldi	r24, 0x03	; 3
}
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	1f 91       	pop	r17
 2fa:	0f 91       	pop	r16
 2fc:	08 95       	ret

000002fe <Leds>:
PT_THREAD(Leds(struct pt *pt))
{
 2fe:	0f 93       	push	r16
 300:	1f 93       	push	r17
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	ec 01       	movw	r28, r24
	static volatile uint32_t leds_timer=0;
	static volatile uint8_t counter=0;
	PT_BEGIN(pt);
 308:	88 81       	ld	r24, Y
 30a:	99 81       	ldd	r25, Y+1	; 0x01
 30c:	00 97       	sbiw	r24, 0x00	; 0
 30e:	21 f0       	breq	.+8      	; 0x318 <Leds+0x1a>
 310:	8e 33       	cpi	r24, 0x3E	; 62
 312:	91 40       	sbci	r25, 0x01	; 1
 314:	29 f0       	breq	.+10     	; 0x320 <Leds+0x22>
 316:	42 c0       	rjmp	.+132    	; 0x39c <Leds+0x9e>
	PT_WAIT_UNTIL(pt,(st_millis()-leds_timer)>=100);//запуск протопотока каждые 0.1мсек
 318:	8e e3       	ldi	r24, 0x3E	; 62
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	99 83       	std	Y+1, r25	; 0x01
 31e:	88 83       	st	Y, r24
 320:	91 de       	rcall	.-734    	; 0x44 <st_millis>
 322:	00 91 61 00 	lds	r16, 0x0061
 326:	10 91 62 00 	lds	r17, 0x0062
 32a:	20 91 63 00 	lds	r18, 0x0063
 32e:	30 91 64 00 	lds	r19, 0x0064
 332:	dc 01       	movw	r26, r24
 334:	cb 01       	movw	r24, r22
 336:	80 1b       	sub	r24, r16
 338:	91 0b       	sbc	r25, r17
 33a:	a2 0b       	sbc	r26, r18
 33c:	b3 0b       	sbc	r27, r19
 33e:	84 36       	cpi	r24, 0x64	; 100
 340:	91 05       	cpc	r25, r1
 342:	a1 05       	cpc	r26, r1
 344:	b1 05       	cpc	r27, r1
 346:	70 f1       	brcs	.+92     	; 0x3a4 <Leds+0xa6>
	if (p_generator->regime==GEN_PERIODIC)
 348:	80 91 7a 00 	lds	r24, 0x007A
 34c:	81 30       	cpi	r24, 0x01	; 1
 34e:	e9 f4       	brne	.+58     	; 0x38a <Leds+0x8c>
	{
		switch(p_generator->period)
 350:	80 91 7c 00 	lds	r24, 0x007C
 354:	81 30       	cpi	r24, 0x01	; 1
 356:	a9 f0       	breq	.+42     	; 0x382 <Leds+0x84>
 358:	18 f0       	brcs	.+6      	; 0x360 <Leds+0x62>
 35a:	82 30       	cpi	r24, 0x02	; 2
 35c:	e9 f0       	breq	.+58     	; 0x398 <Leds+0x9a>
 35e:	1e c0       	rjmp	.+60     	; 0x39c <Leds+0x9e>
		{
			case PERIOD_HZ1:
				if (((LED0_PORT_PIN&(_BV(LED0)))==0)&&(counter>10)) //моргает LED0 раз в секунду
 360:	82 99       	sbic	0x10, 2	; 16
 362:	08 c0       	rjmp	.+16     	; 0x374 <Leds+0x76>
 364:	80 91 60 00 	lds	r24, 0x0060
 368:	8b 30       	cpi	r24, 0x0B	; 11
 36a:	20 f0       	brcs	.+8      	; 0x374 <Leds+0x76>
				{
					LED0_OFF;
 36c:	92 98       	cbi	0x12, 2	; 18
					counter=0;
 36e:	10 92 60 00 	sts	0x0060, r1
 372:	10 c0       	rjmp	.+32     	; 0x394 <Leds+0x96>
				}
				else 
				{
					LED0_ON;
 374:	92 9a       	sbi	0x12, 2	; 18
					counter++;
 376:	80 91 60 00 	lds	r24, 0x0060
 37a:	8f 5f       	subi	r24, 0xFF	; 255
 37c:	80 93 60 00 	sts	0x0060, r24
 380:	09 c0       	rjmp	.+18     	; 0x394 <Leds+0x96>
				}
				LED1_OFF;
				break;
			case PERIOD_HZ100:
				if (((LED0_PORT_PIN&(_BV(LED0)))==0)) //моргает LED0 10 раз в секунду
 382:	82 9b       	sbis	0x10, 2	; 16
 384:	06 c0       	rjmp	.+12     	; 0x392 <Leds+0x94>
				{
					LED0_OFF;
				}
				else
				{
					LED0_ON;
 386:	92 9a       	sbi	0x12, 2	; 18
 388:	05 c0       	rjmp	.+10     	; 0x394 <Leds+0x96>
				LED0_ON;
				LED1_ON;
				break;
		}
	}
	else if (p_generator->regime==GEN_UART) //моргаем обоими светодиодами
 38a:	82 30       	cpi	r24, 0x02	; 2
 38c:	39 f4       	brne	.+14     	; 0x39c <Leds+0x9e>
	{
		if ((LED0_PORT_PIN&(_BV(LED0)))==0)
 38e:	82 99       	sbic	0x10, 2	; 16
 390:	03 c0       	rjmp	.+6      	; 0x398 <Leds+0x9a>
		{
			LED0_OFF;
 392:	92 98       	cbi	0x12, 2	; 18
			LED1_OFF;
 394:	94 98       	cbi	0x12, 4	; 18
 396:	02 c0       	rjmp	.+4      	; 0x39c <Leds+0x9e>
		}
		else 
		{
			LED0_ON;
 398:	92 9a       	sbi	0x12, 2	; 18
			LED1_ON;
 39a:	94 9a       	sbi	0x12, 4	; 18
		}
	}
	PT_END(pt);
 39c:	19 82       	std	Y+1, r1	; 0x01
 39e:	18 82       	st	Y, r1
 3a0:	83 e0       	ldi	r24, 0x03	; 3
 3a2:	01 c0       	rjmp	.+2      	; 0x3a6 <Leds+0xa8>
PT_THREAD(Leds(struct pt *pt))
{
	static volatile uint32_t leds_timer=0;
	static volatile uint8_t counter=0;
	PT_BEGIN(pt);
	PT_WAIT_UNTIL(pt,(st_millis()-leds_timer)>=100);//запуск протопотока каждые 0.1мсек
 3a4:	80 e0       	ldi	r24, 0x00	; 0
			LED0_ON;
			LED1_ON;
		}
	}
	PT_END(pt);
}
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	1f 91       	pop	r17
 3ac:	0f 91       	pop	r16
 3ae:	08 95       	ret

000003b0 <main>:


int main(void)
{
	//Инициализация струтуры генератора
	p_generator->state=GEN_OFF;
 3b0:	10 92 79 00 	sts	0x0079, r1
	p_generator->regime=GEN_MANUAL;
 3b4:	10 92 7a 00 	sts	0x007A, r1
	p_generator->duration=DURATION_US320;
 3b8:	10 92 7b 00 	sts	0x007B, r1
	p_generator->period=PERIOD_HZ1;
 3bc:	10 92 7c 00 	sts	0x007C, r1
	//Настройка входов-выходов
	DDRD=0b00011110; //PD6 - button1, PD5 - button0, PD4 - OUT, PD3 - LED1, PD2- LED0, PD1 -TX, PD0 - RX
 3c0:	8e e1       	ldi	r24, 0x1E	; 30
 3c2:	81 bb       	out	0x11, r24	; 17
	DDRB=0b11111111; //all pins on portb are outputs
 3c4:	8f ef       	ldi	r24, 0xFF	; 255
 3c6:	87 bb       	out	0x17, r24	; 23
	PORTD=0b01100000;//100k pull-up PD6, PD5
 3c8:	80 e6       	ldi	r24, 0x60	; 96
 3ca:	82 bb       	out	0x12, r24	; 18
	PORTB=0;
 3cc:	18 ba       	out	0x18, r1	; 24
	
	// Настройка системного таймера
	TCCR0A=0b00000010;//CTC operation of timer
 3ce:	82 e0       	ldi	r24, 0x02	; 2
 3d0:	80 bf       	out	0x30, r24	; 48
	TCCR0B=0b00000011;//Timer count from clk with 64 prescaler
 3d2:	83 e0       	ldi	r24, 0x03	; 3
 3d4:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0; //обнуляем счетчик таймера
 3d6:	12 be       	out	0x32, r1	; 50
	OCR0A = 125;//прерывание каждые 100тиков, то есть каждые 1мсек
 3d8:	8d e7       	ldi	r24, 0x7D	; 125
 3da:	86 bf       	out	0x36, r24	; 54
	//TIMSK |= _BV(OCIE0A);//разрешаем прерывание по совпадению TCNT0 с OCR0A
	
	//Начальная настройка таймера генератора, 1Гц, 100мкс
	TCCR1A=0b01000010;//Toggle OC1A on campare match
 3dc:	82 e4       	ldi	r24, 0x42	; 66
 3de:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=0b00011100; //FastPWM with ICR s TOP, prescaler 256 ->32us resolution
 3e0:	8c e1       	ldi	r24, 0x1C	; 28
 3e2:	8e bd       	out	0x2e, r24	; 46
	TCNT1=0;
 3e4:	1d bc       	out	0x2d, r1	; 45
 3e6:	1c bc       	out	0x2c, r1	; 44
	ICR1=p_generator->period;
 3e8:	15 bc       	out	0x25, r1	; 37
 3ea:	14 bc       	out	0x24, r1	; 36
	OCR1=p_generator->duration;
 3ec:	1b bc       	out	0x2b, r1	; 43
 3ee:	1a bc       	out	0x2a, r1	; 42
	TIMSK |= _BV(OCIE0A)|_BV(OCIE1A);//разрешаем прерывание по совпадению TCNT0 с OCR0A
 3f0:	89 b7       	in	r24, 0x39	; 57
 3f2:	81 64       	ori	r24, 0x41	; 65
 3f4:	89 bf       	out	0x39, r24	; 57
	
	//Настройка UART
	
	//Инициализация протопотоков
	PT_INIT(&Buttons_pt);
 3f6:	10 92 78 00 	sts	0x0078, r1
 3fa:	10 92 77 00 	sts	0x0077, r1
	PT_INIT(&Switch_pt);
 3fe:	10 92 76 00 	sts	0x0076, r1
 402:	10 92 75 00 	sts	0x0075, r1
	PT_INIT(&Leds_pt);
 406:	10 92 74 00 	sts	0x0074, r1
 40a:	10 92 73 00 	sts	0x0073, r1
	PT_INIT(&Sync_pt);
 40e:	10 92 72 00 	sts	0x0072, r1
 412:	10 92 71 00 	sts	0x0071, r1
	
	//Настройка собаки
	wdt_reset(); //сбрасываем собаку на всякий пожарный
 416:	a8 95       	wdr
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
 418:	9f e0       	ldi	r25, 0x0F	; 15
 41a:	88 e1       	ldi	r24, 0x18	; 24
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	f8 94       	cli
 420:	a8 95       	wdr
 422:	81 bd       	out	0x21, r24	; 33
 424:	0f be       	out	0x3f, r0	; 63
 426:	91 bd       	out	0x21, r25	; 33
	wdt_enable(WDTO_2S); //запускаем собаку с перидом 2с
	
	//Разрешаем прерывания, запускаем работу шедулера
	sei();
 428:	78 94       	sei

    while(1)
    {
		//Крутим протопотоки
		PT_SCHEDULE(Buttons(&Buttons_pt));
 42a:	87 e7       	ldi	r24, 0x77	; 119
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	63 de       	rcall	.-826    	; 0xf6 <Buttons>
		PT_SCHEDULE(Switch(&Switch_pt));
 430:	85 e7       	ldi	r24, 0x75	; 117
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	c7 de       	rcall	.-626    	; 0x1c4 <Switch>
		PT_SCHEDULE(Leds(&Leds_pt));
 436:	83 e7       	ldi	r24, 0x73	; 115
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	61 df       	rcall	.-318    	; 0x2fe <Leds>
		wdt_reset(); //переодически сбрасываем собаку чтобы не улетететь в ресет
 43c:	a8 95       	wdr
	 }
 43e:	f5 cf       	rjmp	.-22     	; 0x42a <main+0x7a>

00000440 <__mulhi3>:
 440:	00 24       	eor	r0, r0
 442:	55 27       	eor	r21, r21
 444:	04 c0       	rjmp	.+8      	; 0x44e <__mulhi3+0xe>
 446:	08 0e       	add	r0, r24
 448:	59 1f       	adc	r21, r25
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	00 97       	sbiw	r24, 0x00	; 0
 450:	29 f0       	breq	.+10     	; 0x45c <__mulhi3+0x1c>
 452:	76 95       	lsr	r23
 454:	67 95       	ror	r22
 456:	b8 f3       	brcs	.-18     	; 0x446 <__mulhi3+0x6>
 458:	71 05       	cpc	r23, r1
 45a:	b9 f7       	brne	.-18     	; 0x44a <__mulhi3+0xa>
 45c:	80 2d       	mov	r24, r0
 45e:	95 2f       	mov	r25, r21
 460:	08 95       	ret

00000462 <_exit>:
 462:	f8 94       	cli

00000464 <__stop_program>:
 464:	ff cf       	rjmp	.-2      	; 0x464 <__stop_program>
