
Tiny2313 simple generator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000434  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  00800060  00800060  000004a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000015a  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000df  00000000  00000000  000006ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000270  00000000  00000000  000007a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00000a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000016f  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000069  00000000  00000000  00000c87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	4e c0       	rjmp	.+156    	; 0xa6 <__vector_4>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__vector_13>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>
  22:	0f c0       	rjmp	.+30     	; 0x42 <__bad_interrupt>
  24:	0e c0       	rjmp	.+28     	; 0x42 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a1 38       	cpi	r26, 0x81	; 129
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	a2 d1       	rcall	.+836    	; 0x384 <main>
  40:	f7 c1       	rjmp	.+1006   	; 0x430 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <st_millis>:
//Фукция выдачи текущего системного времени
uint32_t st_millis(void)
{
	uint32_t m;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  44:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  46:	f8 94       	cli
	{
		m = st_timer0_millis;
  48:	60 91 6d 00 	lds	r22, 0x006D
  4c:	70 91 6e 00 	lds	r23, 0x006E
  50:	80 91 6f 00 	lds	r24, 0x006F
  54:	90 91 70 00 	lds	r25, 0x0070
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
  58:	2f bf       	out	0x3f, r18	; 63
	}

	return m;
}
  5a:	08 95       	ret

0000005c <__vector_13>:


/*Обработчики прерываний*/
//Обработка прерывания по совпадению от таймера0, увеличивает системный таймер
ISR(TIMER0_COMPA_vect)
{
  5c:	1f 92       	push	r1
  5e:	0f 92       	push	r0
  60:	0f b6       	in	r0, 0x3f	; 63
  62:	0f 92       	push	r0
  64:	11 24       	eor	r1, r1
  66:	8f 93       	push	r24
  68:	9f 93       	push	r25
  6a:	af 93       	push	r26
  6c:	bf 93       	push	r27
	st_timer0_millis++;
  6e:	80 91 6d 00 	lds	r24, 0x006D
  72:	90 91 6e 00 	lds	r25, 0x006E
  76:	a0 91 6f 00 	lds	r26, 0x006F
  7a:	b0 91 70 00 	lds	r27, 0x0070
  7e:	01 96       	adiw	r24, 0x01	; 1
  80:	a1 1d       	adc	r26, r1
  82:	b1 1d       	adc	r27, r1
  84:	80 93 6d 00 	sts	0x006D, r24
  88:	90 93 6e 00 	sts	0x006E, r25
  8c:	a0 93 6f 00 	sts	0x006F, r26
  90:	b0 93 70 00 	sts	0x0070, r27
}
  94:	bf 91       	pop	r27
  96:	af 91       	pop	r26
  98:	9f 91       	pop	r25
  9a:	8f 91       	pop	r24
  9c:	0f 90       	pop	r0
  9e:	0f be       	out	0x3f, r0	; 63
  a0:	0f 90       	pop	r0
  a2:	1f 90       	pop	r1
  a4:	18 95       	reti

000000a6 <__vector_4>:
//Обработка прерывания по совпадению от таймера1
ISR(TIMER1_COMPA_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
	
}
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <Sync>:

/* Протопотоки */

//Дочерний протопоток, который отрабатывает ручной запуск
PT_THREAD(Sync(struct pt *pt))
{
  ba:	fc 01       	movw	r30, r24
	PT_BEGIN(pt);
  bc:	80 81       	ld	r24, Z
  be:	91 81       	ldd	r25, Z+1	; 0x01
  c0:	89 2b       	or	r24, r25
  c2:	a9 f4       	brne	.+42     	; 0xee <__stack+0xf>
	//PT_SEM_SIGNAL(pt, &manual_pulse); //устанавливает 1 в manual_pulse, сигнализируя что кнопки больше не опрашивались в другом пропотоке
	OUT_OFF; //устанавливаем 0 на выходе
  c4:	93 98       	cbi	0x12, 3	; 18
	if ((BUT1_PORT_PIN&(_BV(BUT1)))==0)
  c6:	86 99       	sbic	0x10, 6	; 16
  c8:	0e c0       	rjmp	.+28     	; 0xe6 <__stack+0x7>
	{
		LED0_ON;
  ca:	92 9a       	sbi	0x12, 2	; 18
		OUT_ON; //устанавливаем 1 на выходе
  cc:	93 9a       	sbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	8d e0       	ldi	r24, 0x0D	; 13
  d0:	8a 95       	dec	r24
  d2:	f1 f7       	brne	.-4      	; 0xd0 <Sync+0x16>
  d4:	00 00       	nop
		_delay_us(5); //держим 1 на пине 80 микросекунд
		OUT_OFF; //сбрасываем выход в 0
  d6:	93 98       	cbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	8f e1       	ldi	r24, 0x1F	; 31
  da:	9e e4       	ldi	r25, 0x4E	; 78
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <Sync+0x22>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <__stack+0x3>
  e2:	00 00       	nop
		_delay_ms(10); //задержка перед следующим срабатыванием
		LED0_OFF;
  e4:	92 98       	cbi	0x12, 2	; 18
	}
	PT_EXIT(pt);
  e6:	11 82       	std	Z+1, r1	; 0x01
  e8:	10 82       	st	Z, r1
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	08 95       	ret
	PT_END(pt);
  ee:	11 82       	std	Z+1, r1	; 0x01
  f0:	10 82       	st	Z, r1
  f2:	83 e0       	ldi	r24, 0x03	; 3
}
  f4:	08 95       	ret

000000f6 <Buttons>:

//Протопоток 1 - обработка нажатия кнопок, настройка режима генератора
PT_THREAD(Buttons(struct pt *pt))
{
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	ec 01       	movw	r28, r24
	static uint32_t but_timer=0;
	PT_BEGIN(pt);
 100:	88 81       	ld	r24, Y
 102:	99 81       	ldd	r25, Y+1	; 0x01
 104:	00 97       	sbiw	r24, 0x00	; 0
 106:	21 f0       	breq	.+8      	; 0x110 <Buttons+0x1a>
 108:	8d 3c       	cpi	r24, 0xCD	; 205
 10a:	91 05       	cpc	r25, r1
 10c:	29 f0       	breq	.+10     	; 0x118 <Buttons+0x22>
 10e:	5d c0       	rjmp	.+186    	; 0x1ca <Buttons+0xd4>
	PT_WAIT_UNTIL(pt, (st_millis()-but_timer)>=80);
 110:	8d ec       	ldi	r24, 0xCD	; 205
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	99 83       	std	Y+1, r25	; 0x01
 116:	88 83       	st	Y, r24
 118:	95 df       	rcall	.-214    	; 0x44 <st_millis>
 11a:	00 91 69 00 	lds	r16, 0x0069
 11e:	10 91 6a 00 	lds	r17, 0x006A
 122:	20 91 6b 00 	lds	r18, 0x006B
 126:	30 91 6c 00 	lds	r19, 0x006C
 12a:	dc 01       	movw	r26, r24
 12c:	cb 01       	movw	r24, r22
 12e:	80 1b       	sub	r24, r16
 130:	91 0b       	sbc	r25, r17
 132:	a2 0b       	sbc	r26, r18
 134:	b3 0b       	sbc	r27, r19
 136:	80 35       	cpi	r24, 0x50	; 80
 138:	91 05       	cpc	r25, r1
 13a:	a1 05       	cpc	r26, r1
 13c:	b1 05       	cpc	r27, r1
 13e:	08 f4       	brcc	.+2      	; 0x142 <Buttons+0x4c>
 140:	48 c0       	rjmp	.+144    	; 0x1d2 <Buttons+0xdc>
	but_timer=st_millis();
 142:	80 df       	rcall	.-256    	; 0x44 <st_millis>
 144:	60 93 69 00 	sts	0x0069, r22
 148:	70 93 6a 00 	sts	0x006A, r23
 14c:	80 93 6b 00 	sts	0x006B, r24
 150:	90 93 6c 00 	sts	0x006C, r25
	if ((BUT0_PORT_PIN&(_BV(BUT0)))==0)
 154:	85 99       	sbic	0x10, 5	; 16
 156:	21 c0       	rjmp	.+66     	; 0x19a <Buttons+0xa4>
	{
		if (p_generator->regime==GEN_MANUAL) 
 158:	80 91 7a 00 	lds	r24, 0x007A
 15c:	81 11       	cpse	r24, r1
 15e:	0c c0       	rjmp	.+24     	; 0x178 <Buttons+0x82>
		{
			p_generator->regime=GEN_PERIODIC; 
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	80 93 7a 00 	sts	0x007A, r24
			p_generator->period=PERIOD_HZ1;
 166:	82 e1       	ldi	r24, 0x12	; 18
 168:	9a e7       	ldi	r25, 0x7A	; 122
 16a:	90 93 7e 00 	sts	0x007E, r25
 16e:	80 93 7d 00 	sts	0x007D, r24
			p_generator->prescaler=PRESCALER_256;
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	0a c0       	rjmp	.+20     	; 0x18c <Buttons+0x96>
		} //при долгом нажатии кн0, проиходит смена периода
		else if ((p_generator->regime==GEN_PERIODIC)&&(p_generator->period=PERIOD_HZ1))
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	69 f4       	brne	.+26     	; 0x196 <Buttons+0xa0>
		{
			p_generator->period=PERIOD_HZ100;
 17c:	80 e1       	ldi	r24, 0x10	; 16
 17e:	97 e2       	ldi	r25, 0x27	; 39
 180:	90 93 7e 00 	sts	0x007E, r25
 184:	80 93 7d 00 	sts	0x007D, r24
			p_generator->prescaler=PRESCALER_8;
 188:	88 e0       	ldi	r24, 0x08	; 8
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	90 93 80 00 	sts	0x0080, r25
 190:	80 93 7f 00 	sts	0x007F, r24
 194:	02 c0       	rjmp	.+4      	; 0x19a <Buttons+0xa4>
			p_generator->period=PERIOD_HZ1000;
			p_generator->prescaler=PRESCALER_1;
		}
		else
		{
			p_generator->regime=GEN_MANUAL;
 196:	10 92 7a 00 	sts	0x007A, r1
		}
	}
	if ((BUT1_PORT_PIN&(_BV(BUT1)))==0)
 19a:	86 99       	sbic	0x10, 6	; 16
 19c:	16 c0       	rjmp	.+44     	; 0x1ca <Buttons+0xd4>
	{
		if (p_generator->duration==DURATION_US320) 
 19e:	80 91 7b 00 	lds	r24, 0x007B
 1a2:	90 91 7c 00 	lds	r25, 0x007C
 1a6:	8a 30       	cpi	r24, 0x0A	; 10
 1a8:	91 05       	cpc	r25, r1
 1aa:	19 f4       	brne	.+6      	; 0x1b2 <Buttons+0xbc>
		{
			p_generator->duration=DURATION_50;
 1ac:	89 e0       	ldi	r24, 0x09	; 9
 1ae:	9d e3       	ldi	r25, 0x3D	; 61
 1b0:	08 c0       	rjmp	.+16     	; 0x1c2 <Buttons+0xcc>
		}
		else if (p_generator->duration==DURATION_50)
 1b2:	89 30       	cpi	r24, 0x09	; 9
 1b4:	9d 43       	sbci	r25, 0x3D	; 61
 1b6:	19 f4       	brne	.+6      	; 0x1be <Buttons+0xc8>
		{
			p_generator->duration=DURATION_90;
 1b8:	8d ed       	ldi	r24, 0xDD	; 221
 1ba:	9d e6       	ldi	r25, 0x6D	; 109
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <Buttons+0xcc>
		}
		else
		{
			p_generator->duration=DURATION_US320;
 1be:	8a e0       	ldi	r24, 0x0A	; 10
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	90 93 7c 00 	sts	0x007C, r25
 1c6:	80 93 7b 00 	sts	0x007B, r24
		}
	}
	PT_END(pt);
 1ca:	19 82       	std	Y+1, r1	; 0x01
 1cc:	18 82       	st	Y, r1
 1ce:	83 e0       	ldi	r24, 0x03	; 3
 1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <Buttons+0xde>
//Протопоток 1 - обработка нажатия кнопок, настройка режима генератора
PT_THREAD(Buttons(struct pt *pt))
{
	static uint32_t but_timer=0;
	PT_BEGIN(pt);
	PT_WAIT_UNTIL(pt, (st_millis()-but_timer)>=80);
 1d2:	80 e0       	ldi	r24, 0x00	; 0
		{
			p_generator->duration=DURATION_US320;
		}
	}
	PT_END(pt);
}
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	08 95       	ret

000001de <Switch>:
//Протопоток2 - настрока таймера1 и индикация режима работы генератора
PT_THREAD(Switch(struct pt *pt))
{
 1de:	0f 93       	push	r16
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	ec 01       	movw	r28, r24
	static volatile uint32_t switch_timer=0;
	PT_BEGIN(pt);
 1e8:	88 81       	ld	r24, Y
 1ea:	99 81       	ldd	r25, Y+1	; 0x01
 1ec:	8c 3f       	cpi	r24, 0xFC	; 252
 1ee:	91 05       	cpc	r25, r1
 1f0:	59 f0       	breq	.+22     	; 0x208 <Switch+0x2a>
 1f2:	81 30       	cpi	r24, 0x01	; 1
 1f4:	21 e0       	ldi	r18, 0x01	; 1
 1f6:	92 07       	cpc	r25, r18
 1f8:	69 f1       	breq	.+90     	; 0x254 <Switch+0x76>
 1fa:	89 2b       	or	r24, r25
 1fc:	09 f0       	breq	.+2      	; 0x200 <Switch+0x22>
 1fe:	59 c0       	rjmp	.+178    	; 0x2b2 <Switch+0xd4>
	PT_WAIT_UNTIL(pt,(st_millis()-switch_timer)>=10);//запуск протопотока каждые 10мсек
 200:	8c ef       	ldi	r24, 0xFC	; 252
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	99 83       	std	Y+1, r25	; 0x01
 206:	88 83       	st	Y, r24
 208:	1d df       	rcall	.-454    	; 0x44 <st_millis>
 20a:	00 91 65 00 	lds	r16, 0x0065
 20e:	10 91 66 00 	lds	r17, 0x0066
 212:	20 91 67 00 	lds	r18, 0x0067
 216:	30 91 68 00 	lds	r19, 0x0068
 21a:	dc 01       	movw	r26, r24
 21c:	cb 01       	movw	r24, r22
 21e:	80 1b       	sub	r24, r16
 220:	91 0b       	sbc	r25, r17
 222:	a2 0b       	sbc	r26, r18
 224:	b3 0b       	sbc	r27, r19
 226:	0a 97       	sbiw	r24, 0x0a	; 10
 228:	a1 05       	cpc	r26, r1
 22a:	b1 05       	cpc	r27, r1
 22c:	10 f4       	brcc	.+4      	; 0x232 <Switch+0x54>
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	43 c0       	rjmp	.+134    	; 0x2b8 <Switch+0xda>
	if (p_generator->regime==GEN_MANUAL)
 232:	80 91 7a 00 	lds	r24, 0x007A
 236:	81 11       	cpse	r24, r1
 238:	14 c0       	rjmp	.+40     	; 0x262 <Switch+0x84>
	{
		p_generator->state=GEN_OFF;
 23a:	10 92 79 00 	sts	0x0079, r1
		GENERATOR_OFF;
 23e:	89 b7       	in	r24, 0x39	; 57
 240:	8f 7b       	andi	r24, 0xBF	; 191
 242:	89 bf       	out	0x39, r24	; 57
		PT_SPAWN(pt, &Sync_pt, Sync(&Sync_pt));//вызываем дочерний протопоток ручного или синхро запуска
 244:	10 92 72 00 	sts	0x0072, r1
 248:	10 92 71 00 	sts	0x0071, r1
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	99 83       	std	Y+1, r25	; 0x01
 252:	88 83       	st	Y, r24
 254:	81 e7       	ldi	r24, 0x71	; 113
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	30 df       	rcall	.-416    	; 0xba <Sync>
 25a:	82 30       	cpi	r24, 0x02	; 2
 25c:	40 f3       	brcs	.-48     	; 0x22e <Switch+0x50>
		//Макс частота нажатия кнопки ~2Гц
		LED0_OFF;
 25e:	92 98       	cbi	0x12, 2	; 18
		LED1_OFF;
 260:	94 98       	cbi	0x12, 4	; 18
	}
	if (p_generator->regime==GEN_PERIODIC)
 262:	80 91 7a 00 	lds	r24, 0x007A
 266:	81 30       	cpi	r24, 0x01	; 1
 268:	d9 f4       	brne	.+54     	; 0x2a0 <Switch+0xc2>
	{
		switch(p_generator->period)
 26a:	80 91 7d 00 	lds	r24, 0x007D
 26e:	90 91 7e 00 	lds	r25, 0x007E
 272:	80 31       	cpi	r24, 0x10	; 16
 274:	27 e2       	ldi	r18, 0x27	; 39
 276:	92 07       	cpc	r25, r18
 278:	61 f0       	breq	.+24     	; 0x292 <Switch+0xb4>
 27a:	82 31       	cpi	r24, 0x12	; 18
 27c:	2a e7       	ldi	r18, 0x7A	; 122
 27e:	92 07       	cpc	r25, r18
 280:	29 f0       	breq	.+10     	; 0x28c <Switch+0xae>
 282:	80 34       	cpi	r24, 0x40	; 64
 284:	9f 41       	sbci	r25, 0x1F	; 31
 286:	39 f4       	brne	.+14     	; 0x296 <Switch+0xb8>
			case PERIOD_HZ100:
				LED0_OFF;
				LED1_ON;
				break;
			case PERIOD_HZ1000:
				LED0_ON;
 288:	92 9a       	sbi	0x12, 2	; 18
 28a:	04 c0       	rjmp	.+8      	; 0x294 <Switch+0xb6>
	if (p_generator->regime==GEN_PERIODIC)
	{
		switch(p_generator->period)
		{
			case PERIOD_HZ1: 
				LED0_ON;
 28c:	92 9a       	sbi	0x12, 2	; 18
				LED1_OFF;
 28e:	94 98       	cbi	0x12, 4	; 18
				break;
 290:	02 c0       	rjmp	.+4      	; 0x296 <Switch+0xb8>
			case PERIOD_HZ100:
				LED0_OFF;
 292:	92 98       	cbi	0x12, 2	; 18
				LED1_ON;
				break;
			case PERIOD_HZ1000:
				LED0_ON;
				LED1_ON;
 294:	94 9a       	sbi	0x12, 4	; 18
				break;
		}
		p_generator->state=GEN_OFF;
 296:	10 92 79 00 	sts	0x0079, r1
		GENERATOR_OFF;
 29a:	89 b7       	in	r24, 0x39	; 57
 29c:	8f 7b       	andi	r24, 0xBF	; 191
 29e:	89 bf       	out	0x39, r24	; 57
	}
	switch_timer=st_millis();
 2a0:	d1 de       	rcall	.-606    	; 0x44 <st_millis>
 2a2:	60 93 65 00 	sts	0x0065, r22
 2a6:	70 93 66 00 	sts	0x0066, r23
 2aa:	80 93 67 00 	sts	0x0067, r24
 2ae:	90 93 68 00 	sts	0x0068, r25
	PT_END(pt);
 2b2:	19 82       	std	Y+1, r1	; 0x01
 2b4:	18 82       	st	Y, r1
 2b6:	83 e0       	ldi	r24, 0x03	; 3
}
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	0f 91       	pop	r16
 2c0:	08 95       	ret

000002c2 <Leds>:
PT_THREAD(Leds(struct pt *pt))
{
 2c2:	0f 93       	push	r16
 2c4:	1f 93       	push	r17
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	ec 01       	movw	r28, r24
	static volatile uint32_t leds_timer=0;
	static volatile uint8_t counter=0;
	PT_BEGIN(pt);
 2cc:	88 81       	ld	r24, Y
 2ce:	99 81       	ldd	r25, Y+1	; 0x01
 2d0:	00 97       	sbiw	r24, 0x00	; 0
 2d2:	21 f0       	breq	.+8      	; 0x2dc <Leds+0x1a>
 2d4:	82 32       	cpi	r24, 0x22	; 34
 2d6:	91 40       	sbci	r25, 0x01	; 1
 2d8:	29 f0       	breq	.+10     	; 0x2e4 <Leds+0x22>
 2da:	4a c0       	rjmp	.+148    	; 0x370 <Leds+0xae>
	PT_WAIT_UNTIL(pt,(st_millis()-leds_timer)>=100);//запуск протопотока каждые 0.1мсек
 2dc:	82 e2       	ldi	r24, 0x22	; 34
 2de:	91 e0       	ldi	r25, 0x01	; 1
 2e0:	99 83       	std	Y+1, r25	; 0x01
 2e2:	88 83       	st	Y, r24
 2e4:	af de       	rcall	.-674    	; 0x44 <st_millis>
 2e6:	00 91 61 00 	lds	r16, 0x0061
 2ea:	10 91 62 00 	lds	r17, 0x0062
 2ee:	20 91 63 00 	lds	r18, 0x0063
 2f2:	30 91 64 00 	lds	r19, 0x0064
 2f6:	dc 01       	movw	r26, r24
 2f8:	cb 01       	movw	r24, r22
 2fa:	80 1b       	sub	r24, r16
 2fc:	91 0b       	sbc	r25, r17
 2fe:	a2 0b       	sbc	r26, r18
 300:	b3 0b       	sbc	r27, r19
 302:	84 36       	cpi	r24, 0x64	; 100
 304:	91 05       	cpc	r25, r1
 306:	a1 05       	cpc	r26, r1
 308:	b1 05       	cpc	r27, r1
 30a:	b0 f1       	brcs	.+108    	; 0x378 <Leds+0xb6>
	if (p_generator->regime==GEN_PERIODIC)
 30c:	80 91 7a 00 	lds	r24, 0x007A
 310:	81 30       	cpi	r24, 0x01	; 1
 312:	29 f5       	brne	.+74     	; 0x35e <Leds+0x9c>
	{
		switch(p_generator->period)
 314:	80 91 7d 00 	lds	r24, 0x007D
 318:	90 91 7e 00 	lds	r25, 0x007E
 31c:	80 31       	cpi	r24, 0x10	; 16
 31e:	27 e2       	ldi	r18, 0x27	; 39
 320:	92 07       	cpc	r25, r18
 322:	c9 f0       	breq	.+50     	; 0x356 <Leds+0x94>
 324:	82 31       	cpi	r24, 0x12	; 18
 326:	2a e7       	ldi	r18, 0x7A	; 122
 328:	92 07       	cpc	r25, r18
 32a:	21 f0       	breq	.+8      	; 0x334 <Leds+0x72>
 32c:	80 34       	cpi	r24, 0x40	; 64
 32e:	9f 41       	sbci	r25, 0x1F	; 31
 330:	f9 f4       	brne	.+62     	; 0x370 <Leds+0xae>
 332:	1c c0       	rjmp	.+56     	; 0x36c <Leds+0xaa>
		{
			case PERIOD_HZ1:
				if (((LED0_PORT_PIN&(_BV(LED0)))==0)&&(counter>10)) //моргает LED0 раз в секунду
 334:	82 99       	sbic	0x10, 2	; 16
 336:	08 c0       	rjmp	.+16     	; 0x348 <Leds+0x86>
 338:	80 91 60 00 	lds	r24, 0x0060
 33c:	8b 30       	cpi	r24, 0x0B	; 11
 33e:	20 f0       	brcs	.+8      	; 0x348 <Leds+0x86>
				{
					LED0_OFF;
 340:	92 98       	cbi	0x12, 2	; 18
					counter=0;
 342:	10 92 60 00 	sts	0x0060, r1
 346:	10 c0       	rjmp	.+32     	; 0x368 <Leds+0xa6>
				}
				else 
				{
					LED0_ON;
 348:	92 9a       	sbi	0x12, 2	; 18
					counter++;
 34a:	80 91 60 00 	lds	r24, 0x0060
 34e:	8f 5f       	subi	r24, 0xFF	; 255
 350:	80 93 60 00 	sts	0x0060, r24
 354:	09 c0       	rjmp	.+18     	; 0x368 <Leds+0xa6>
				}
				LED1_OFF;
				break;
			case PERIOD_HZ100:
				if (((LED0_PORT_PIN&(_BV(LED0)))==0)) //моргает LED0 10 раз в секунду
 356:	82 9b       	sbis	0x10, 2	; 16
 358:	06 c0       	rjmp	.+12     	; 0x366 <Leds+0xa4>
				{
					LED0_OFF;
				}
				else
				{
					LED0_ON;
 35a:	92 9a       	sbi	0x12, 2	; 18
 35c:	05 c0       	rjmp	.+10     	; 0x368 <Leds+0xa6>
				LED0_ON;
				LED1_ON;
				break;
		}
	}
	else if (p_generator->regime==GEN_UART) //моргаем обоими светодиодами
 35e:	82 30       	cpi	r24, 0x02	; 2
 360:	39 f4       	brne	.+14     	; 0x370 <Leds+0xae>
	{
		if ((LED0_PORT_PIN&(_BV(LED0)))==0)
 362:	82 99       	sbic	0x10, 2	; 16
 364:	03 c0       	rjmp	.+6      	; 0x36c <Leds+0xaa>
		{
			LED0_OFF;
 366:	92 98       	cbi	0x12, 2	; 18
			LED1_OFF;
 368:	94 98       	cbi	0x12, 4	; 18
 36a:	02 c0       	rjmp	.+4      	; 0x370 <Leds+0xae>
		}
		else 
		{
			LED0_ON;
 36c:	92 9a       	sbi	0x12, 2	; 18
			LED1_ON;
 36e:	94 9a       	sbi	0x12, 4	; 18
		}
	}
	PT_END(pt);
 370:	19 82       	std	Y+1, r1	; 0x01
 372:	18 82       	st	Y, r1
 374:	83 e0       	ldi	r24, 0x03	; 3
 376:	01 c0       	rjmp	.+2      	; 0x37a <Leds+0xb8>
PT_THREAD(Leds(struct pt *pt))
{
	static volatile uint32_t leds_timer=0;
	static volatile uint8_t counter=0;
	PT_BEGIN(pt);
	PT_WAIT_UNTIL(pt,(st_millis()-leds_timer)>=100);//запуск протопотока каждые 0.1мсек
 378:	80 e0       	ldi	r24, 0x00	; 0
			LED0_ON;
			LED1_ON;
		}
	}
	PT_END(pt);
}
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	0f 91       	pop	r16
 382:	08 95       	ret

00000384 <main>:


int main(void)
{
	//Инициализация струтуры генератора
	p_generator->state=GEN_OFF;
 384:	10 92 79 00 	sts	0x0079, r1
	p_generator->regime=GEN_MANUAL;
 388:	10 92 7a 00 	sts	0x007A, r1
	p_generator->duration=DURATION_US320;
 38c:	8a e0       	ldi	r24, 0x0A	; 10
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	90 93 7c 00 	sts	0x007C, r25
 394:	80 93 7b 00 	sts	0x007B, r24
	p_generator->period=PERIOD_HZ1;
 398:	22 e1       	ldi	r18, 0x12	; 18
 39a:	3a e7       	ldi	r19, 0x7A	; 122
 39c:	30 93 7e 00 	sts	0x007E, r19
 3a0:	20 93 7d 00 	sts	0x007D, r18
	p_generator->prescaler=PRESCALER_256;
 3a4:	40 e0       	ldi	r20, 0x00	; 0
 3a6:	51 e0       	ldi	r21, 0x01	; 1
 3a8:	50 93 80 00 	sts	0x0080, r21
 3ac:	40 93 7f 00 	sts	0x007F, r20
	//Настройка входов-выходов
	DDRD=0b00011110; //PD6 - button1, PD5 - button0, PD4 - OUT, PD3 - LED1, PD2- LED0, PD1 -TX, PD0 - RX
 3b0:	4e e1       	ldi	r20, 0x1E	; 30
 3b2:	41 bb       	out	0x11, r20	; 17
	DDRB=0b11111111; //all pins on portb are outputs
 3b4:	4f ef       	ldi	r20, 0xFF	; 255
 3b6:	47 bb       	out	0x17, r20	; 23
	PORTD=0b01100000;//100k pull-up PD6, PD5
 3b8:	40 e6       	ldi	r20, 0x60	; 96
 3ba:	42 bb       	out	0x12, r20	; 18
	PORTB=0;
 3bc:	18 ba       	out	0x18, r1	; 24
	
	// Настройка системного таймера
	TCCR0A=0b00000010;//CTC operation of timer
 3be:	42 e0       	ldi	r20, 0x02	; 2
 3c0:	40 bf       	out	0x30, r20	; 48
	TCCR0B=0b00000011;//Timer count from clk with 64 prescaler
 3c2:	43 e0       	ldi	r20, 0x03	; 3
 3c4:	43 bf       	out	0x33, r20	; 51
	TCNT0 = 0; //обнуляем счетчик таймера
 3c6:	12 be       	out	0x32, r1	; 50
	OCR0A = 125;//прерывание каждые 100тиков, то есть каждые 1мсек
 3c8:	4d e7       	ldi	r20, 0x7D	; 125
 3ca:	46 bf       	out	0x36, r20	; 54
	//TIMSK |= _BV(OCIE0A);//разрешаем прерывание по совпадению TCNT0 с OCR0A
	
	//Начальная настройка таймера генератора, 1Гц, 100мкс
	TCCR1A=0b01000010;//Toggle OC1A on campare match
 3cc:	42 e4       	ldi	r20, 0x42	; 66
 3ce:	4f bd       	out	0x2f, r20	; 47
	TCCR1B=0b00011100; //FastPWM with ICR s TOP, prescaler 256 ->32us resolution
 3d0:	4c e1       	ldi	r20, 0x1C	; 28
 3d2:	4e bd       	out	0x2e, r20	; 46
	TCNT1=0;
 3d4:	1d bc       	out	0x2d, r1	; 45
 3d6:	1c bc       	out	0x2c, r1	; 44
	ICR1=p_generator->period;
 3d8:	35 bd       	out	0x25, r19	; 37
 3da:	24 bd       	out	0x24, r18	; 36
	OCR1=p_generator->duration;
 3dc:	9b bd       	out	0x2b, r25	; 43
 3de:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= _BV(OCIE0A)|_BV(OCIE1A);//разрешаем прерывание по совпадению TCNT0 с OCR0A
 3e0:	89 b7       	in	r24, 0x39	; 57
 3e2:	81 64       	ori	r24, 0x41	; 65
 3e4:	89 bf       	out	0x39, r24	; 57
	
	//Настройка UART
	
	//Инициализация протопотоков
	PT_INIT(&Buttons_pt);
 3e6:	10 92 78 00 	sts	0x0078, r1
 3ea:	10 92 77 00 	sts	0x0077, r1
	PT_INIT(&Switch_pt);
 3ee:	10 92 76 00 	sts	0x0076, r1
 3f2:	10 92 75 00 	sts	0x0075, r1
	PT_INIT(&Leds_pt);
 3f6:	10 92 74 00 	sts	0x0074, r1
 3fa:	10 92 73 00 	sts	0x0073, r1
	PT_INIT(&Sync_pt);
 3fe:	10 92 72 00 	sts	0x0072, r1
 402:	10 92 71 00 	sts	0x0071, r1
	
	//Настройка собаки
	wdt_reset(); //сбрасываем собаку на всякий пожарный
 406:	a8 95       	wdr
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
 408:	9f e0       	ldi	r25, 0x0F	; 15
 40a:	88 e1       	ldi	r24, 0x18	; 24
 40c:	0f b6       	in	r0, 0x3f	; 63
 40e:	f8 94       	cli
 410:	a8 95       	wdr
 412:	81 bd       	out	0x21, r24	; 33
 414:	0f be       	out	0x3f, r0	; 63
 416:	91 bd       	out	0x21, r25	; 33
	wdt_enable(WDTO_2S); //запускаем собаку с перидом 2с
	
	//Разрешаем прерывания, запускаем работу шедулера
	sei();
 418:	78 94       	sei

    while(1)
    {
		//Крутим протопотоки
		PT_SCHEDULE(Buttons(&Buttons_pt));
 41a:	87 e7       	ldi	r24, 0x77	; 119
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	6b de       	rcall	.-810    	; 0xf6 <Buttons>
		PT_SCHEDULE(Switch(&Switch_pt));
 420:	85 e7       	ldi	r24, 0x75	; 117
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	dc de       	rcall	.-584    	; 0x1de <Switch>
		PT_SCHEDULE(Leds(&Leds_pt));
 426:	83 e7       	ldi	r24, 0x73	; 115
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	4b df       	rcall	.-362    	; 0x2c2 <Leds>
		wdt_reset(); //переодически сбрасываем собаку чтобы не улетететь в ресет
 42c:	a8 95       	wdr
	 }
 42e:	f5 cf       	rjmp	.-22     	; 0x41a <main+0x96>

00000430 <_exit>:
 430:	f8 94       	cli

00000432 <__stop_program>:
 432:	ff cf       	rjmp	.-2      	; 0x432 <__stop_program>
