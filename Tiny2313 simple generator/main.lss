
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000001d  00800060  00800060  0000061e  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000061e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000068  00000000  00000000  0000063e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000614  00000000  00000000  000006a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000221  00000000  00000000  00000cba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000730  00000000  00000000  00000edb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  0000160c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001ec  00000000  00000000  0000168c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000155  00000000  00000000  00001878  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	50 c0       	rjmp	.+160    	; 0xaa <__vector_4>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	22 c0       	rjmp	.+68     	; 0x60 <__vector_13>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>
  22:	0f c0       	rjmp	.+30     	; 0x42 <__bad_interrupt>
  24:	0e c0       	rjmp	.+28     	; 0x42 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	ad 37       	cpi	r26, 0x7D	; 125
  3a:	b1 07       	cpc	r27, r17
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	62 d2       	rcall	.+1220   	; 0x504 <main>
  40:	b2 c2       	rjmp	.+1380   	; 0x5a6 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <st_millis>:
//Фукция выдачи текущего системного времени
uint32_t st_millis(void)
{
	uint32_t m;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  44:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  46:	f8 94       	cli
	{
		m = st_timer0_millis;
  48:	20 91 6f 00 	lds	r18, 0x006F
  4c:	30 91 70 00 	lds	r19, 0x0070
  50:	40 91 71 00 	lds	r20, 0x0071
  54:	50 91 72 00 	lds	r21, 0x0072
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
  58:	8f bf       	out	0x3f, r24	; 63
	}

	return m;
}
  5a:	b9 01       	movw	r22, r18
  5c:	ca 01       	movw	r24, r20
  5e:	08 95       	ret

00000060 <__vector_13>:


/*Обработчики прерываний*/
//Обработка прерывания по совпадению от таймера0, увеличивает системный таймер
ISR(TIMER0_COMPA_vect)
{
  60:	1f 92       	push	r1
  62:	0f 92       	push	r0
  64:	0f b6       	in	r0, 0x3f	; 63
  66:	0f 92       	push	r0
  68:	11 24       	eor	r1, r1
  6a:	8f 93       	push	r24
  6c:	9f 93       	push	r25
  6e:	af 93       	push	r26
  70:	bf 93       	push	r27
	st_timer0_millis++;
  72:	80 91 6f 00 	lds	r24, 0x006F
  76:	90 91 70 00 	lds	r25, 0x0070
  7a:	a0 91 71 00 	lds	r26, 0x0071
  7e:	b0 91 72 00 	lds	r27, 0x0072
  82:	01 96       	adiw	r24, 0x01	; 1
  84:	a1 1d       	adc	r26, r1
  86:	b1 1d       	adc	r27, r1
  88:	80 93 6f 00 	sts	0x006F, r24
  8c:	90 93 70 00 	sts	0x0070, r25
  90:	a0 93 71 00 	sts	0x0071, r26
  94:	b0 93 72 00 	sts	0x0072, r27
}
  98:	bf 91       	pop	r27
  9a:	af 91       	pop	r26
  9c:	9f 91       	pop	r25
  9e:	8f 91       	pop	r24
  a0:	0f 90       	pop	r0
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	0f 90       	pop	r0
  a6:	1f 90       	pop	r1
  a8:	18 95       	reti

000000aa <__vector_4>:
		//OUT_OFF;
		//TIMSK&=~_BV(TOIE1);
	}
}*/
ISR(TIMER1_COMPA_vect)
{
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
  b4:	8f 93       	push	r24
	if (p_generator->state==GEN_ONESHOT) 
  b6:	80 91 73 00 	lds	r24, 0x0073
  ba:	82 30       	cpi	r24, 0x02	; 2
  bc:	11 f4       	brne	.+4      	; 0xc2 <__vector_4+0x18>
	{
		p_generator->state=GEN_OFF;
  be:	10 92 73 00 	sts	0x0073, r1
	}
}
  c2:	8f 91       	pop	r24
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <Buttons>:

/* Протопотоки */

//Протопоток 1 - обработка нажатия кнопок, настройка режима генератора
PT_THREAD(Buttons(struct pt *pt))
{
  ce:	fc 01       	movw	r30, r24
	static uint32_t but_timer=0;
	static volatile uint8_t delay=0; //200мсек задержка между нажатиями
	PT_BEGIN(pt);
  d0:	80 81       	ld	r24, Z
  d2:	91 81       	ldd	r25, Z+1	; 0x01
  d4:	00 97       	sbiw	r24, 0x00	; 0
  d6:	29 f0       	breq	.+10     	; 0xe2 <__stack+0x3>
  d8:	8a 3f       	cpi	r24, 0xFA	; 250
  da:	91 05       	cpc	r25, r1
  dc:	09 f0       	breq	.+2      	; 0xe0 <__stack+0x1>
  de:	8d c0       	rjmp	.+282    	; 0x1fa <__stack+0x11b>
  e0:	04 c0       	rjmp	.+8      	; 0xea <__stack+0xb>
	PT_WAIT_UNTIL(pt, (st_millis()-but_timer)>=10);
  e2:	8a ef       	ldi	r24, 0xFA	; 250
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	91 83       	std	Z+1, r25	; 0x01
  e8:	80 83       	st	Z, r24
//Фукция выдачи текущего системного времени
uint32_t st_millis(void)
{
	uint32_t m;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  ea:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  ec:	f8 94       	cli
	{
		m = st_timer0_millis;
  ee:	20 91 6f 00 	lds	r18, 0x006F
  f2:	30 91 70 00 	lds	r19, 0x0070
  f6:	40 91 71 00 	lds	r20, 0x0071
  fa:	50 91 72 00 	lds	r21, 0x0072
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
  fe:	8f bf       	out	0x3f, r24	; 63
PT_THREAD(Buttons(struct pt *pt))
{
	static uint32_t but_timer=0;
	static volatile uint8_t delay=0; //200мсек задержка между нажатиями
	PT_BEGIN(pt);
	PT_WAIT_UNTIL(pt, (st_millis()-but_timer)>=10);
 100:	80 91 6b 00 	lds	r24, 0x006B
 104:	90 91 6c 00 	lds	r25, 0x006C
 108:	a0 91 6d 00 	lds	r26, 0x006D
 10c:	b0 91 6e 00 	lds	r27, 0x006E
 110:	28 1b       	sub	r18, r24
 112:	39 0b       	sbc	r19, r25
 114:	4a 0b       	sbc	r20, r26
 116:	5b 0b       	sbc	r21, r27
 118:	2a 30       	cpi	r18, 0x0A	; 10
 11a:	31 05       	cpc	r19, r1
 11c:	41 05       	cpc	r20, r1
 11e:	51 05       	cpc	r21, r1
 120:	10 f4       	brcc	.+4      	; 0x126 <__stack+0x47>
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	08 95       	ret
//Фукция выдачи текущего системного времени
uint32_t st_millis(void)
{
	uint32_t m;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 126:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 128:	f8 94       	cli
	{
		m = st_timer0_millis;
 12a:	20 91 6f 00 	lds	r18, 0x006F
 12e:	30 91 70 00 	lds	r19, 0x0070
 132:	40 91 71 00 	lds	r20, 0x0071
 136:	50 91 72 00 	lds	r21, 0x0072
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 13a:	8f bf       	out	0x3f, r24	; 63
{
	static uint32_t but_timer=0;
	static volatile uint8_t delay=0; //200мсек задержка между нажатиями
	PT_BEGIN(pt);
	PT_WAIT_UNTIL(pt, (st_millis()-but_timer)>=10);
	but_timer=st_millis();
 13c:	20 93 6b 00 	sts	0x006B, r18
 140:	30 93 6c 00 	sts	0x006C, r19
 144:	40 93 6d 00 	sts	0x006D, r20
 148:	50 93 6e 00 	sts	0x006E, r21
	if (delay>0) 
 14c:	80 91 6a 00 	lds	r24, 0x006A
 150:	88 23       	and	r24, r24
 152:	21 f0       	breq	.+8      	; 0x15c <__stack+0x7d>
	{
		delay--;
 154:	80 91 6a 00 	lds	r24, 0x006A
 158:	81 50       	subi	r24, 0x01	; 1
 15a:	4d c0       	rjmp	.+154    	; 0x1f6 <__stack+0x117>
	}
	else 
	{
		if (!(BUT1_PORT_PIN&(_BV(BUT1))))//((BUT1_PORT_PIN&(_BV(BUT1)))==0)
 15c:	85 99       	sbic	0x10, 5	; 16
 15e:	29 c0       	rjmp	.+82     	; 0x1b2 <__stack+0xd3>
		{
			if (p_generator->regime==GEN_MANUAL)
 160:	90 91 74 00 	lds	r25, 0x0074
 164:	99 23       	and	r25, r25
 166:	31 f4       	brne	.+12     	; 0x174 <__stack+0x95>
			{
				p_generator->regime=GEN_PERIODIC;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	80 93 74 00 	sts	0x0074, r24
				p_generator->period=PERIOD_HZ1;
 16e:	10 92 76 00 	sts	0x0076, r1
 172:	13 c0       	rjmp	.+38     	; 0x19a <__stack+0xbb>
			}
			else if ((p_generator->regime==GEN_PERIODIC)&&(p_generator->period==PERIOD_HZ1))
 174:	91 30       	cpi	r25, 0x01	; 1
 176:	89 f4       	brne	.+34     	; 0x19a <__stack+0xbb>
 178:	80 91 76 00 	lds	r24, 0x0076
 17c:	88 23       	and	r24, r24
 17e:	19 f4       	brne	.+6      	; 0x186 <__stack+0xa7>
			{
				p_generator->period=PERIOD_HZ100;
 180:	90 93 76 00 	sts	0x0076, r25
 184:	0a c0       	rjmp	.+20     	; 0x19a <__stack+0xbb>
			}
			else if ((p_generator->regime==GEN_PERIODIC)&&(p_generator->period==PERIOD_HZ100))
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	21 f4       	brne	.+8      	; 0x192 <__stack+0xb3>
			{
				p_generator->period=PERIOD_HZ1000;
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	80 93 76 00 	sts	0x0076, r24
 190:	04 c0       	rjmp	.+8      	; 0x19a <__stack+0xbb>
			}
			else if ((p_generator->regime==GEN_PERIODIC)&&(p_generator->period==PERIOD_HZ1000))
 192:	82 30       	cpi	r24, 0x02	; 2
 194:	11 f4       	brne	.+4      	; 0x19a <__stack+0xbb>
			{
				p_generator->regime=GEN_MANUAL;
 196:	10 92 74 00 	sts	0x0074, r1
			}
			p_generator->state=GEN_OFF;
 19a:	10 92 73 00 	sts	0x0073, r1
			GENERATOR_OFF;
 19e:	89 b7       	in	r24, 0x39	; 57
 1a0:	8f 7b       	andi	r24, 0xBF	; 191
 1a2:	89 bf       	out	0x39, r24	; 57
			DISCONECT_TIMER_FROM_PIN;
 1a4:	8f b5       	in	r24, 0x2f	; 47
 1a6:	8f 77       	andi	r24, 0x7F	; 127
 1a8:	8f bd       	out	0x2f, r24	; 47
			OUT_OFF;
 1aa:	c3 98       	cbi	0x18, 3	; 24
			delay=BUTTON_DELAY_200MSEC;
 1ac:	84 e1       	ldi	r24, 0x14	; 20
 1ae:	80 93 6a 00 	sts	0x006A, r24
		}
		if (!(BUT0_PORT_PIN&(_BV(BUT0))))
 1b2:	86 99       	sbic	0x10, 6	; 16
 1b4:	22 c0       	rjmp	.+68     	; 0x1fa <__stack+0x11b>
		{
			if ((p_generator->regime==GEN_MANUAL))
 1b6:	80 91 74 00 	lds	r24, 0x0074
 1ba:	88 23       	and	r24, r24
 1bc:	21 f4       	brne	.+8      	; 0x1c6 <__stack+0xe7>
			{
				p_generator->state=GEN_ONESHOT;
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	80 93 73 00 	sts	0x0073, r24
 1c4:	10 c0       	rjmp	.+32     	; 0x1e6 <__stack+0x107>
			}
			else if ((p_generator->regime==GEN_PERIODIC))
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	71 f4       	brne	.+28     	; 0x1e6 <__stack+0x107>
			{
				if (p_generator->duration==DURATION_US320)
 1ca:	90 91 75 00 	lds	r25, 0x0075
 1ce:	99 23       	and	r25, r25
 1d0:	19 f0       	breq	.+6      	; 0x1d8 <__stack+0xf9>
				{
					p_generator->duration=DURATION_50;
				}
				else if (p_generator->duration==DURATION_50)
 1d2:	91 30       	cpi	r25, 0x01	; 1
 1d4:	21 f4       	brne	.+8      	; 0x1de <__stack+0xff>
				{
					p_generator->duration=DURATION_90;
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	80 93 75 00 	sts	0x0075, r24
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <__stack+0x103>
				}
				else
				{
					p_generator->duration=DURATION_US320;
 1de:	10 92 75 00 	sts	0x0075, r1
				}
				p_generator->state=GEN_OFF;
 1e2:	10 92 73 00 	sts	0x0073, r1
			}
			GENERATOR_OFF;
 1e6:	89 b7       	in	r24, 0x39	; 57
 1e8:	8f 7b       	andi	r24, 0xBF	; 191
 1ea:	89 bf       	out	0x39, r24	; 57
			DISCONECT_TIMER_FROM_PIN;
 1ec:	8f b5       	in	r24, 0x2f	; 47
 1ee:	8f 77       	andi	r24, 0x7F	; 127
 1f0:	8f bd       	out	0x2f, r24	; 47
			OUT_OFF;
 1f2:	c3 98       	cbi	0x18, 3	; 24
			delay=BUTTON_DELAY_200MSEC;
 1f4:	84 e1       	ldi	r24, 0x14	; 20
 1f6:	80 93 6a 00 	sts	0x006A, r24
		}
	}
	PT_END(pt);
 1fa:	11 82       	std	Z+1, r1	; 0x01
 1fc:	10 82       	st	Z, r1
 1fe:	83 e0       	ldi	r24, 0x03	; 3
}
 200:	08 95       	ret

00000202 <Switch>:
//Протопоток2 - настрока таймера1 и индикация режима работы генератора
PT_THREAD(Switch(struct pt *pt))
{
 202:	fc 01       	movw	r30, r24
	//uint32_t dur=0;
	static volatile uint32_t switch_timer=0;
	PT_BEGIN(pt);
 204:	80 81       	ld	r24, Z
 206:	91 81       	ldd	r25, Z+1	; 0x01
 208:	00 97       	sbiw	r24, 0x00	; 0
 20a:	29 f0       	breq	.+10     	; 0x216 <Switch+0x14>
 20c:	8f 53       	subi	r24, 0x3F	; 63
 20e:	91 40       	sbci	r25, 0x01	; 1
 210:	09 f0       	breq	.+2      	; 0x214 <Switch+0x12>
 212:	f9 c0       	rjmp	.+498    	; 0x406 <Switch+0x204>
 214:	04 c0       	rjmp	.+8      	; 0x21e <Switch+0x1c>
	PT_WAIT_UNTIL(pt,(st_millis()-switch_timer)>=10);//запуск протопотока каждые 10мсек
 216:	8f e3       	ldi	r24, 0x3F	; 63
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	91 83       	std	Z+1, r25	; 0x01
 21c:	80 83       	st	Z, r24
//Фукция выдачи текущего системного времени
uint32_t st_millis(void)
{
	uint32_t m;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 21e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 220:	f8 94       	cli
	{
		m = st_timer0_millis;
 222:	20 91 6f 00 	lds	r18, 0x006F
 226:	30 91 70 00 	lds	r19, 0x0070
 22a:	40 91 71 00 	lds	r20, 0x0071
 22e:	50 91 72 00 	lds	r21, 0x0072
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 232:	8f bf       	out	0x3f, r24	; 63
PT_THREAD(Switch(struct pt *pt))
{
	//uint32_t dur=0;
	static volatile uint32_t switch_timer=0;
	PT_BEGIN(pt);
	PT_WAIT_UNTIL(pt,(st_millis()-switch_timer)>=10);//запуск протопотока каждые 10мсек
 234:	80 91 66 00 	lds	r24, 0x0066
 238:	90 91 67 00 	lds	r25, 0x0067
 23c:	a0 91 68 00 	lds	r26, 0x0068
 240:	b0 91 69 00 	lds	r27, 0x0069
 244:	28 1b       	sub	r18, r24
 246:	39 0b       	sbc	r19, r25
 248:	4a 0b       	sbc	r20, r26
 24a:	5b 0b       	sbc	r21, r27
 24c:	2a 30       	cpi	r18, 0x0A	; 10
 24e:	31 05       	cpc	r19, r1
 250:	41 05       	cpc	r20, r1
 252:	51 05       	cpc	r21, r1
 254:	10 f4       	brcc	.+4      	; 0x25a <Switch+0x58>
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	08 95       	ret
//Фукция выдачи текущего системного времени
uint32_t st_millis(void)
{
	uint32_t m;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 25a:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 25c:	f8 94       	cli
	{
		m = st_timer0_millis;
 25e:	80 91 6f 00 	lds	r24, 0x006F
 262:	90 91 70 00 	lds	r25, 0x0070
 266:	a0 91 71 00 	lds	r26, 0x0071
 26a:	b0 91 72 00 	lds	r27, 0x0072
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 26e:	2f bf       	out	0x3f, r18	; 63
{
	//uint32_t dur=0;
	static volatile uint32_t switch_timer=0;
	PT_BEGIN(pt);
	PT_WAIT_UNTIL(pt,(st_millis()-switch_timer)>=10);//запуск протопотока каждые 10мсек
	switch_timer=st_millis();
 270:	80 93 66 00 	sts	0x0066, r24
 274:	90 93 67 00 	sts	0x0067, r25
 278:	a0 93 68 00 	sts	0x0068, r26
 27c:	b0 93 69 00 	sts	0x0069, r27
	if (p_generator->state==GEN_OFF)
 280:	90 91 73 00 	lds	r25, 0x0073
 284:	99 23       	and	r25, r25
 286:	09 f0       	breq	.+2      	; 0x28a <Switch+0x88>
 288:	9b c0       	rjmp	.+310    	; 0x3c0 <Switch+0x1be>
	{
		if(p_generator->regime==GEN_PERIODIC)
 28a:	80 91 74 00 	lds	r24, 0x0074
 28e:	81 30       	cpi	r24, 0x01	; 1
 290:	09 f0       	breq	.+2      	; 0x294 <Switch+0x92>
 292:	88 c0       	rjmp	.+272    	; 0x3a4 <Switch+0x1a2>
		{
			CLEAR_TCCR1B;
 294:	8e b5       	in	r24, 0x2e	; 46
 296:	88 7f       	andi	r24, 0xF8	; 248
 298:	8e bd       	out	0x2e, r24	; 46
			//DISCONECT_TIMER_FROM_PIN;
			//OUT_OFF;
			if (p_generator->period==PERIOD_HZ1000)
 29a:	20 91 76 00 	lds	r18, 0x0076
 29e:	22 30       	cpi	r18, 0x02	; 2
 2a0:	31 f4       	brne	.+12     	; 0x2ae <Switch+0xac>
			{
				TCCR1B|=PRESCALER_1_MASK;
 2a2:	8e b5       	in	r24, 0x2e	; 46
 2a4:	81 60       	ori	r24, 0x01	; 1
 2a6:	8e bd       	out	0x2e, r24	; 46
				ICR1=PERIOD_HZ1000_TICKS;
 2a8:	80 e4       	ldi	r24, 0x40	; 64
 2aa:	9f e1       	ldi	r25, 0x1F	; 31
 2ac:	0d c0       	rjmp	.+26     	; 0x2c8 <Switch+0xc6>
			}
			else if (p_generator->period==PERIOD_HZ100)
 2ae:	21 30       	cpi	r18, 0x01	; 1
 2b0:	31 f4       	brne	.+12     	; 0x2be <Switch+0xbc>
			{
				TCCR1B|=PRESCALER_8_MASK;
 2b2:	8e b5       	in	r24, 0x2e	; 46
 2b4:	82 60       	ori	r24, 0x02	; 2
 2b6:	8e bd       	out	0x2e, r24	; 46
				ICR1=PERIOD_HZ100_TICKS;
 2b8:	80 e1       	ldi	r24, 0x10	; 16
 2ba:	97 e2       	ldi	r25, 0x27	; 39
 2bc:	05 c0       	rjmp	.+10     	; 0x2c8 <Switch+0xc6>
			}
			else
			{
				TCCR1B|=PRESCALER_256_MASK;
 2be:	8e b5       	in	r24, 0x2e	; 46
 2c0:	84 60       	ori	r24, 0x04	; 4
 2c2:	8e bd       	out	0x2e, r24	; 46
				ICR1=PERIOD_HZ1_TICKS;
 2c4:	82 e1       	ldi	r24, 0x12	; 18
 2c6:	9a e7       	ldi	r25, 0x7A	; 122
 2c8:	95 bd       	out	0x25, r25	; 37
 2ca:	84 bd       	out	0x24, r24	; 36
			}
			if (p_generator->duration==DURATION_90)
 2cc:	80 91 75 00 	lds	r24, 0x0075
 2d0:	82 30       	cpi	r24, 0x02	; 2
 2d2:	c9 f4       	brne	.+50     	; 0x306 <Switch+0x104>
			{
				OCR1=(uint16_t)((7*(uint32_t)ICR1)>>3);
 2d4:	24 b5       	in	r18, 0x24	; 36
 2d6:	35 b5       	in	r19, 0x25	; 37
 2d8:	40 e0       	ldi	r20, 0x00	; 0
 2da:	50 e0       	ldi	r21, 0x00	; 0
 2dc:	da 01       	movw	r26, r20
 2de:	c9 01       	movw	r24, r18
 2e0:	63 e0       	ldi	r22, 0x03	; 3
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	aa 1f       	adc	r26, r26
 2e8:	bb 1f       	adc	r27, r27
 2ea:	6a 95       	dec	r22
 2ec:	d1 f7       	brne	.-12     	; 0x2e2 <Switch+0xe0>
 2ee:	82 1b       	sub	r24, r18
 2f0:	93 0b       	sbc	r25, r19
 2f2:	a4 0b       	sbc	r26, r20
 2f4:	b5 0b       	sbc	r27, r21
 2f6:	23 e0       	ldi	r18, 0x03	; 3
 2f8:	b6 95       	lsr	r27
 2fa:	a7 95       	ror	r26
 2fc:	97 95       	ror	r25
 2fe:	87 95       	ror	r24
 300:	2a 95       	dec	r18
 302:	d1 f7       	brne	.-12     	; 0x2f8 <Switch+0xf6>
 304:	44 c0       	rjmp	.+136    	; 0x38e <Switch+0x18c>
			}
			else if (p_generator->duration==DURATION_50)
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	29 f4       	brne	.+10     	; 0x314 <Switch+0x112>
			{
				OCR1=(uint16_t)((uint32_t)ICR1>>1);
 30a:	84 b5       	in	r24, 0x24	; 36
 30c:	95 b5       	in	r25, 0x25	; 37
 30e:	96 95       	lsr	r25
 310:	87 95       	ror	r24
 312:	3d c0       	rjmp	.+122    	; 0x38e <Switch+0x18c>
			}
			else
			{
				if (p_generator->period==PERIOD_HZ1000)
 314:	22 30       	cpi	r18, 0x02	; 2
 316:	c9 f4       	brne	.+50     	; 0x34a <Switch+0x148>
				{
					OCR1=(uint16_t)(5*(uint32_t)ICR1>>4);
 318:	24 b5       	in	r18, 0x24	; 36
 31a:	35 b5       	in	r19, 0x25	; 37
 31c:	40 e0       	ldi	r20, 0x00	; 0
 31e:	50 e0       	ldi	r21, 0x00	; 0
 320:	da 01       	movw	r26, r20
 322:	c9 01       	movw	r24, r18
 324:	62 e0       	ldi	r22, 0x02	; 2
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	aa 1f       	adc	r26, r26
 32c:	bb 1f       	adc	r27, r27
 32e:	6a 95       	dec	r22
 330:	d1 f7       	brne	.-12     	; 0x326 <Switch+0x124>
 332:	82 0f       	add	r24, r18
 334:	93 1f       	adc	r25, r19
 336:	a4 1f       	adc	r26, r20
 338:	b5 1f       	adc	r27, r21
 33a:	24 e0       	ldi	r18, 0x04	; 4
 33c:	b6 95       	lsr	r27
 33e:	a7 95       	ror	r26
 340:	97 95       	ror	r25
 342:	87 95       	ror	r24
 344:	2a 95       	dec	r18
 346:	d1 f7       	brne	.-12     	; 0x33c <Switch+0x13a>
 348:	22 c0       	rjmp	.+68     	; 0x38e <Switch+0x18c>
				}
				else if (p_generator->period==PERIOD_HZ100)
 34a:	21 30       	cpi	r18, 0x01	; 1
 34c:	41 f4       	brne	.+16     	; 0x35e <Switch+0x15c>
				{
					OCR1=(uint16_t)((uint32_t)ICR1>>5);
 34e:	84 b5       	in	r24, 0x24	; 36
 350:	95 b5       	in	r25, 0x25	; 37
 352:	75 e0       	ldi	r23, 0x05	; 5
 354:	96 95       	lsr	r25
 356:	87 95       	ror	r24
 358:	7a 95       	dec	r23
 35a:	e1 f7       	brne	.-8      	; 0x354 <Switch+0x152>
 35c:	18 c0       	rjmp	.+48     	; 0x38e <Switch+0x18c>
				}
				else
				{
					OCR1=(uint16_t)(5*(uint32_t)ICR1>>14);
 35e:	24 b5       	in	r18, 0x24	; 36
 360:	35 b5       	in	r19, 0x25	; 37
 362:	40 e0       	ldi	r20, 0x00	; 0
 364:	50 e0       	ldi	r21, 0x00	; 0
 366:	da 01       	movw	r26, r20
 368:	c9 01       	movw	r24, r18
 36a:	62 e0       	ldi	r22, 0x02	; 2
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	aa 1f       	adc	r26, r26
 372:	bb 1f       	adc	r27, r27
 374:	6a 95       	dec	r22
 376:	d1 f7       	brne	.-12     	; 0x36c <Switch+0x16a>
 378:	82 0f       	add	r24, r18
 37a:	93 1f       	adc	r25, r19
 37c:	a4 1f       	adc	r26, r20
 37e:	b5 1f       	adc	r27, r21
 380:	2e e0       	ldi	r18, 0x0E	; 14
 382:	b6 95       	lsr	r27
 384:	a7 95       	ror	r26
 386:	97 95       	ror	r25
 388:	87 95       	ror	r24
 38a:	2a 95       	dec	r18
 38c:	d1 f7       	brne	.-12     	; 0x382 <Switch+0x180>
 38e:	9b bd       	out	0x2b, r25	; 43
 390:	8a bd       	out	0x2a, r24	; 42
				}
			}
			p_generator->state=GEN_ON;
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	80 93 73 00 	sts	0x0073, r24
			CONNECT_TIMER_TO_PIN;//подключаем таймер к пину
 398:	8f b5       	in	r24, 0x2f	; 47
 39a:	80 68       	ori	r24, 0x80	; 128
 39c:	8f bd       	out	0x2f, r24	; 47
			GENERATOR_ON;
 39e:	89 b7       	in	r24, 0x39	; 57
 3a0:	80 64       	ori	r24, 0x40	; 64
 3a2:	89 bf       	out	0x39, r24	; 57
		}
		if (p_generator->regime==GEN_MANUAL)
 3a4:	80 91 74 00 	lds	r24, 0x0074
 3a8:	88 23       	and	r24, r24
 3aa:	69 f5       	brne	.+90     	; 0x406 <Switch+0x204>
		{
			//TIMSK&=~_BV(TOIE1);
			GENERATOR_OFF;
 3ac:	89 b7       	in	r24, 0x39	; 57
 3ae:	8f 7b       	andi	r24, 0xBF	; 191
 3b0:	89 bf       	out	0x39, r24	; 57
			DISCONECT_TIMER_FROM_PIN;
 3b2:	8f b5       	in	r24, 0x2f	; 47
 3b4:	8f 77       	andi	r24, 0x7F	; 127
 3b6:	8f bd       	out	0x2f, r24	; 47
			OUT_OFF;
 3b8:	c3 98       	cbi	0x18, 3	; 24
			LED0_OFF;
 3ba:	93 98       	cbi	0x12, 3	; 18
			LED1_OFF;
 3bc:	94 98       	cbi	0x12, 4	; 18
 3be:	23 c0       	rjmp	.+70     	; 0x406 <Switch+0x204>
		}
	}
	else if (p_generator->regime==GEN_UART)
 3c0:	80 91 74 00 	lds	r24, 0x0074
 3c4:	82 30       	cpi	r24, 0x02	; 2
 3c6:	f9 f0       	breq	.+62     	; 0x406 <Switch+0x204>
	{
		//тут что-то будет :) можно прямо здесь написать работу от уарта, а можно в отдельно протопотоке
	}
	else if ((p_generator->regime==GEN_MANUAL)&&(p_generator->state==GEN_ONESHOT))
 3c8:	88 23       	and	r24, r24
 3ca:	e9 f4       	brne	.+58     	; 0x406 <Switch+0x204>
 3cc:	92 30       	cpi	r25, 0x02	; 2
 3ce:	d9 f4       	brne	.+54     	; 0x406 <Switch+0x204>
	{
		CLEAR_TCCR1B;
 3d0:	8e b5       	in	r24, 0x2e	; 46
 3d2:	88 7f       	andi	r24, 0xF8	; 248
 3d4:	8e bd       	out	0x2e, r24	; 46
		TCCR1B|=PRESCALER_1_MASK;
 3d6:	8e b5       	in	r24, 0x2e	; 46
 3d8:	81 60       	ori	r24, 0x01	; 1
 3da:	8e bd       	out	0x2e, r24	; 46
		DISCONECT_TIMER_FROM_PIN;
 3dc:	8f b5       	in	r24, 0x2f	; 47
 3de:	8f 77       	andi	r24, 0x7F	; 127
 3e0:	8f bd       	out	0x2f, r24	; 47
		TCNT1=0;
 3e2:	1d bc       	out	0x2d, r1	; 45
 3e4:	1c bc       	out	0x2c, r1	; 44
		ICR1=60000;
 3e6:	80 e6       	ldi	r24, 0x60	; 96
 3e8:	9a ee       	ldi	r25, 0xEA	; 234
 3ea:	95 bd       	out	0x25, r25	; 37
 3ec:	84 bd       	out	0x24, r24	; 36
		OCR1=2500;
 3ee:	84 ec       	ldi	r24, 0xC4	; 196
 3f0:	99 e0       	ldi	r25, 0x09	; 9
 3f2:	9b bd       	out	0x2b, r25	; 43
 3f4:	8a bd       	out	0x2a, r24	; 42
		CONNECT_TIMER_TO_PIN;
 3f6:	8f b5       	in	r24, 0x2f	; 47
 3f8:	80 68       	ori	r24, 0x80	; 128
 3fa:	8f bd       	out	0x2f, r24	; 47
		GENERATOR_ON;
 3fc:	89 b7       	in	r24, 0x39	; 57
 3fe:	80 64       	ori	r24, 0x40	; 64
 400:	89 bf       	out	0x39, r24	; 57
		LED0_ON;
 402:	93 9a       	sbi	0x12, 3	; 18
		LED1_ON;
 404:	94 9a       	sbi	0x12, 4	; 18
	}
	PT_END(pt);
 406:	11 82       	std	Z+1, r1	; 0x01
 408:	10 82       	st	Z, r1
 40a:	83 e0       	ldi	r24, 0x03	; 3
}
 40c:	08 95       	ret

0000040e <Leds>:
PT_THREAD(Leds(struct pt *pt))
{
 40e:	fc 01       	movw	r30, r24
	static volatile uint32_t leds_timer=0;
	static volatile uint8_t counter1, counter2=0;
	PT_BEGIN(pt);
 410:	80 81       	ld	r24, Z
 412:	91 81       	ldd	r25, Z+1	; 0x01
 414:	00 97       	sbiw	r24, 0x00	; 0
 416:	29 f0       	breq	.+10     	; 0x422 <Leds+0x14>
 418:	84 59       	subi	r24, 0x94	; 148
 41a:	91 40       	sbci	r25, 0x01	; 1
 41c:	09 f0       	breq	.+2      	; 0x420 <Leds+0x12>
 41e:	6e c0       	rjmp	.+220    	; 0x4fc <Leds+0xee>
 420:	04 c0       	rjmp	.+8      	; 0x42a <Leds+0x1c>
	PT_WAIT_UNTIL(pt,(st_millis()-leds_timer)>=100);//запуск протопотока каждые 0.1мсек
 422:	84 e9       	ldi	r24, 0x94	; 148
 424:	91 e0       	ldi	r25, 0x01	; 1
 426:	91 83       	std	Z+1, r25	; 0x01
 428:	80 83       	st	Z, r24
//Фукция выдачи текущего системного времени
uint32_t st_millis(void)
{
	uint32_t m;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 42a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 42c:	f8 94       	cli
	{
		m = st_timer0_millis;
 42e:	20 91 6f 00 	lds	r18, 0x006F
 432:	30 91 70 00 	lds	r19, 0x0070
 436:	40 91 71 00 	lds	r20, 0x0071
 43a:	50 91 72 00 	lds	r21, 0x0072
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 43e:	8f bf       	out	0x3f, r24	; 63
PT_THREAD(Leds(struct pt *pt))
{
	static volatile uint32_t leds_timer=0;
	static volatile uint8_t counter1, counter2=0;
	PT_BEGIN(pt);
	PT_WAIT_UNTIL(pt,(st_millis()-leds_timer)>=100);//запуск протопотока каждые 0.1мсек
 440:	80 91 62 00 	lds	r24, 0x0062
 444:	90 91 63 00 	lds	r25, 0x0063
 448:	a0 91 64 00 	lds	r26, 0x0064
 44c:	b0 91 65 00 	lds	r27, 0x0065
 450:	28 1b       	sub	r18, r24
 452:	39 0b       	sbc	r19, r25
 454:	4a 0b       	sbc	r20, r26
 456:	5b 0b       	sbc	r21, r27
 458:	24 36       	cpi	r18, 0x64	; 100
 45a:	31 05       	cpc	r19, r1
 45c:	41 05       	cpc	r20, r1
 45e:	51 05       	cpc	r21, r1
 460:	10 f4       	brcc	.+4      	; 0x466 <Leds+0x58>
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	08 95       	ret
//Фукция выдачи текущего системного времени
uint32_t st_millis(void)
{
	uint32_t m;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 466:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 468:	f8 94       	cli
	{
		m = st_timer0_millis;
 46a:	80 91 6f 00 	lds	r24, 0x006F
 46e:	90 91 70 00 	lds	r25, 0x0070
 472:	a0 91 71 00 	lds	r26, 0x0071
 476:	b0 91 72 00 	lds	r27, 0x0072
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 47a:	2f bf       	out	0x3f, r18	; 63
{
	static volatile uint32_t leds_timer=0;
	static volatile uint8_t counter1, counter2=0;
	PT_BEGIN(pt);
	PT_WAIT_UNTIL(pt,(st_millis()-leds_timer)>=100);//запуск протопотока каждые 0.1мсек
	leds_timer=st_millis();
 47c:	80 93 62 00 	sts	0x0062, r24
 480:	90 93 63 00 	sts	0x0063, r25
 484:	a0 93 64 00 	sts	0x0064, r26
 488:	b0 93 65 00 	sts	0x0065, r27
	if (p_generator->regime==GEN_PERIODIC)
 48c:	80 91 74 00 	lds	r24, 0x0074
 490:	81 30       	cpi	r24, 0x01	; 1
 492:	59 f5       	brne	.+86     	; 0x4ea <Leds+0xdc>
	{
		switch(p_generator->period)
 494:	80 91 76 00 	lds	r24, 0x0076
 498:	81 30       	cpi	r24, 0x01	; 1
 49a:	19 f1       	breq	.+70     	; 0x4e2 <Leds+0xd4>
 49c:	81 30       	cpi	r24, 0x01	; 1
 49e:	18 f0       	brcs	.+6      	; 0x4a6 <Leds+0x98>
 4a0:	82 30       	cpi	r24, 0x02	; 2
 4a2:	61 f5       	brne	.+88     	; 0x4fc <Leds+0xee>
 4a4:	20 c0       	rjmp	.+64     	; 0x4e6 <Leds+0xd8>
		{
			case PERIOD_HZ1:
			{
				if (counter1<10) //моргает LED0 раз в секунду
 4a6:	80 91 61 00 	lds	r24, 0x0061
 4aa:	8a 30       	cpi	r24, 0x0A	; 10
 4ac:	48 f4       	brcc	.+18     	; 0x4c0 <Leds+0xb2>
				{
					LED0_ON;
 4ae:	93 9a       	sbi	0x12, 3	; 18
					counter1++;
 4b0:	80 91 61 00 	lds	r24, 0x0061
 4b4:	8f 5f       	subi	r24, 0xFF	; 255
 4b6:	80 93 61 00 	sts	0x0061, r24
					counter2=0;
 4ba:	10 92 60 00 	sts	0x0060, r1
 4be:	1d c0       	rjmp	.+58     	; 0x4fa <Leds+0xec>
				}
				else if (counter2<10)
 4c0:	80 91 60 00 	lds	r24, 0x0060
 4c4:	8a 30       	cpi	r24, 0x0A	; 10
 4c6:	c8 f4       	brcc	.+50     	; 0x4fa <Leds+0xec>
				{
					LED0_OFF;
 4c8:	93 98       	cbi	0x12, 3	; 18
					counter2++;
 4ca:	80 91 60 00 	lds	r24, 0x0060
 4ce:	8f 5f       	subi	r24, 0xFF	; 255
 4d0:	80 93 60 00 	sts	0x0060, r24
					if (counter2>=9)
 4d4:	80 91 60 00 	lds	r24, 0x0060
 4d8:	89 30       	cpi	r24, 0x09	; 9
 4da:	78 f0       	brcs	.+30     	; 0x4fa <Leds+0xec>
					{
						counter1=0;
 4dc:	10 92 61 00 	sts	0x0061, r1
 4e0:	0c c0       	rjmp	.+24     	; 0x4fa <Leds+0xec>
				LED1_OFF;
				break;
			}
			case PERIOD_HZ100: //моргает LED0 - 10 ращ в секунду
			{
				if (((LED0_PORT_PIN&(_BV(LED0)))==0))
 4e2:	83 99       	sbic	0x10, 3	; 16
 4e4:	09 c0       	rjmp	.+18     	; 0x4f8 <Leds+0xea>
				LED1_OFF;
				break;
			}
			case PERIOD_HZ1000: //LED0 горит непрерывно
			{
				LED0_ON;
 4e6:	93 9a       	sbi	0x12, 3	; 18
 4e8:	08 c0       	rjmp	.+16     	; 0x4fa <Leds+0xec>
				LED1_OFF;
				break;
			}
		}
	}
	else if (p_generator->regime==GEN_UART) //моргаем обоими светодиодами
 4ea:	82 30       	cpi	r24, 0x02	; 2
 4ec:	29 f4       	brne	.+10     	; 0x4f8 <Leds+0xea>
	{
		if ((LED0_PORT_PIN&(_BV(LED0)))==0)
 4ee:	83 9b       	sbis	0x10, 3	; 16
 4f0:	03 c0       	rjmp	.+6      	; 0x4f8 <Leds+0xea>
			LED0_OFF;
			LED1_OFF;
		}
		else 
		{
			LED0_ON;
 4f2:	93 9a       	sbi	0x12, 3	; 18
			LED1_ON;
 4f4:	94 9a       	sbi	0x12, 4	; 18
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <Leds+0xee>
		}
	}
	else
	{
		LED0_OFF;
 4f8:	93 98       	cbi	0x12, 3	; 18
		LED1_OFF;	
 4fa:	94 98       	cbi	0x12, 4	; 18
	}
	PT_END(pt);
 4fc:	11 82       	std	Z+1, r1	; 0x01
 4fe:	10 82       	st	Z, r1
 500:	83 e0       	ldi	r24, 0x03	; 3
}
 502:	08 95       	ret

00000504 <main>:
/*?Протопотоки*/

int main(void)
{
 504:	df 93       	push	r29
 506:	cf 93       	push	r28
 508:	00 d0       	rcall	.+0      	; 0x50a <main+0x6>
 50a:	cd b7       	in	r28, 0x3d	; 61
 50c:	de b7       	in	r29, 0x3e	; 62
	volatile uint16_t test=1;
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	9a 83       	std	Y+2, r25	; 0x02
 514:	89 83       	std	Y+1, r24	; 0x01
	//volatile uint32_t test2=0;
	//Инициализация струтуры генератора
	p_generator->state=GEN_OFF;
 516:	10 92 73 00 	sts	0x0073, r1
	p_generator->regime=GEN_MANUAL;
 51a:	10 92 74 00 	sts	0x0074, r1
	p_generator->duration=DURATION_US320;
 51e:	10 92 75 00 	sts	0x0075, r1
	p_generator->period=PERIOD_HZ1;
 522:	10 92 76 00 	sts	0x0076, r1
	//Настройка входов-выходов
	DDRD=0b00011110; //PD6 - button0, PD5 - button1, PD4 - LED1, PD3 -LED0, PD2- free, PD1 -TX, PD0 - RX
 526:	8e e1       	ldi	r24, 0x1E	; 30
 528:	81 bb       	out	0x11, r24	; 17
	DDRB=0b11111111; //PB3- output
 52a:	8f ef       	ldi	r24, 0xFF	; 255
 52c:	87 bb       	out	0x17, r24	; 23
	PORTD=0b01100000;//100k pull-up PD6, PD3
 52e:	80 e6       	ldi	r24, 0x60	; 96
 530:	82 bb       	out	0x12, r24	; 18
	PORTB=0;
 532:	18 ba       	out	0x18, r1	; 24
	
	// Настройка системного таймера
	TCCR0A=0b00000010;//CTC operation of timer
 534:	82 e0       	ldi	r24, 0x02	; 2
 536:	80 bf       	out	0x30, r24	; 48
	TCCR0B=0b00000011;//Timer count from clk with 64 prescaler
 538:	83 e0       	ldi	r24, 0x03	; 3
 53a:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0; //обнуляем счетчик таймера
 53c:	12 be       	out	0x32, r1	; 50
	OCR0A = 125;//прерывание каждые 100тиков, то есть каждые 1мсек
 53e:	8d e7       	ldi	r24, 0x7D	; 125
 540:	86 bf       	out	0x36, r24	; 54
	//TIMSK |= _BV(OCIE0A);//разрешаем прерывание по совпадению TCNT0 с OCR0A
	
	//Начальная настройка таймера генератора, 1Гц, 100мкс
	TCCR1A=0b10000010;//Toggle OC1A on campare match, PB3
 542:	82 e8       	ldi	r24, 0x82	; 130
 544:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=0b00011100; //FastPWM with ICR s TOP, prescaler 256 ->32us resolution
 546:	8c e1       	ldi	r24, 0x1C	; 28
 548:	8e bd       	out	0x2e, r24	; 46
	DISCONECT_TIMER_FROM_PIN;
 54a:	8f b5       	in	r24, 0x2f	; 47
 54c:	8f 77       	andi	r24, 0x7F	; 127
 54e:	8f bd       	out	0x2f, r24	; 47
	TCNT1=0;
 550:	1d bc       	out	0x2d, r1	; 45
 552:	1c bc       	out	0x2c, r1	; 44
	ICR1=0;
 554:	15 bc       	out	0x25, r1	; 37
 556:	14 bc       	out	0x24, r1	; 36
	OCR1=0;	
 558:	1b bc       	out	0x2b, r1	; 43
 55a:	1a bc       	out	0x2a, r1	; 42
	TIMSK |= _BV(OCIE0A);//разрешаем прерывание по совпадению TCNT0 с OCR0A
 55c:	89 b7       	in	r24, 0x39	; 57
 55e:	81 60       	ori	r24, 0x01	; 1
 560:	89 bf       	out	0x39, r24	; 57
	
	//Настройка UART
	
	//Инициализация протопотоков
	PT_INIT(&Buttons_pt);
 562:	10 92 78 00 	sts	0x0078, r1
 566:	10 92 77 00 	sts	0x0077, r1
	PT_INIT(&Switch_pt);
 56a:	10 92 7a 00 	sts	0x007A, r1
 56e:	10 92 79 00 	sts	0x0079, r1
	PT_INIT(&Leds_pt);
 572:	10 92 7c 00 	sts	0x007C, r1
 576:	10 92 7b 00 	sts	0x007B, r1
	//PT_INIT(&Sync_pt);
	//PT_INIT(&Manual_pt);
	//PT_SEM_INIT(&regime_sem, GEN_MANUAL);
	
	//Настройка собаки
	wdt_reset(); //сбрасываем собаку на всякий пожарный
 57a:	a8 95       	wdr
	wdt_enable(WDTO_2S); //запускаем собаку с перидом 2с
 57c:	2f e0       	ldi	r18, 0x0F	; 15
 57e:	88 e1       	ldi	r24, 0x18	; 24
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	0f b6       	in	r0, 0x3f	; 63
 584:	f8 94       	cli
 586:	a8 95       	wdr
 588:	81 bd       	out	0x21, r24	; 33
 58a:	0f be       	out	0x3f, r0	; 63
 58c:	21 bd       	out	0x21, r18	; 33
	//Запускаем прерывани
	sei();
 58e:	78 94       	sei

    while(1)
    {
		//Крутим протопотоки
		PT_SCHEDULE(Buttons(&Buttons_pt));
 590:	87 e7       	ldi	r24, 0x77	; 119
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	9c dd       	rcall	.-1224   	; 0xce <Buttons>
		PT_SCHEDULE(Switch(&Switch_pt));
 596:	89 e7       	ldi	r24, 0x79	; 121
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	33 de       	rcall	.-922    	; 0x202 <Switch>
		PT_SCHEDULE(Leds(&Leds_pt));
 59c:	8b e7       	ldi	r24, 0x7B	; 123
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	36 df       	rcall	.-404    	; 0x40e <Leds>
		wdt_reset(); //переодически сбрасываем собаку чтобы не улетететь в ресет
 5a2:	a8 95       	wdr
 5a4:	f5 cf       	rjmp	.-22     	; 0x590 <main+0x8c>

000005a6 <_exit>:
 5a6:	f8 94       	cli

000005a8 <__stop_program>:
 5a8:	ff cf       	rjmp	.-2      	; 0x5a8 <__stop_program>
